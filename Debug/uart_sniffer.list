
uart_sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080085c0  080085c0  000095c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086ec  080086ec  0000a064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086ec  080086ec  000096ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086f4  080086f4  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086f4  080086f4  000096f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086f8  080086f8  000096f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080086fc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a064  2**0
                  CONTENTS
 10 .bss          00003410  20000064  20000064  0000a064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003474  20003474  0000a064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aee0  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000384d  00000000  00000000  00024f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  000287c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104f  00000000  00000000  00029cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035ad  00000000  00000000  0002acff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c80  00000000  00000000  0002e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4458  00000000  00000000  00046f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b384  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c88  00000000  00000000  0011b3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00121050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085a8 	.word	0x080085a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080085a8 	.word	0x080085a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <clear_buffer>:
buffer_id             uart3_rx_id       = SNIFFER_BUFFER_2;
message_end_condition message_end_state = MESSAGE_END_CURSOR;


void clear_buffer(uint8_t buffer_id)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  switch (buffer_id)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d002      	beq.n	80002a6 <clear_buffer+0x16>
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d007      	beq.n	80002b4 <clear_buffer+0x24>
      break;
    case SNIFFER_BUFFER_2:
      memset(uart3_rx_buffer, 0, sizeof(uart3_rx_buffer));
      break;
    default:
      return;
 80002a4:	e00d      	b.n	80002c2 <clear_buffer+0x32>
      memset(uart1_rx_buffer, 0, sizeof(uart1_rx_buffer));
 80002a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002aa:	2100      	movs	r1, #0
 80002ac:	4806      	ldr	r0, [pc, #24]	@ (80002c8 <clear_buffer+0x38>)
 80002ae:	f007 fc9f 	bl	8007bf0 <memset>
      break;
 80002b2:	e006      	b.n	80002c2 <clear_buffer+0x32>
      memset(uart3_rx_buffer, 0, sizeof(uart3_rx_buffer));
 80002b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002b8:	2100      	movs	r1, #0
 80002ba:	4804      	ldr	r0, [pc, #16]	@ (80002cc <clear_buffer+0x3c>)
 80002bc:	f007 fc98 	bl	8007bf0 <memset>
      break;
 80002c0:	bf00      	nop
  }
}
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	200002a8 	.word	0x200002a8
 80002cc:	200004ac 	.word	0x200004ac

080002d0 <print_all_received_messages>:
  }
}


void print_all_received_messages(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08e      	sub	sp, #56	@ 0x38
 80002d4:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < message_index; i++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80002dc:	e05d      	b.n	800039a <print_all_received_messages+0xca>
  {
    char timebuf[32];
    char linebuf[16];
    sprintf(timebuf, "[%lu ms] ", received_data[i].timestamp);
 80002de:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80002e2:	4934      	ldr	r1, [pc, #208]	@ (80003b4 <print_all_received_messages+0xe4>)
 80002e4:	4613      	mov	r3, r2
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	4413      	add	r3, r2
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	440b      	add	r3, r1
 80002ee:	3344      	adds	r3, #68	@ 0x44
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4930      	ldr	r1, [pc, #192]	@ (80003b8 <print_all_received_messages+0xe8>)
 80002f6:	4618      	mov	r0, r3
 80002f8:	f007 fc58 	bl	8007bac <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)timebuf, strlen(timebuf), 100);
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff6e 	bl	80001e0 <strlen>
 8000304:	4603      	mov	r3, r0
 8000306:	b29a      	uxth	r2, r3
 8000308:	1d39      	adds	r1, r7, #4
 800030a:	2364      	movs	r3, #100	@ 0x64
 800030c:	482b      	ldr	r0, [pc, #172]	@ (80003bc <print_all_received_messages+0xec>)
 800030e:	f003 fb2b 	bl	8003968 <HAL_UART_Transmit>
    sprintf(linebuf, "UART%d: ", received_data[i].line == SNIFFER_BUFFER_1 ? 1 : 3);
 8000312:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000316:	4927      	ldr	r1, [pc, #156]	@ (80003b4 <print_all_received_messages+0xe4>)
 8000318:	4613      	mov	r3, r2
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	4413      	add	r3, r2
 800031e:	00db      	lsls	r3, r3, #3
 8000320:	440b      	add	r3, r1
 8000322:	3341      	adds	r3, #65	@ 0x41
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d101      	bne.n	800032e <print_all_received_messages+0x5e>
 800032a:	2201      	movs	r2, #1
 800032c:	e000      	b.n	8000330 <print_all_received_messages+0x60>
 800032e:	2203      	movs	r2, #3
 8000330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000334:	4922      	ldr	r1, [pc, #136]	@ (80003c0 <print_all_received_messages+0xf0>)
 8000336:	4618      	mov	r0, r3
 8000338:	f007 fc38 	bl	8007bac <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)linebuf, strlen(linebuf), 100);
 800033c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff4d 	bl	80001e0 <strlen>
 8000346:	4603      	mov	r3, r0
 8000348:	b29a      	uxth	r2, r3
 800034a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800034e:	2364      	movs	r3, #100	@ 0x64
 8000350:	481a      	ldr	r0, [pc, #104]	@ (80003bc <print_all_received_messages+0xec>)
 8000352:	f003 fb09 	bl	8003968 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, received_data[i].message, received_data[i].length, 100);
 8000356:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800035a:	4613      	mov	r3, r2
 800035c:	00db      	lsls	r3, r3, #3
 800035e:	4413      	add	r3, r2
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	4a14      	ldr	r2, [pc, #80]	@ (80003b4 <print_all_received_messages+0xe4>)
 8000364:	1899      	adds	r1, r3, r2
 8000366:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800036a:	4812      	ldr	r0, [pc, #72]	@ (80003b4 <print_all_received_messages+0xe4>)
 800036c:	4613      	mov	r3, r2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	4413      	add	r3, r2
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	4403      	add	r3, r0
 8000376:	3340      	adds	r3, #64	@ 0x40
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	461a      	mov	r2, r3
 800037c:	2364      	movs	r3, #100	@ 0x64
 800037e:	480f      	ldr	r0, [pc, #60]	@ (80003bc <print_all_received_messages+0xec>)
 8000380:	f003 faf2 	bl	8003968 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 100);
 8000384:	2364      	movs	r3, #100	@ 0x64
 8000386:	2202      	movs	r2, #2
 8000388:	490e      	ldr	r1, [pc, #56]	@ (80003c4 <print_all_received_messages+0xf4>)
 800038a:	480c      	ldr	r0, [pc, #48]	@ (80003bc <print_all_received_messages+0xec>)
 800038c:	f003 faec 	bl	8003968 <HAL_UART_Transmit>
  for (uint8_t i = 0; i < message_index; i++)
 8000390:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000394:	3301      	adds	r3, #1
 8000396:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <print_all_received_messages+0xf8>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d39b      	bcc.n	80002de <print_all_received_messages+0xe>
  }

  message_index = 0;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <print_all_received_messages+0xf8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	3738      	adds	r7, #56	@ 0x38
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200006b0 	.word	0x200006b0
 80003b8:	080085d0 	.word	0x080085d0
 80003bc:	20000108 	.word	0x20000108
 80003c0:	080085dc 	.word	0x080085dc
 80003c4:	080085e8 	.word	0x080085e8
 80003c8:	200018b0 	.word	0x200018b0

080003cc <handle_receive>:


void handle_receive(uint8_t buffer_byte, uint8_t buffer_id)
{
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	460a      	mov	r2, r1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	71bb      	strb	r3, [r7, #6]
  static uint8_t  temp_buffer[64];
  static uint16_t temp_index = 0;

  if (message_end_state >= MESSAGE_END_TOTAL)
 80003dc:	4b56      	ldr	r3, [pc, #344]	@ (8000538 <handle_receive+0x16c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f200 80a5 	bhi.w	8000530 <handle_receive+0x164>
    return;

  temp_buffer[temp_index++] = buffer_byte;
 80003e6:	4b55      	ldr	r3, [pc, #340]	@ (800053c <handle_receive+0x170>)
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	b291      	uxth	r1, r2
 80003ee:	4a53      	ldr	r2, [pc, #332]	@ (800053c <handle_receive+0x170>)
 80003f0:	8011      	strh	r1, [r2, #0]
 80003f2:	4619      	mov	r1, r3
 80003f4:	4a52      	ldr	r2, [pc, #328]	@ (8000540 <handle_receive+0x174>)
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	5453      	strb	r3, [r2, r1]

  if (temp_index >= 64) {
 80003fa:	4b50      	ldr	r3, [pc, #320]	@ (800053c <handle_receive+0x170>)
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000400:	d903      	bls.n	800040a <handle_receive+0x3e>
    temp_index = 0;
 8000402:	4b4e      	ldr	r3, [pc, #312]	@ (800053c <handle_receive+0x170>)
 8000404:	2200      	movs	r2, #0
 8000406:	801a      	strh	r2, [r3, #0]
    return;
 8000408:	e093      	b.n	8000532 <handle_receive+0x166>
  }

  uint8_t is_end = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	73fb      	strb	r3, [r7, #15]
  switch (message_end_state)
 800040e:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <handle_receive+0x16c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b03      	cmp	r3, #3
 8000414:	d82a      	bhi.n	800046c <handle_receive+0xa0>
 8000416:	a201      	add	r2, pc, #4	@ (adr r2, 800041c <handle_receive+0x50>)
 8000418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041c:	0800042d 	.word	0x0800042d
 8000420:	08000433 	.word	0x08000433
 8000424:	0800043f 	.word	0x0800043f
 8000428:	0800044b 	.word	0x0800044b
  {
    case MESSAGE_END_BYTE:
      is_end = 1;
 800042c:	2301      	movs	r3, #1
 800042e:	73fb      	strb	r3, [r7, #15]
      break;
 8000430:	e023      	b.n	800047a <handle_receive+0xae>
    case MESSAGE_END_NEWLINE:
      if (buffer_byte == '\n')
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b0a      	cmp	r3, #10
 8000436:	d11b      	bne.n	8000470 <handle_receive+0xa4>
        is_end = 1;
 8000438:	2301      	movs	r3, #1
 800043a:	73fb      	strb	r3, [r7, #15]
      break;
 800043c:	e018      	b.n	8000470 <handle_receive+0xa4>
    case MESSAGE_END_CURSOR:
      if (buffer_byte == '\r')
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b0d      	cmp	r3, #13
 8000442:	d117      	bne.n	8000474 <handle_receive+0xa8>
        is_end = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	73fb      	strb	r3, [r7, #15]
      break;
 8000448:	e014      	b.n	8000474 <handle_receive+0xa8>
    case MESSAGE_END_NEWLINE_CURSOR:
      if (buffer_byte == '\r' && temp_index > 1 && temp_buffer[temp_index - 2] == '\n')
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2b0d      	cmp	r3, #13
 800044e:	d113      	bne.n	8000478 <handle_receive+0xac>
 8000450:	4b3a      	ldr	r3, [pc, #232]	@ (800053c <handle_receive+0x170>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d90f      	bls.n	8000478 <handle_receive+0xac>
 8000458:	4b38      	ldr	r3, [pc, #224]	@ (800053c <handle_receive+0x170>)
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	3b02      	subs	r3, #2
 800045e:	4a38      	ldr	r2, [pc, #224]	@ (8000540 <handle_receive+0x174>)
 8000460:	5cd3      	ldrb	r3, [r2, r3]
 8000462:	2b0a      	cmp	r3, #10
 8000464:	d108      	bne.n	8000478 <handle_receive+0xac>
        is_end = 1;
 8000466:	2301      	movs	r3, #1
 8000468:	73fb      	strb	r3, [r7, #15]
      break;
 800046a:	e005      	b.n	8000478 <handle_receive+0xac>
    default:
      break;
 800046c:	bf00      	nop
 800046e:	e004      	b.n	800047a <handle_receive+0xae>
      break;
 8000470:	bf00      	nop
 8000472:	e002      	b.n	800047a <handle_receive+0xae>
      break;
 8000474:	bf00      	nop
 8000476:	e000      	b.n	800047a <handle_receive+0xae>
      break;
 8000478:	bf00      	nop
  }

  if (is_end) {
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d058      	beq.n	8000532 <handle_receive+0x166>
    memcpy(received_data[message_index].message, temp_buffer, temp_index);
 8000480:	4b30      	ldr	r3, [pc, #192]	@ (8000544 <handle_receive+0x178>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	4613      	mov	r3, r2
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	4413      	add	r3, r2
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	4a2e      	ldr	r2, [pc, #184]	@ (8000548 <handle_receive+0x17c>)
 8000490:	4413      	add	r3, r2
 8000492:	4a2a      	ldr	r2, [pc, #168]	@ (800053c <handle_receive+0x170>)
 8000494:	8812      	ldrh	r2, [r2, #0]
 8000496:	492a      	ldr	r1, [pc, #168]	@ (8000540 <handle_receive+0x174>)
 8000498:	4618      	mov	r0, r3
 800049a:	f007 fc3b 	bl	8007d14 <memcpy>
    received_data[message_index].length    = temp_index;
 800049e:	4b27      	ldr	r3, [pc, #156]	@ (800053c <handle_receive+0x170>)
 80004a0:	881a      	ldrh	r2, [r3, #0]
 80004a2:	4b28      	ldr	r3, [pc, #160]	@ (8000544 <handle_receive+0x178>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	b2d0      	uxtb	r0, r2
 80004aa:	4a27      	ldr	r2, [pc, #156]	@ (8000548 <handle_receive+0x17c>)
 80004ac:	460b      	mov	r3, r1
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	440b      	add	r3, r1
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	4413      	add	r3, r2
 80004b6:	3340      	adds	r3, #64	@ 0x40
 80004b8:	4602      	mov	r2, r0
 80004ba:	701a      	strb	r2, [r3, #0]
    received_data[message_index].line      = buffer_id;
 80004bc:	4b21      	ldr	r3, [pc, #132]	@ (8000544 <handle_receive+0x178>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4619      	mov	r1, r3
 80004c2:	4a21      	ldr	r2, [pc, #132]	@ (8000548 <handle_receive+0x17c>)
 80004c4:	460b      	mov	r3, r1
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	440b      	add	r3, r1
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	4413      	add	r3, r2
 80004ce:	3341      	adds	r3, #65	@ 0x41
 80004d0:	79ba      	ldrb	r2, [r7, #6]
 80004d2:	701a      	strb	r2, [r3, #0]
    received_data[message_index].timestamp = HAL_GetTick();
 80004d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000544 <handle_receive+0x178>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461c      	mov	r4, r3
 80004da:	f000 fdcb 	bl	8001074 <HAL_GetTick>
 80004de:	4602      	mov	r2, r0
 80004e0:	4919      	ldr	r1, [pc, #100]	@ (8000548 <handle_receive+0x17c>)
 80004e2:	4623      	mov	r3, r4
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	4423      	add	r3, r4
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	440b      	add	r3, r1
 80004ec:	3344      	adds	r3, #68	@ 0x44
 80004ee:	601a      	str	r2, [r3, #0]
    if (++message_index >= MAX_MESSAGES)
 80004f0:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <handle_receive+0x178>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <handle_receive+0x178>)
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <handle_receive+0x178>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b3f      	cmp	r3, #63	@ 0x3f
 8000502:	d90c      	bls.n	800051e <handle_receive+0x152>
    {
      keep_receiving = 0;
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <handle_receive+0x180>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
      receive        = 0;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <handle_receive+0x184>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Sniffing OFF\r\n", 14);
 8000510:	220e      	movs	r2, #14
 8000512:	4910      	ldr	r1, [pc, #64]	@ (8000554 <handle_receive+0x188>)
 8000514:	4810      	ldr	r0, [pc, #64]	@ (8000558 <handle_receive+0x18c>)
 8000516:	f003 fab1 	bl	8003a7c <HAL_UART_Transmit_IT>
      print_all_received_messages();
 800051a:	f7ff fed9 	bl	80002d0 <print_all_received_messages>
    }

    temp_index = 0;
 800051e:	4b07      	ldr	r3, [pc, #28]	@ (800053c <handle_receive+0x170>)
 8000520:	2200      	movs	r2, #0
 8000522:	801a      	strh	r2, [r3, #0]
    memset(temp_buffer, 0, sizeof(temp_buffer));
 8000524:	2240      	movs	r2, #64	@ 0x40
 8000526:	2100      	movs	r1, #0
 8000528:	4805      	ldr	r0, [pc, #20]	@ (8000540 <handle_receive+0x174>)
 800052a:	f007 fb61 	bl	8007bf0 <memset>
 800052e:	e000      	b.n	8000532 <handle_receive+0x166>
    return;
 8000530:	bf00      	nop
  }
}
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bd90      	pop	{r4, r7, pc}
 8000538:	20000001 	.word	0x20000001
 800053c:	200018b4 	.word	0x200018b4
 8000540:	200018b8 	.word	0x200018b8
 8000544:	200018b0 	.word	0x200018b0
 8000548:	200006b0 	.word	0x200006b0
 800054c:	200018b1 	.word	0x200018b1
 8000550:	200006af 	.word	0x200006af
 8000554:	080085ec 	.word	0x080085ec
 8000558:	20000108 	.word	0x20000108

0800055c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  if (!receive)
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <HAL_UART_RxCpltCallback+0xa8>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d105      	bne.n	8000578 <HAL_UART_RxCpltCallback+0x1c>
  {
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Sniffing stopped\r\n", 18);
 800056c:	2212      	movs	r2, #18
 800056e:	4926      	ldr	r1, [pc, #152]	@ (8000608 <HAL_UART_RxCpltCallback+0xac>)
 8000570:	4826      	ldr	r0, [pc, #152]	@ (800060c <HAL_UART_RxCpltCallback+0xb0>)
 8000572:	f003 fa83 	bl	8003a7c <HAL_UART_Transmit_IT>
    return;
 8000576:	e041      	b.n	80005fc <HAL_UART_RxCpltCallback+0xa0>
  }

  if (huart == &huart1)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a25      	ldr	r2, [pc, #148]	@ (8000610 <HAL_UART_RxCpltCallback+0xb4>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d11c      	bne.n	80005ba <HAL_UART_RxCpltCallback+0x5e>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2120      	movs	r1, #32
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f001 fa40 	bl	8001a0c <HAL_GPIO_WritePin>
    handle_receive(uart1_rx_byte, uart1_rx_id);
 800058c:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <HAL_UART_RxCpltCallback+0xb8>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	@ (8000618 <HAL_UART_RxCpltCallback+0xbc>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff18 	bl	80003cc <handle_receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2120      	movs	r1, #32
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a4:	f001 fa32 	bl	8001a0c <HAL_GPIO_WritePin>
    if (keep_receiving)
 80005a8:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_UART_RxCpltCallback+0xc0>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d004      	beq.n	80005ba <HAL_UART_RxCpltCallback+0x5e>
    {
      HAL_UART_Receive_DMA(&huart1, &uart1_rx_byte, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	4918      	ldr	r1, [pc, #96]	@ (8000614 <HAL_UART_RxCpltCallback+0xb8>)
 80005b4:	4816      	ldr	r0, [pc, #88]	@ (8000610 <HAL_UART_RxCpltCallback+0xb4>)
 80005b6:	f003 fabf 	bl	8003b38 <HAL_UART_Receive_DMA>
    }
  }
  if (huart == &huart3)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a18      	ldr	r2, [pc, #96]	@ (8000620 <HAL_UART_RxCpltCallback+0xc4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d11c      	bne.n	80005fc <HAL_UART_RxCpltCallback+0xa0>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2120      	movs	r1, #32
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ca:	f001 fa1f 	bl	8001a0c <HAL_GPIO_WritePin>
    handle_receive(uart3_rx_byte, uart3_rx_id);\
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <HAL_UART_RxCpltCallback+0xc8>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <HAL_UART_RxCpltCallback+0xcc>)
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fef7 	bl	80003cc <handle_receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f001 fa11 	bl	8001a0c <HAL_GPIO_WritePin>
    if (keep_receiving)
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <HAL_UART_RxCpltCallback+0xc0>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d004      	beq.n	80005fc <HAL_UART_RxCpltCallback+0xa0>
    {
      HAL_UART_Receive_DMA(&huart3, &uart3_rx_byte, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	490b      	ldr	r1, [pc, #44]	@ (8000624 <HAL_UART_RxCpltCallback+0xc8>)
 80005f6:	480a      	ldr	r0, [pc, #40]	@ (8000620 <HAL_UART_RxCpltCallback+0xc4>)
 80005f8:	f003 fa9e 	bl	8003b38 <HAL_UART_Receive_DMA>
    }
  }
}
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200006af 	.word	0x200006af
 8000608:	080085fc 	.word	0x080085fc
 800060c:	20000108 	.word	0x20000108
 8000610:	20000080 	.word	0x20000080
 8000614:	200004a8 	.word	0x200004a8
 8000618:	200018b2 	.word	0x200018b2
 800061c:	200018b1 	.word	0x200018b1
 8000620:	20000190 	.word	0x20000190
 8000624:	200006ac 	.word	0x200006ac
 8000628:	20000000 	.word	0x20000000

0800062c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
  }
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fcec 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f82c 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f942 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 f91a 	bl	8000888 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f8b8 	bl	80007c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000658:	f000 f8e6 	bl	8000828 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800065c:	f000 f884 	bl	8000768 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000660:	f004 fcf2 	bl	8005048 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_App, NULL, &Task1_attributes);
 8000664:	4a09      	ldr	r2, [pc, #36]	@ (800068c <main+0x4c>)
 8000666:	2100      	movs	r1, #0
 8000668:	4809      	ldr	r0, [pc, #36]	@ (8000690 <main+0x50>)
 800066a:	f004 fd55 	bl	8005118 <osThreadNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <main+0x54>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_App, NULL, &Task2_attributes);
 8000674:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <main+0x58>)
 8000676:	2100      	movs	r1, #0
 8000678:	4808      	ldr	r0, [pc, #32]	@ (800069c <main+0x5c>)
 800067a:	f004 fd4d 	bl	8005118 <osThreadNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <main+0x60>)
 8000682:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000684:	f004 fd14 	bl	80050b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <main+0x48>
 800068c:	08008638 	.word	0x08008638
 8000690:	080009a1 	.word	0x080009a1
 8000694:	200002a0 	.word	0x200002a0
 8000698:	0800865c 	.word	0x0800865c
 800069c:	08000aa1 	.word	0x08000aa1
 80006a0:	200002a4 	.word	0x200002a4

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0a6      	sub	sp, #152	@ 0x98
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006ae:	2228      	movs	r2, #40	@ 0x28
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 fa9c 	bl	8007bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2258      	movs	r2, #88	@ 0x58
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f007 fa8e 	bl	8007bf0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006dc:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f99a 	bl	8001a3c <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800070e:	f000 f9e3 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000722:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000728:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f002 f9a8 	bl	8002a84 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073a:	f000 f9cd 	bl	8000ad8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800073e:	2307      	movs	r3, #7
 8000740:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fbdb 	bl	8002f0c <HAL_RCCEx_PeriphCLKConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800075c:	f000 f9bc 	bl	8000ad8 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3798      	adds	r7, #152	@ 0x98
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <MX_USART1_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 800078e:	2204      	movs	r2, #4
 8000790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_USART1_UART_Init+0x58>)
 80007ac:	f003 f88e 	bl	80038cc <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f98f 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000080 	.word	0x20000080
 80007c4:	40013800 	.word	0x40013800

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	@ (8000824 <MX_USART2_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 800080c:	f003 f85e 	bl	80038cc <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f95f 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000108 	.word	0x20000108
 8000824:	40004400 	.word	0x40004400

08000828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	@ (8000884 <MX_USART3_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800084e:	2204      	movs	r2, #4
 8000850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_USART3_UART_Init+0x58>)
 800086c:	f003 f82e 	bl	80038cc <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f92f 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000190 	.word	0x20000190
 8000884:	40004800 	.word	0x40004800

08000888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_DMA_Init+0x48>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <MX_DMA_Init+0x48>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <MX_DMA_Init+0x48>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2105      	movs	r1, #5
 80008aa:	200d      	movs	r0, #13
 80008ac:	f000 fca6 	bl	80011fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008b0:	200d      	movs	r0, #13
 80008b2:	f000 fcbf 	bl	8001234 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2105      	movs	r1, #5
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 fc9e 	bl	80011fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008c0:	200f      	movs	r0, #15
 80008c2:	f000 fcb7 	bl	8001234 <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000998 <MX_GPIO_Init+0xc4>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000998 <MX_GPIO_Init+0xc4>)
 80008f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <MX_GPIO_Init+0xc4>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	4b25      	ldr	r3, [pc, #148]	@ (8000998 <MX_GPIO_Init+0xc4>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a24      	ldr	r2, [pc, #144]	@ (8000998 <MX_GPIO_Init+0xc4>)
 8000908:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <MX_GPIO_Init+0xc4>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_GPIO_Init+0xc4>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a1e      	ldr	r2, [pc, #120]	@ (8000998 <MX_GPIO_Init+0xc4>)
 8000920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_GPIO_Init+0xc4>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_GPIO_Init+0xc4>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a18      	ldr	r2, [pc, #96]	@ (8000998 <MX_GPIO_Init+0xc4>)
 8000938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_GPIO_Init+0xc4>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000952:	f001 f85b 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_GPIO_Init+0xc8>)
 800096e:	f000 feab 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000972:	2320      	movs	r3, #32
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098c:	f000 fe9c 	bl	80016c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	48000800 	.word	0x48000800

080009a0 <Task1_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_App */
void Task1_App(void *argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  btn_state = 1;
 80009a8:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <Task1_App+0xd0>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
  prev_btn_state = 1;
 80009ae:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <Task1_App+0xd4>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
  receive = 0;
 80009b4:	4b30      	ldr	r3, [pc, #192]	@ (8000a78 <Task1_App+0xd8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    btn_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80009ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009be:	482f      	ldr	r0, [pc, #188]	@ (8000a7c <Task1_App+0xdc>)
 80009c0:	f001 f80c 	bl	80019dc <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <Task1_App+0xd0>)
 80009ca:	701a      	strb	r2, [r3, #0]
    if (!btn_state)
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <Task1_App+0xd0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d104      	bne.n	80009de <Task1_App+0x3e>
    {
      prev_btn_state = btn_state;
 80009d4:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <Task1_App+0xd0>)
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <Task1_App+0xd4>)
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	e043      	b.n	8000a66 <Task1_App+0xc6>
    }
    else if (btn_state && !prev_btn_state)
 80009de:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <Task1_App+0xd0>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d03f      	beq.n	8000a66 <Task1_App+0xc6>
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <Task1_App+0xd4>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d13b      	bne.n	8000a66 <Task1_App+0xc6>
    {
      receive        ^= 1;
 80009ee:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <Task1_App+0xd8>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	f083 0301 	eor.w	r3, r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <Task1_App+0xd8>)
 80009fa:	701a      	strb	r2, [r3, #0]
      keep_receiving ^= 1;
 80009fc:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <Task1_App+0xe0>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	f083 0301 	eor.w	r3, r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <Task1_App+0xe0>)
 8000a08:	701a      	strb	r2, [r3, #0]
      if (receive)
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <Task1_App+0xd8>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d018      	beq.n	8000a44 <Task1_App+0xa4>
      {
        clear_buffer(SNIFFER_BUFFER_1);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fc3c 	bl	8000290 <clear_buffer>
        clear_buffer(SNIFFER_BUFFER_2);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff fc39 	bl	8000290 <clear_buffer>
        osDelay(1);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f004 fc24 	bl	800526c <osDelay>
        HAL_UART_Receive_DMA(&huart1, &uart1_rx_byte, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	4917      	ldr	r1, [pc, #92]	@ (8000a84 <Task1_App+0xe4>)
 8000a28:	4817      	ldr	r0, [pc, #92]	@ (8000a88 <Task1_App+0xe8>)
 8000a2a:	f003 f885 	bl	8003b38 <HAL_UART_Receive_DMA>
        HAL_UART_Receive_DMA(&huart3, &uart3_rx_byte, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4916      	ldr	r1, [pc, #88]	@ (8000a8c <Task1_App+0xec>)
 8000a32:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <Task1_App+0xf0>)
 8000a34:	f003 f880 	bl	8003b38 <HAL_UART_Receive_DMA>
        HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Sniffing ON\r\n", 13);
 8000a38:	220d      	movs	r2, #13
 8000a3a:	4916      	ldr	r1, [pc, #88]	@ (8000a94 <Task1_App+0xf4>)
 8000a3c:	4816      	ldr	r0, [pc, #88]	@ (8000a98 <Task1_App+0xf8>)
 8000a3e:	f003 f81d 	bl	8003a7c <HAL_UART_Transmit_IT>
 8000a42:	e00c      	b.n	8000a5e <Task1_App+0xbe>
      }
      else
      {
        HAL_UART_DMAStop(&huart1);
 8000a44:	4810      	ldr	r0, [pc, #64]	@ (8000a88 <Task1_App+0xe8>)
 8000a46:	f003 f8bb 	bl	8003bc0 <HAL_UART_DMAStop>
        HAL_UART_DMAStop(&huart3);
 8000a4a:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <Task1_App+0xf0>)
 8000a4c:	f003 f8b8 	bl	8003bc0 <HAL_UART_DMAStop>
        HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Sniffing OFF\r\n", 14);
 8000a50:	220e      	movs	r2, #14
 8000a52:	4912      	ldr	r1, [pc, #72]	@ (8000a9c <Task1_App+0xfc>)
 8000a54:	4810      	ldr	r0, [pc, #64]	@ (8000a98 <Task1_App+0xf8>)
 8000a56:	f003 f811 	bl	8003a7c <HAL_UART_Transmit_IT>
        print_all_received_messages();
 8000a5a:	f7ff fc39 	bl	80002d0 <print_all_received_messages>
      }

      prev_btn_state = btn_state;
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <Task1_App+0xd0>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <Task1_App+0xd4>)
 8000a64:	701a      	strb	r2, [r3, #0]
    }
    osDelay(100);
 8000a66:	2064      	movs	r0, #100	@ 0x64
 8000a68:	f004 fc00 	bl	800526c <osDelay>
    btn_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a6c:	e7a5      	b.n	80009ba <Task1_App+0x1a>
 8000a6e:	bf00      	nop
 8000a70:	200006ad 	.word	0x200006ad
 8000a74:	200006ae 	.word	0x200006ae
 8000a78:	200006af 	.word	0x200006af
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	200018b1 	.word	0x200018b1
 8000a84:	200004a8 	.word	0x200004a8
 8000a88:	20000080 	.word	0x20000080
 8000a8c:	200006ac 	.word	0x200006ac
 8000a90:	20000190 	.word	0x20000190
 8000a94:	08008610 	.word	0x08008610
 8000a98:	20000108 	.word	0x20000108
 8000a9c:	080085ec 	.word	0x080085ec

08000aa0 <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void *argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000aa8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aac:	f004 fbde 	bl	800526c <osDelay>
 8000ab0:	e7fa      	b.n	8000aa8 <Task2_App+0x8>
	...

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ac6:	f000 fac1 	bl	800104c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40001000 	.word	0x40001000

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <Error_Handler+0x8>

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4a10      	ldr	r2, [pc, #64]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6193      	str	r3, [r2, #24]
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0c:	61d3      	str	r3, [r2, #28]
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	f06f 0001 	mvn.w	r0, #1
 8000b22:	f000 fb6b 	bl	80011fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	@ 0x38
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a87      	ldr	r2, [pc, #540]	@ (8000d70 <HAL_UART_MspInit+0x23c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d157      	bne.n	8000c06 <HAL_UART_MspInit+0xd2>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b56:	4b87      	ldr	r3, [pc, #540]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a86      	ldr	r2, [pc, #536]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b84      	ldr	r3, [pc, #528]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b81      	ldr	r3, [pc, #516]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a80      	ldr	r2, [pc, #512]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000b74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b7e      	ldr	r3, [pc, #504]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b86:	2330      	movs	r3, #48	@ 0x30
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b96:	2307      	movs	r3, #7
 8000b98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4875      	ldr	r0, [pc, #468]	@ (8000d78 <HAL_UART_MspInit+0x244>)
 8000ba2:	f000 fd91 	bl	80016c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000ba6:	4b75      	ldr	r3, [pc, #468]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000ba8:	4a75      	ldr	r2, [pc, #468]	@ (8000d80 <HAL_UART_MspInit+0x24c>)
 8000baa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bac:	4b73      	ldr	r3, [pc, #460]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb2:	4b72      	ldr	r3, [pc, #456]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb8:	4b70      	ldr	r3, [pc, #448]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc4:	4b6d      	ldr	r3, [pc, #436]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000bca:	4b6c      	ldr	r3, [pc, #432]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bd8:	4868      	ldr	r0, [pc, #416]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bda:	f000 fb39 	bl	8001250 <HAL_DMA_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000be4:	f7ff ff78 	bl	8000ad8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a64      	ldr	r2, [pc, #400]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bec:	675a      	str	r2, [r3, #116]	@ 0x74
 8000bee:	4a63      	ldr	r2, [pc, #396]	@ (8000d7c <HAL_UART_MspInit+0x248>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2105      	movs	r1, #5
 8000bf8:	2025      	movs	r0, #37	@ 0x25
 8000bfa:	f000 faff 	bl	80011fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bfe:	2025      	movs	r0, #37	@ 0x25
 8000c00:	f000 fb18 	bl	8001234 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c04:	e0b0      	b.n	8000d68 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART2)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8000d84 <HAL_UART_MspInit+0x250>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d131      	bne.n	8000c74 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c10:	4b58      	ldr	r3, [pc, #352]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	4a57      	ldr	r2, [pc, #348]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1a:	61d3      	str	r3, [r2, #28]
 8000c1c:	4b55      	ldr	r3, [pc, #340]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b52      	ldr	r3, [pc, #328]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	4a51      	ldr	r2, [pc, #324]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c32:	6153      	str	r3, [r2, #20]
 8000c34:	4b4f      	ldr	r3, [pc, #316]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c40:	230c      	movs	r3, #12
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c50:	2307      	movs	r3, #7
 8000c52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5e:	f000 fd33 	bl	80016c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2105      	movs	r1, #5
 8000c66:	2026      	movs	r0, #38	@ 0x26
 8000c68:	f000 fac8 	bl	80011fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c6c:	2026      	movs	r0, #38	@ 0x26
 8000c6e:	f000 fae1 	bl	8001234 <HAL_NVIC_EnableIRQ>
}
 8000c72:	e079      	b.n	8000d68 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a43      	ldr	r2, [pc, #268]	@ (8000d88 <HAL_UART_MspInit+0x254>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d174      	bne.n	8000d68 <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a3c      	ldr	r2, [pc, #240]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b37      	ldr	r3, [pc, #220]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a36      	ldr	r2, [pc, #216]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b34      	ldr	r3, [pc, #208]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b31      	ldr	r3, [pc, #196]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a30      	ldr	r2, [pc, #192]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000cb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b2e      	ldr	r3, [pc, #184]	@ (8000d74 <HAL_UART_MspInit+0x240>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	482a      	ldr	r0, [pc, #168]	@ (8000d8c <HAL_UART_MspInit+0x258>)
 8000ce4:	f000 fcf0 	bl	80016c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	481c      	ldr	r0, [pc, #112]	@ (8000d78 <HAL_UART_MspInit+0x244>)
 8000d06:	f000 fcdf 	bl	80016c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d0c:	4a21      	ldr	r2, [pc, #132]	@ (8000d94 <HAL_UART_MspInit+0x260>)
 8000d0e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d1e:	2280      	movs	r2, #128	@ 0x80
 8000d20:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d28:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d3c:	4814      	ldr	r0, [pc, #80]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d3e:	f000 fa87 	bl	8001250 <HAL_DMA_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8000d48:	f7ff fec6 	bl	8000ad8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d50:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d52:	4a0f      	ldr	r2, [pc, #60]	@ (8000d90 <HAL_UART_MspInit+0x25c>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2105      	movs	r1, #5
 8000d5c:	2027      	movs	r0, #39	@ 0x27
 8000d5e:	f000 fa4d 	bl	80011fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d62:	2027      	movs	r0, #39	@ 0x27
 8000d64:	f000 fa66 	bl	8001234 <HAL_NVIC_EnableIRQ>
}
 8000d68:	bf00      	nop
 8000d6a:	3738      	adds	r7, #56	@ 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40013800 	.word	0x40013800
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	20000218 	.word	0x20000218
 8000d80:	40020058 	.word	0x40020058
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40004800 	.word	0x40004800
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	2000025c 	.word	0x2000025c
 8000d94:	40020030 	.word	0x40020030

08000d98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	@ 0x38
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000da8:	4b33      	ldr	r3, [pc, #204]	@ (8000e78 <HAL_InitTick+0xe0>)
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	4a32      	ldr	r2, [pc, #200]	@ (8000e78 <HAL_InitTick+0xe0>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	61d3      	str	r3, [r2, #28]
 8000db4:	4b30      	ldr	r3, [pc, #192]	@ (8000e78 <HAL_InitTick+0xe0>)
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc0:	f107 0210 	add.w	r2, r7, #16
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 f86c 	bl	8002ea8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d103      	bne.n	8000de2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dda:	f002 f821 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8000dde:	6378      	str	r0, [r7, #52]	@ 0x34
 8000de0:	e004      	b.n	8000dec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000de2:	f002 f81d 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8000de6:	4603      	mov	r3, r0
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dee:	4a23      	ldr	r2, [pc, #140]	@ (8000e7c <HAL_InitTick+0xe4>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	0c9b      	lsrs	r3, r3, #18
 8000df6:	3b01      	subs	r3, #1
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <HAL_InitTick+0xe8>)
 8000dfc:	4a21      	ldr	r2, [pc, #132]	@ (8000e84 <HAL_InitTick+0xec>)
 8000dfe:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <HAL_InitTick+0xe8>)
 8000e02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e08:	4a1d      	ldr	r2, [pc, #116]	@ (8000e80 <HAL_InitTick+0xe8>)
 8000e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <HAL_InitTick+0xe8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <HAL_InitTick+0xe8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_InitTick+0xe8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e20:	4817      	ldr	r0, [pc, #92]	@ (8000e80 <HAL_InitTick+0xe8>)
 8000e22:	f002 fa8f 	bl	8003344 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d11b      	bne.n	8000e6c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e34:	4812      	ldr	r0, [pc, #72]	@ (8000e80 <HAL_InitTick+0xe8>)
 8000e36:	f002 fae7 	bl	8003408 <HAL_TIM_Base_Start_IT>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d111      	bne.n	8000e6c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e48:	2036      	movs	r0, #54	@ 0x36
 8000e4a:	f000 f9f3 	bl	8001234 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d808      	bhi.n	8000e66 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	2036      	movs	r0, #54	@ 0x36
 8000e5a:	f000 f9cf 	bl	80011fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <HAL_InitTick+0xf0>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e002      	b.n	8000e6c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3738      	adds	r7, #56	@ 0x38
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	200018f8 	.word	0x200018f8
 8000e84:	40001000 	.word	0x40001000
 8000e88:	20000008 	.word	0x20000008

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <NMI_Handler+0x4>

08000e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <DMA1_Channel3_IRQHandler+0x10>)
 8000eca:	f000 fae3 	bl	8001494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000025c 	.word	0x2000025c

08000ed8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <DMA1_Channel5_IRQHandler+0x10>)
 8000ede:	f000 fad9 	bl	8001494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000218 	.word	0x20000218

08000eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <USART1_IRQHandler+0x10>)
 8000ef2:	f002 fef7 	bl	8003ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000080 	.word	0x20000080

08000f00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <USART2_IRQHandler+0x10>)
 8000f06:	f002 feed 	bl	8003ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000108 	.word	0x20000108

08000f14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <USART3_IRQHandler+0x10>)
 8000f1a:	f002 fee3 	bl	8003ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000190 	.word	0x20000190

08000f28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <TIM6_DAC_IRQHandler+0x10>)
 8000f2e:	f002 fadb 	bl	80034e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200018f8 	.word	0x200018f8

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	@ (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f006 fea6 	bl	8007cbc <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20010000 	.word	0x20010000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	20001944 	.word	0x20001944
 8000fa4:	20003478 	.word	0x20003478

08000fa8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001004 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	@ (800100c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <LoopForever+0xe>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	@ (8001018 <LoopForever+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f006 fe65 	bl	8007cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ffe:	f7ff fb1f 	bl	8000640 <main>

08001002 <LoopForever>:

LoopForever:
    b LoopForever
 8001002:	e7fe      	b.n	8001002 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001004:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001010:	080086fc 	.word	0x080086fc
  ldr r2, =_sbss
 8001014:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001018:	20003474 	.word	0x20003474

0800101c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_2_IRQHandler>
	...

08001020 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_Init+0x28>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_Init+0x28>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f8d8 	bl	80011e6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	200f      	movs	r0, #15
 8001038:	f7ff feae 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fd52 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000000c 	.word	0x2000000c
 8001070:	20001948 	.word	0x20001948

08001074 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;  
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20001948 	.word	0x20001948

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	@ (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	@ (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	@ (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	@ 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff4c 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120e:	f7ff ff61 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001212:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f7ff ffb1 	bl	8001180 <NVIC_EncodePriority>
 800121e:	4602      	mov	r2, r0
 8001220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff80 	bl	800112c <__NVIC_SetPriority>
}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff54 	bl	80010f0 <__NVIC_EnableIRQ>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e037      	b.n	80012d6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2202      	movs	r2, #2
 800126a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800127c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001280:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800128a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f9c9 	bl	8001650 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_DMA_Start_IT+0x20>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e04a      	b.n	8001394 <HAL_DMA_Start_IT+0xb6>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800130c:	2b01      	cmp	r3, #1
 800130e:	d13a      	bne.n	8001386 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 f95c 	bl	80015f2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 020e 	orr.w	r2, r2, #14
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e00f      	b.n	8001374 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 020a 	orr.w	r2, r2, #10
 8001362:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0204 	bic.w	r2, r2, #4
 8001372:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e005      	b.n	8001392 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800138e:	2302      	movs	r3, #2
 8001390:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001392:	7dfb      	ldrb	r3, [r7, #23]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e02e      	b.n	800140c <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d008      	beq.n	80013ca <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2204      	movs	r2, #4
 80013bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e020      	b.n	800140c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 020e 	bic.w	r2, r2, #14
 80013d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800142a:	2b02      	cmp	r3, #2
 800142c:	d005      	beq.n	800143a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2204      	movs	r2, #4
 8001432:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e027      	b.n	800148a <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 020e 	bic.w	r2, r2, #14
 8001448:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
    }
  }
  return status;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	2204      	movs	r2, #4
 80014b2:	409a      	lsls	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d024      	beq.n	8001506 <HAL_DMA_IRQHandler+0x72>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d01f      	beq.n	8001506 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d107      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0204 	bic.w	r2, r2, #4
 80014e2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ec:	2104      	movs	r1, #4
 80014ee:	fa01 f202 	lsl.w	r2, r1, r2
 80014f2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d06a      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001504:	e065      	b.n	80015d2 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	2202      	movs	r2, #2
 800150c:	409a      	lsls	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d02c      	beq.n	8001570 <HAL_DMA_IRQHandler+0xdc>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d027      	beq.n	8001570 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10b      	bne.n	8001546 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 020a 	bic.w	r2, r2, #10
 800153c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800154e:	2102      	movs	r1, #2
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	2b00      	cmp	r3, #0
 8001564:	d035      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800156e:	e030      	b.n	80015d2 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	2208      	movs	r2, #8
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d028      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x13e>
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d023      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 020e 	bic.w	r2, r2, #14
 8001598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a2:	2101      	movs	r1, #1
 80015a4:	fa01 f202 	lsl.w	r2, r1, r2
 80015a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
    }
  }
}
 80015d0:	e7ff      	b.n	80015d2 <HAL_DMA_IRQHandler+0x13e>
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001608:	2101      	movs	r1, #1
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b10      	cmp	r3, #16
 800161e:	d108      	bne.n	8001632 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001630:	e007      	b.n	8001642 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <DMA_CalcBaseAndBitshift+0x60>)
 8001660:	429a      	cmp	r2, r3
 8001662:	d80f      	bhi.n	8001684 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <DMA_CalcBaseAndBitshift+0x64>)
 800166c:	4413      	add	r3, r2
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <DMA_CalcBaseAndBitshift+0x68>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	009a      	lsls	r2, r3, #2
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a0f      	ldr	r2, [pc, #60]	@ (80016bc <DMA_CalcBaseAndBitshift+0x6c>)
 8001680:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001682:	e00e      	b.n	80016a2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <DMA_CalcBaseAndBitshift+0x70>)
 800168c:	4413      	add	r3, r2
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <DMA_CalcBaseAndBitshift+0x68>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	009a      	lsls	r2, r3, #2
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a09      	ldr	r2, [pc, #36]	@ (80016c4 <DMA_CalcBaseAndBitshift+0x74>)
 80016a0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40020407 	.word	0x40020407
 80016b4:	bffdfff8 	.word	0xbffdfff8
 80016b8:	cccccccd 	.word	0xcccccccd
 80016bc:	40020000 	.word	0x40020000
 80016c0:	bffdfbf8 	.word	0xbffdfbf8
 80016c4:	40020400 	.word	0x40020400

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e160      	b.n	800199a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8152 	beq.w	8001994 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d005      	beq.n	8001708 <HAL_GPIO_Init+0x40>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 0201 	and.w	r2, r3, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b03      	cmp	r3, #3
 8001774:	d017      	beq.n	80017a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d123      	bne.n	80017fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0203 	and.w	r2, r3, #3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80ac 	beq.w	8001994 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183c:	4b5e      	ldr	r3, [pc, #376]	@ (80019b8 <HAL_GPIO_Init+0x2f0>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a5d      	ldr	r2, [pc, #372]	@ (80019b8 <HAL_GPIO_Init+0x2f0>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b5b      	ldr	r3, [pc, #364]	@ (80019b8 <HAL_GPIO_Init+0x2f0>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001854:	4a59      	ldr	r2, [pc, #356]	@ (80019bc <HAL_GPIO_Init+0x2f4>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800187e:	d025      	beq.n	80018cc <HAL_GPIO_Init+0x204>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a4f      	ldr	r2, [pc, #316]	@ (80019c0 <HAL_GPIO_Init+0x2f8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d01f      	beq.n	80018c8 <HAL_GPIO_Init+0x200>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a4e      	ldr	r2, [pc, #312]	@ (80019c4 <HAL_GPIO_Init+0x2fc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d019      	beq.n	80018c4 <HAL_GPIO_Init+0x1fc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a4d      	ldr	r2, [pc, #308]	@ (80019c8 <HAL_GPIO_Init+0x300>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x1f8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4c      	ldr	r2, [pc, #304]	@ (80019cc <HAL_GPIO_Init+0x304>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1f4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a4b      	ldr	r2, [pc, #300]	@ (80019d0 <HAL_GPIO_Init+0x308>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1f0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a4a      	ldr	r2, [pc, #296]	@ (80019d4 <HAL_GPIO_Init+0x30c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1ec>
 80018b0:	2306      	movs	r3, #6
 80018b2:	e00c      	b.n	80018ce <HAL_GPIO_Init+0x206>
 80018b4:	2307      	movs	r3, #7
 80018b6:	e00a      	b.n	80018ce <HAL_GPIO_Init+0x206>
 80018b8:	2305      	movs	r3, #5
 80018ba:	e008      	b.n	80018ce <HAL_GPIO_Init+0x206>
 80018bc:	2304      	movs	r3, #4
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x206>
 80018c0:	2303      	movs	r3, #3
 80018c2:	e004      	b.n	80018ce <HAL_GPIO_Init+0x206>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x206>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_GPIO_Init+0x206>
 80018cc:	2300      	movs	r3, #0
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4093      	lsls	r3, r2
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018de:	4937      	ldr	r1, [pc, #220]	@ (80019bc <HAL_GPIO_Init+0x2f4>)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ec:	4b3a      	ldr	r3, [pc, #232]	@ (80019d8 <HAL_GPIO_Init+0x310>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001910:	4a31      	ldr	r2, [pc, #196]	@ (80019d8 <HAL_GPIO_Init+0x310>)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001916:	4b30      	ldr	r3, [pc, #192]	@ (80019d8 <HAL_GPIO_Init+0x310>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800193a:	4a27      	ldr	r2, [pc, #156]	@ (80019d8 <HAL_GPIO_Init+0x310>)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001940:	4b25      	ldr	r3, [pc, #148]	@ (80019d8 <HAL_GPIO_Init+0x310>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001964:	4a1c      	ldr	r2, [pc, #112]	@ (80019d8 <HAL_GPIO_Init+0x310>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196a:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_GPIO_Init+0x310>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <HAL_GPIO_Init+0x310>)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f47f ae97 	bne.w	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000
 80019c0:	48000400 	.word	0x48000400
 80019c4:	48000800 	.word	0x48000800
 80019c8:	48000c00 	.word	0x48000c00
 80019cc:	48001000 	.word	0x48001000
 80019d0:	48001400 	.word	0x48001400
 80019d4:	48001800 	.word	0x48001800
 80019d8:	40010400 	.word	0x40010400

080019dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e001      	b.n	80019fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f001 b80a 	b.w	8002a76 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8161 	beq.w	8001d3a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a78:	4bae      	ldr	r3, [pc, #696]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d00c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a84:	4bab      	ldr	r3, [pc, #684]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d157      	bne.n	8001b40 <HAL_RCC_OscConfig+0x104>
 8001a90:	4ba8      	ldr	r3, [pc, #672]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a9c:	d150      	bne.n	8001b40 <HAL_RCC_OscConfig+0x104>
 8001a9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ab2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001abe:	d802      	bhi.n	8001ac6 <HAL_RCC_OscConfig+0x8a>
 8001ac0:	4b9c      	ldr	r3, [pc, #624]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0xb6>
 8001ac6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aca:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001ada:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ade:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ae2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001aee:	4b91      	ldr	r3, [pc, #580]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001af6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001afa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001afe:	fa92 f2a2 	rbit	r2, r2
 8001b02:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001b06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b0a:	fab2 f282 	clz	r2, r2
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f042 0220 	orr.w	r2, r2, #32
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f002 021f 	and.w	r2, r2, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8108 	beq.w	8001d38 <HAL_RCC_OscConfig+0x2fc>
 8001b28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 80ff 	bne.w	8001d38 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f000 bf9b 	b.w	8002a76 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x124>
 8001b52:	4b78      	ldr	r3, [pc, #480]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a77      	ldr	r2, [pc, #476]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e036      	b.n	8001bce <HAL_RCC_OscConfig+0x192>
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x14e>
 8001b70:	4b70      	ldr	r3, [pc, #448]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6f      	ldr	r2, [pc, #444]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a6c      	ldr	r2, [pc, #432]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e021      	b.n	8001bce <HAL_RCC_OscConfig+0x192>
 8001b8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b9a:	d10c      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x17a>
 8001b9c:	4b65      	ldr	r3, [pc, #404]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a64      	ldr	r2, [pc, #400]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001ba2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b62      	ldr	r3, [pc, #392]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a61      	ldr	r2, [pc, #388]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x192>
 8001bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a5e      	ldr	r2, [pc, #376]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d054      	beq.n	8001c88 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fa49 	bl	8001074 <HAL_GetTick>
 8001be2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fa44 	bl	8001074 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	@ 0x64
 8001bf6:	d902      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	f000 bf3c 	b.w	8002a76 <HAL_RCC_OscConfig+0x103a>
 8001bfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c02:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001c12:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c1e:	d802      	bhi.n	8001c26 <HAL_RCC_OscConfig+0x1ea>
 8001c20:	4b44      	ldr	r3, [pc, #272]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x216>
 8001c26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c2a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001c3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c3e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c42:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c4e:	4b39      	ldr	r3, [pc, #228]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c56:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001c5a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001c5e:	fa92 f2a2 	rbit	r2, r2
 8001c62:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001c66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c6a:	fab2 f282 	clz	r2, r2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f042 0220 	orr.w	r2, r2, #32
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f002 021f 	and.w	r2, r2, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0b0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x1ac>
 8001c86:	e058      	b.n	8001d3a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff f9f4 	bl	8001074 <HAL_GetTick>
 8001c8c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c92:	f7ff f9ef 	bl	8001074 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ca0:	d902      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	f000 bee7 	b.w	8002a76 <HAL_RCC_OscConfig+0x103a>
 8001ca8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cac:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001cbc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cc8:	d802      	bhi.n	8001cd0 <HAL_RCC_OscConfig+0x294>
 8001cca:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	e015      	b.n	8001cfc <HAL_RCC_OscConfig+0x2c0>
 8001cd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001ce4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001cec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_RCC_OscConfig+0x2f8>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d00:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001d04:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001d08:	fa92 f2a2 	rbit	r2, r2
 8001d0c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001d10:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d14:	fab2 f282 	clz	r2, r2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f042 0220 	orr.w	r2, r2, #32
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f002 021f 	and.w	r2, r2, #31
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1b0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x256>
 8001d30:	e003      	b.n	8001d3a <HAL_RCC_OscConfig+0x2fe>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 816d 	beq.w	800202a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d50:	4bcd      	ldr	r3, [pc, #820]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d5c:	4bca      	ldr	r3, [pc, #808]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d16e      	bne.n	8001e46 <HAL_RCC_OscConfig+0x40a>
 8001d68:	4bc7      	ldr	r3, [pc, #796]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d74:	d167      	bne.n	8001e46 <HAL_RCC_OscConfig+0x40a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001d88:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d94:	d802      	bhi.n	8001d9c <HAL_RCC_OscConfig+0x360>
 8001d96:	4bbc      	ldr	r3, [pc, #752]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e013      	b.n	8001dc4 <HAL_RCC_OscConfig+0x388>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001db4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001dc0:	4bb1      	ldr	r3, [pc, #708]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001dca:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001dce:	fa92 f2a2 	rbit	r2, r2
 8001dd2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001dd6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001dda:	fab2 f282 	clz	r2, r2
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f042 0220 	orr.w	r2, r2, #32
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f002 021f 	and.w	r2, r2, #31
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_RCC_OscConfig+0x3d0>
 8001df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f000 be35 	b.w	8002a76 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b9e      	ldr	r3, [pc, #632]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	21f8      	movs	r1, #248	@ 0xf8
 8001e22:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001e2a:	fa91 f1a1 	rbit	r1, r1
 8001e2e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001e32:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e36:	fab1 f181 	clz	r1, r1
 8001e3a:	b2c9      	uxtb	r1, r1
 8001e3c:	408b      	lsls	r3, r1
 8001e3e:	4992      	ldr	r1, [pc, #584]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e44:	e0f1      	b.n	800202a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8083 	beq.w	8001f5e <HAL_RCC_OscConfig+0x522>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001e6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2301      	movs	r3, #1
 8001e82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff f8f6 	bl	8001074 <HAL_GetTick>
 8001e88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f8f1 	bl	8001074 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d902      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f000 bde9 	b.w	8002a76 <HAL_RCC_OscConfig+0x103a>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001eb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ec2:	d802      	bhi.n	8001eca <HAL_RCC_OscConfig+0x48e>
 8001ec4:	4b70      	ldr	r3, [pc, #448]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	e013      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4b6>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ee2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001eee:	4b66      	ldr	r3, [pc, #408]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001ef8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001efc:	fa92 f2a2 	rbit	r2, r2
 8001f00:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001f04:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f08:	fab2 f282 	clz	r2, r2
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f042 0220 	orr.w	r2, r2, #32
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f002 021f 	and.w	r2, r2, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0b4      	beq.n	8001e8e <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b58      	ldr	r3, [pc, #352]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	21f8      	movs	r1, #248	@ 0xf8
 8001f3a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001f42:	fa91 f1a1 	rbit	r1, r1
 8001f46:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001f4a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f4e:	fab1 f181 	clz	r1, r1
 8001f52:	b2c9      	uxtb	r1, r1
 8001f54:	408b      	lsls	r3, r1
 8001f56:	494c      	ldr	r1, [pc, #304]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e065      	b.n	800202a <HAL_RCC_OscConfig+0x5ee>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001f70:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f7e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	461a      	mov	r2, r3
 8001f86:	2300      	movs	r3, #0
 8001f88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7ff f873 	bl	8001074 <HAL_GetTick>
 8001f8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f94:	f7ff f86e 	bl	8001074 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d902      	bls.n	8001faa <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	f000 bd66 	b.w	8002a76 <HAL_RCC_OscConfig+0x103a>
 8001faa:	2302      	movs	r3, #2
 8001fac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_RCC_OscConfig+0x594>
 8001fca:	4b2f      	ldr	r3, [pc, #188]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e013      	b.n	8001ff8 <HAL_RCC_OscConfig+0x5bc>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001fe8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_RCC_OscConfig+0x64c>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001ffe:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800200a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1b4      	bne.n	8001f94 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8119 	beq.w	8002272 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002044:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8082 	beq.w	8002156 <HAL_RCC_OscConfig+0x71a>
 8002052:	2301      	movs	r3, #1
 8002054:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002064:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_OscConfig+0x650>)
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	461a      	mov	r2, r3
 8002078:	2301      	movs	r3, #1
 800207a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7fe fffa 	bl	8001074 <HAL_GetTick>
 8002080:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002084:	e00f      	b.n	80020a6 <HAL_RCC_OscConfig+0x66a>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002090:	f7fe fff0 	bl	8001074 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d902      	bls.n	80020a6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	f000 bce8 	b.w	8002a76 <HAL_RCC_OscConfig+0x103a>
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020b0:	fa93 f2a3 	rbit	r2, r3
 80020b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020c6:	2202      	movs	r2, #2
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020ea:	2202      	movs	r2, #2
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002100:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002104:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	4bb0      	ldr	r3, [pc, #704]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800210a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002112:	2102      	movs	r1, #2
 8002114:	6019      	str	r1, [r3, #0]
 8002116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	fa93 f1a3 	rbit	r1, r3
 8002124:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002128:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800212c:	6019      	str	r1, [r3, #0]
  return result;
 800212e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002132:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d09d      	beq.n	8002090 <HAL_RCC_OscConfig+0x654>
 8002154:	e08d      	b.n	8002272 <HAL_RCC_OscConfig+0x836>
 8002156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002166:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002174:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002178:	601a      	str	r2, [r3, #0]
  return result;
 800217a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800217e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002182:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	4b8f      	ldr	r3, [pc, #572]	@ (80023cc <HAL_RCC_OscConfig+0x990>)
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	461a      	mov	r2, r3
 8002194:	2300      	movs	r3, #0
 8002196:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7fe ff6c 	bl	8001074 <HAL_GetTick>
 800219c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a2:	f7fe ff67 	bl	8001074 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d902      	bls.n	80021b8 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	f000 bc5f 	b.w	8002a76 <HAL_RCC_OscConfig+0x103a>
 80021b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f2a3 	rbit	r2, r3
 80021d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002204:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002208:	2202      	movs	r2, #2
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002210:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002222:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002224:	4b68      	ldr	r3, [pc, #416]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002226:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002230:	2102      	movs	r1, #2
 8002232:	6019      	str	r1, [r3, #0]
 8002234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002238:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f1a3 	rbit	r1, r3
 8002242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002246:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800224a:	6019      	str	r1, [r3, #0]
  return result;
 800224c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002250:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d197      	bne.n	80021a2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002276:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 819c 	beq.w	80025c0 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b4e      	ldr	r3, [pc, #312]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b4b      	ldr	r3, [pc, #300]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a4a      	ldr	r2, [pc, #296]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	61d3      	str	r3, [r2, #28]
 80022a6:	4b48      	ldr	r3, [pc, #288]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80022ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b41      	ldr	r3, [pc, #260]	@ (80023d0 <HAL_RCC_OscConfig+0x994>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d11a      	bne.n	800230a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d4:	4b3e      	ldr	r3, [pc, #248]	@ (80023d0 <HAL_RCC_OscConfig+0x994>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3d      	ldr	r2, [pc, #244]	@ (80023d0 <HAL_RCC_OscConfig+0x994>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e0:	f7fe fec8 	bl	8001074 <HAL_GetTick>
 80022e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	e009      	b.n	80022fe <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ea:	f7fe fec3 	bl	8001074 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e3bb      	b.n	8002a76 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b34      	ldr	r3, [pc, #208]	@ (80023d0 <HAL_RCC_OscConfig+0x994>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0ef      	beq.n	80022ea <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d106      	bne.n	8002328 <HAL_RCC_OscConfig+0x8ec>
 800231a:	4b2b      	ldr	r3, [pc, #172]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a2a      	ldr	r2, [pc, #168]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	e035      	b.n	8002394 <HAL_RCC_OscConfig+0x958>
 8002328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10c      	bne.n	8002352 <HAL_RCC_OscConfig+0x916>
 8002338:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4a22      	ldr	r2, [pc, #136]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	6213      	str	r3, [r2, #32]
 8002344:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a1f      	ldr	r2, [pc, #124]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 800234a:	f023 0304 	bic.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	e020      	b.n	8002394 <HAL_RCC_OscConfig+0x958>
 8002352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002356:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b05      	cmp	r3, #5
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x940>
 8002362:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a18      	ldr	r2, [pc, #96]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a15      	ldr	r2, [pc, #84]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6213      	str	r3, [r2, #32]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0x958>
 800237c:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a11      	ldr	r2, [pc, #68]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6213      	str	r3, [r2, #32]
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a0e      	ldr	r2, [pc, #56]	@ (80023c8 <HAL_RCC_OscConfig+0x98c>)
 800238e:	f023 0304 	bic.w	r3, r3, #4
 8002392:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002398:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 8085 	beq.w	80024b0 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7fe fe65 	bl	8001074 <HAL_GetTick>
 80023aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ae:	e011      	b.n	80023d4 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7fe fe60 	bl	8001074 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d907      	bls.n	80023d4 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e356      	b.n	8002a76 <HAL_RCC_OscConfig+0x103a>
 80023c8:	40021000 	.word	0x40021000
 80023cc:	10908120 	.word	0x10908120
 80023d0:	40007000 	.word	0x40007000
 80023d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023dc:	2202      	movs	r2, #2
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002400:	2202      	movs	r2, #2
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002408:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002416:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800241a:	601a      	str	r2, [r3, #0]
  return result;
 800241c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002420:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002424:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <HAL_RCC_OscConfig+0xa00>
 8002436:	4b98      	ldr	r3, [pc, #608]	@ (8002698 <HAL_RCC_OscConfig+0xc5c>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0xa28>
 800243c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002440:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002444:	2202      	movs	r2, #2
 8002446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800245a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	4b8d      	ldr	r3, [pc, #564]	@ (8002698 <HAL_RCC_OscConfig+0xc5c>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002468:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800246c:	2102      	movs	r1, #2
 800246e:	6011      	str	r1, [r2, #0]
 8002470:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002474:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	fa92 f1a2 	rbit	r1, r2
 800247e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002482:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002486:	6011      	str	r1, [r2, #0]
  return result;
 8002488:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800248c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	fab2 f282 	clz	r2, r2
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f002 021f 	and.w	r2, r2, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f202 	lsl.w	r2, r1, r2
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d080      	beq.n	80023b0 <HAL_RCC_OscConfig+0x974>
 80024ae:	e07d      	b.n	80025ac <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b0:	f7fe fde0 	bl	8001074 <HAL_GetTick>
 80024b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe fddb 	bl	8001074 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e2d1      	b.n	8002a76 <HAL_RCC_OscConfig+0x103a>
 80024d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80024da:	2202      	movs	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f2a3 	rbit	r2, r3
 80024ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024fe:	2202      	movs	r2, #2
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002506:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002514:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002518:	601a      	str	r2, [r3, #0]
  return result;
 800251a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002522:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <HAL_RCC_OscConfig+0xafe>
 8002534:	4b58      	ldr	r3, [pc, #352]	@ (8002698 <HAL_RCC_OscConfig+0xc5c>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	e013      	b.n	8002562 <HAL_RCC_OscConfig+0xb26>
 800253a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002542:	2202      	movs	r2, #2
 8002544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002558:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	4b4e      	ldr	r3, [pc, #312]	@ (8002698 <HAL_RCC_OscConfig+0xc5c>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002566:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800256a:	2102      	movs	r1, #2
 800256c:	6011      	str	r1, [r2, #0]
 800256e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002572:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	fa92 f1a2 	rbit	r1, r2
 800257c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002580:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002584:	6011      	str	r1, [r2, #0]
  return result;
 8002586:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800258a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	fab2 f282 	clz	r2, r2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f002 021f 	and.w	r2, r2, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d186      	bne.n	80024ba <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ac:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d105      	bne.n	80025c0 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b4:	4b38      	ldr	r3, [pc, #224]	@ (8002698 <HAL_RCC_OscConfig+0xc5c>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	4a37      	ldr	r2, [pc, #220]	@ (8002698 <HAL_RCC_OscConfig+0xc5c>)
 80025ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8251 	beq.w	8002a74 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d2:	4b31      	ldr	r3, [pc, #196]	@ (8002698 <HAL_RCC_OscConfig+0xc5c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	f000 820f 	beq.w	80029fe <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	f040 8165 	bne.w	80028bc <HAL_RCC_OscConfig+0xe80>
 80025f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002604:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002612:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002616:	601a      	str	r2, [r3, #0]
  return result;
 8002618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002620:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800262c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	461a      	mov	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fd1c 	bl	8001074 <HAL_GetTick>
 800263c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002640:	e009      	b.n	8002656 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002642:	f7fe fd17 	bl	8001074 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e20f      	b.n	8002a76 <HAL_RCC_OscConfig+0x103a>
 8002656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800265a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800265e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002668:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002676:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800267a:	601a      	str	r2, [r3, #0]
  return result;
 800267c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002680:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002684:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b3f      	cmp	r3, #63	@ 0x3f
 800268e:	d805      	bhi.n	800269c <HAL_RCC_OscConfig+0xc60>
 8002690:	4b01      	ldr	r3, [pc, #4]	@ (8002698 <HAL_RCC_OscConfig+0xc5c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	e02a      	b.n	80026ec <HAL_RCC_OscConfig+0xcb0>
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	fa93 f2a3 	rbit	r2, r3
 80026b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026bc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	4bca      	ldr	r3, [pc, #808]	@ (8002a14 <HAL_RCC_OscConfig+0xfd8>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026f0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026f8:	6011      	str	r1, [r2, #0]
 80026fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	fa92 f1a2 	rbit	r1, r2
 8002708:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800270c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002710:	6011      	str	r1, [r2, #0]
  return result;
 8002712:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002716:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	fab2 f282 	clz	r2, r2
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f042 0220 	orr.w	r2, r2, #32
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	f002 021f 	and.w	r2, r2, #31
 800272c:	2101      	movs	r1, #1
 800272e:	fa01 f202 	lsl.w	r2, r1, r2
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d184      	bne.n	8002642 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002738:	4bb6      	ldr	r3, [pc, #728]	@ (8002a14 <HAL_RCC_OscConfig+0xfd8>)
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	f023 020f 	bic.w	r2, r3, #15
 8002740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002744:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	49b1      	ldr	r1, [pc, #708]	@ (8002a14 <HAL_RCC_OscConfig+0xfd8>)
 800274e:	4313      	orrs	r3, r2
 8002750:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002752:	4bb0      	ldr	r3, [pc, #704]	@ (8002a14 <HAL_RCC_OscConfig+0xfd8>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800275a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6a19      	ldr	r1, [r3, #32]
 8002766:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	430b      	orrs	r3, r1
 8002774:	49a7      	ldr	r1, [pc, #668]	@ (8002a14 <HAL_RCC_OscConfig+0xfd8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
 800277a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002782:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800279e:	601a      	str	r2, [r3, #0]
  return result;
 80027a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027a8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	461a      	mov	r2, r3
 80027bc:	2301      	movs	r3, #1
 80027be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fc58 	bl	8001074 <HAL_GetTick>
 80027c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c8:	e009      	b.n	80027de <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe fc53 	bl	8001074 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e14b      	b.n	8002a76 <HAL_RCC_OscConfig+0x103a>
 80027de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002802:	601a      	str	r2, [r3, #0]
  return result;
 8002804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002808:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800280c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b3f      	cmp	r3, #63	@ 0x3f
 8002816:	d802      	bhi.n	800281e <HAL_RCC_OscConfig+0xde2>
 8002818:	4b7e      	ldr	r3, [pc, #504]	@ (8002a14 <HAL_RCC_OscConfig+0xfd8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	e027      	b.n	800286e <HAL_RCC_OscConfig+0xe32>
 800281e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002822:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800282a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002830:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002848:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800284c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002856:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002864:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a14 <HAL_RCC_OscConfig+0xfd8>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002872:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002876:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800287a:	6011      	str	r1, [r2, #0]
 800287c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002880:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	fa92 f1a2 	rbit	r1, r2
 800288a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800288e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002892:	6011      	str	r1, [r2, #0]
  return result;
 8002894:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002898:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	fab2 f282 	clz	r2, r2
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f042 0220 	orr.w	r2, r2, #32
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f002 021f 	and.w	r2, r2, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f202 	lsl.w	r2, r1, r2
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d087      	beq.n	80027ca <HAL_RCC_OscConfig+0xd8e>
 80028ba:	e0db      	b.n	8002a74 <HAL_RCC_OscConfig+0x1038>
 80028bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028dc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028e0:	601a      	str	r2, [r3, #0]
  return result;
 80028e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028ea:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	461a      	mov	r2, r3
 80028fe:	2300      	movs	r3, #0
 8002900:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe fbb7 	bl	8001074 <HAL_GetTick>
 8002906:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290a:	e009      	b.n	8002920 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fbb2 	bl	8001074 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0aa      	b.n	8002a76 <HAL_RCC_OscConfig+0x103a>
 8002920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002924:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002928:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800292c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002932:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002940:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002944:	601a      	str	r2, [r3, #0]
  return result;
 8002946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800294e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b3f      	cmp	r3, #63	@ 0x3f
 8002958:	d802      	bhi.n	8002960 <HAL_RCC_OscConfig+0xf24>
 800295a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a14 <HAL_RCC_OscConfig+0xfd8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	e027      	b.n	80029b0 <HAL_RCC_OscConfig+0xf74>
 8002960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002964:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002968:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800296c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002972:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	fa93 f2a3 	rbit	r2, r3
 800297c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002980:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800298a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800298e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002998:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fa93 f2a3 	rbit	r2, r3
 80029a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <HAL_RCC_OscConfig+0xfd8>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029b4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029bc:	6011      	str	r1, [r2, #0]
 80029be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029c2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	fa92 f1a2 	rbit	r1, r2
 80029cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029d0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80029d4:	6011      	str	r1, [r2, #0]
  return result;
 80029d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029da:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	fab2 f282 	clz	r2, r2
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f042 0220 	orr.w	r2, r2, #32
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f002 021f 	and.w	r2, r2, #31
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d187      	bne.n	800290c <HAL_RCC_OscConfig+0xed0>
 80029fc:	e03a      	b.n	8002a74 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d104      	bne.n	8002a18 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e031      	b.n	8002a76 <HAL_RCC_OscConfig+0x103a>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a18:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_RCC_OscConfig+0x1044>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002a20:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <HAL_RCC_OscConfig+0x1044>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a2c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002a30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d117      	bne.n	8002a70 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a44:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a5c:	f003 020f 	and.w	r2, r3, #15
 8002a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b09e      	sub	sp, #120	@ 0x78
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e154      	b.n	8002d46 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b89      	ldr	r3, [pc, #548]	@ (8002cc4 <HAL_RCC_ClockConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d910      	bls.n	8002acc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b86      	ldr	r3, [pc, #536]	@ (8002cc4 <HAL_RCC_ClockConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4984      	ldr	r1, [pc, #528]	@ (8002cc4 <HAL_RCC_ClockConfig+0x240>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b82      	ldr	r3, [pc, #520]	@ (8002cc4 <HAL_RCC_ClockConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e13c      	b.n	8002d46 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4978      	ldr	r1, [pc, #480]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80cd 	beq.w	8002c92 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d137      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xec>
 8002b00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b04:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b18:	d802      	bhi.n	8002b20 <HAL_RCC_ClockConfig+0x9c>
 8002b1a:	4b6b      	ldr	r3, [pc, #428]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	e00f      	b.n	8002b40 <HAL_RCC_ClockConfig+0xbc>
 8002b20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b32:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b3c:	4b62      	ldr	r3, [pc, #392]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b44:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b48:	fa92 f2a2 	rbit	r2, r2
 8002b4c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b50:	fab2 f282 	clz	r2, r2
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f002 021f 	and.w	r2, r2, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d171      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0ea      	b.n	8002d46 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d137      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x164>
 8002b78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b7c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b90:	d802      	bhi.n	8002b98 <HAL_RCC_ClockConfig+0x114>
 8002b92:	4b4d      	ldr	r3, [pc, #308]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x134>
 8002b98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002baa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bb4:	4b44      	ldr	r3, [pc, #272]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bbc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002bbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bc0:	fa92 f2a2 	rbit	r2, r2
 8002bc4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002bc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bc8:	fab2 f282 	clz	r2, r2
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	f042 0220 	orr.w	r2, r2, #32
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f002 021f 	and.w	r2, r2, #31
 8002bd8:	2101      	movs	r1, #1
 8002bda:	fa01 f202 	lsl.w	r2, r1, r2
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d135      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0ae      	b.n	8002d46 <HAL_RCC_ClockConfig+0x2c2>
 8002be8:	2302      	movs	r3, #2
 8002bea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bfe:	d802      	bhi.n	8002c06 <HAL_RCC_ClockConfig+0x182>
 8002c00:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	e00d      	b.n	8002c22 <HAL_RCC_ClockConfig+0x19e>
 8002c06:	2302      	movs	r3, #2
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c12:	2302      	movs	r3, #2
 8002c14:	623b      	str	r3, [r7, #32]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	2202      	movs	r2, #2
 8002c24:	61ba      	str	r2, [r7, #24]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	fa92 f2a2 	rbit	r2, r2
 8002c2c:	617a      	str	r2, [r7, #20]
  return result;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e07a      	b.n	8002d46 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c50:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 0203 	bic.w	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	491a      	ldr	r1, [pc, #104]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c62:	f7fe fa07 	bl	8001074 <HAL_GetTick>
 8002c66:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6a:	f7fe fa03 	bl	8001074 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e062      	b.n	8002d46 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c80:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 020c 	and.w	r2, r3, #12
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d1eb      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c92:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <HAL_RCC_ClockConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d215      	bcs.n	8002ccc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca0:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <HAL_RCC_ClockConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 0207 	bic.w	r2, r3, #7
 8002ca8:	4906      	ldr	r1, [pc, #24]	@ (8002cc4 <HAL_RCC_ClockConfig+0x240>)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <HAL_RCC_ClockConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d006      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e041      	b.n	8002d46 <HAL_RCC_ClockConfig+0x2c2>
 8002cc2:	bf00      	nop
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <HAL_RCC_ClockConfig+0x2cc>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	491a      	ldr	r1, [pc, #104]	@ (8002d50 <HAL_RCC_ClockConfig+0x2cc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf6:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <HAL_RCC_ClockConfig+0x2cc>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4912      	ldr	r1, [pc, #72]	@ (8002d50 <HAL_RCC_ClockConfig+0x2cc>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d0a:	f000 f829 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8002d0e:	4601      	mov	r1, r0
 8002d10:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <HAL_RCC_ClockConfig+0x2cc>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d18:	22f0      	movs	r2, #240	@ 0xf0
 8002d1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	fa92 f2a2 	rbit	r2, r2
 8002d22:	60fa      	str	r2, [r7, #12]
  return result;
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	fab2 f282 	clz	r2, r2
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	40d3      	lsrs	r3, r2
 8002d2e:	4a09      	ldr	r2, [pc, #36]	@ (8002d54 <HAL_RCC_ClockConfig+0x2d0>)
 8002d30:	5cd3      	ldrb	r3, [r2, r3]
 8002d32:	fa21 f303 	lsr.w	r3, r1, r3
 8002d36:	4a08      	ldr	r2, [pc, #32]	@ (8002d58 <HAL_RCC_ClockConfig+0x2d4>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d3a:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <HAL_RCC_ClockConfig+0x2d8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f82a 	bl	8000d98 <HAL_InitTick>
  
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3778      	adds	r7, #120	@ 0x78
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08008680 	.word	0x08008680
 8002d58:	20000004 	.word	0x20000004
 8002d5c:	20000008 	.word	0x20000008

08002d60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d002      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x30>
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x36>
 8002d8e:	e029      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d92:	613b      	str	r3, [r7, #16]
      break;
 8002d94:	e029      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	0c9b      	lsrs	r3, r3, #18
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	4a18      	ldr	r2, [pc, #96]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
 8002da2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	4a15      	ldr	r2, [pc, #84]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e007      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dce:	4a0b      	ldr	r2, [pc, #44]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	613b      	str	r3, [r7, #16]
      break;
 8002de2:	e002      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002de6:	613b      	str	r3, [r7, #16]
      break;
 8002de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dea:	693b      	ldr	r3, [r7, #16]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	007a1200 	.word	0x007a1200
 8002e00:	08008698 	.word	0x08008698
 8002e04:	080086a8 	.word	0x080086a8

08002e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e26:	f7ff ffef 	bl	8002e08 <HAL_RCC_GetHCLKFreq>
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e34:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	fa92 f2a2 	rbit	r2, r2
 8002e40:	603a      	str	r2, [r7, #0]
  return result;
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	40d3      	lsrs	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08008690 	.word	0x08008690

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e6a:	f7ff ffcd 	bl	8002e08 <HAL_RCC_GetHCLKFreq>
 8002e6e:	4601      	mov	r1, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002e78:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002e7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	fa92 f2a2 	rbit	r2, r2
 8002e84:	603a      	str	r2, [r7, #0]
  return result;
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	fab2 f282 	clz	r2, r2
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	40d3      	lsrs	r3, r2
 8002e90:	4a04      	ldr	r2, [pc, #16]	@ (8002ea4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08008690 	.word	0x08008690

08002ea8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eb8:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0203 	and.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002edc:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	08db      	lsrs	r3, r3, #3
 8002ee2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002eea:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <HAL_RCC_GetClockConfig+0x60>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0207 	and.w	r2, r3, #7
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40022000 	.word	0x40022000

08002f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b092      	sub	sp, #72	@ 0x48
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80d2 	beq.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f30:	4b4d      	ldr	r3, [pc, #308]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10e      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	4a49      	ldr	r2, [pc, #292]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	61d3      	str	r3, [r2, #28]
 8002f48:	4b47      	ldr	r3, [pc, #284]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b44      	ldr	r3, [pc, #272]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d118      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f66:	4b41      	ldr	r3, [pc, #260]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a40      	ldr	r2, [pc, #256]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f72:	f7fe f87f 	bl	8001074 <HAL_GetTick>
 8002f76:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	e008      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7a:	f7fe f87b 	bl	8001074 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b64      	cmp	r3, #100	@ 0x64
 8002f86:	d901      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e1d4      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b37      	ldr	r3, [pc, #220]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f98:	4b33      	ldr	r3, [pc, #204]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8082 	beq.w	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d07a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	461a      	mov	r2, r3
 8003006:	2300      	movs	r3, #0
 8003008:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800300a:	4a17      	ldr	r2, [pc, #92]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800300c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d049      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe f82b 	bl	8001074 <HAL_GetTick>
 800301e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe f827 	bl	8001074 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e17e      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003038:	2302      	movs	r3, #2
 800303a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
 8003044:	2302      	movs	r3, #2
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	61fb      	str	r3, [r7, #28]
  return result;
 8003050:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003062:	4b01      	ldr	r3, [pc, #4]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	e00d      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003068:	40021000 	.word	0x40021000
 800306c:	40007000 	.word	0x40007000
 8003070:	10908100 	.word	0x10908100
 8003074:	2302      	movs	r3, #2
 8003076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	4b9a      	ldr	r3, [pc, #616]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	2202      	movs	r2, #2
 8003086:	613a      	str	r2, [r7, #16]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	fa92 f2a2 	rbit	r2, r2
 800308e:	60fa      	str	r2, [r7, #12]
  return result;
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f002 021f 	and.w	r2, r2, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f202 	lsl.w	r2, r1, r2
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0b9      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030ae:	4b8f      	ldr	r3, [pc, #572]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	498c      	ldr	r1, [pc, #560]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c8:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4a87      	ldr	r2, [pc, #540]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e0:	4b82      	ldr	r3, [pc, #520]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	f023 0203 	bic.w	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	497f      	ldr	r1, [pc, #508]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030fe:	4b7b      	ldr	r3, [pc, #492]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4978      	ldr	r1, [pc, #480]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310c:	4313      	orrs	r3, r2
 800310e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800311c:	4b73      	ldr	r3, [pc, #460]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003120:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	4970      	ldr	r1, [pc, #448]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800313a:	4b6c      	ldr	r3, [pc, #432]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f023 0210 	bic.w	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4969      	ldr	r1, [pc, #420]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003158:	4b64      	ldr	r3, [pc, #400]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	4961      	ldr	r1, [pc, #388]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003176:	4b5d      	ldr	r3, [pc, #372]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	f023 0220 	bic.w	r2, r3, #32
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	495a      	ldr	r1, [pc, #360]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003194:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	4952      	ldr	r1, [pc, #328]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031b2:	4b4e      	ldr	r3, [pc, #312]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	494b      	ldr	r1, [pc, #300]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031d0:	4b46      	ldr	r3, [pc, #280]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	4943      	ldr	r1, [pc, #268]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031ee:	4b3f      	ldr	r3, [pc, #252]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	493c      	ldr	r1, [pc, #240]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800320c:	4b37      	ldr	r3, [pc, #220]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	4934      	ldr	r1, [pc, #208]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800321a:	4313      	orrs	r3, r2
 800321c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800322a:	4b30      	ldr	r3, [pc, #192]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003236:	492d      	ldr	r1, [pc, #180]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003238:	4313      	orrs	r3, r2
 800323a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003248:	4b28      	ldr	r3, [pc, #160]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003254:	4925      	ldr	r1, [pc, #148]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003256:	4313      	orrs	r3, r2
 8003258:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003266:	4b21      	ldr	r3, [pc, #132]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	491e      	ldr	r1, [pc, #120]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003274:	4313      	orrs	r3, r2
 8003276:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003284:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	4916      	ldr	r1, [pc, #88]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003292:	4313      	orrs	r3, r2
 8003294:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80032a2:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ae:	490f      	ldr	r1, [pc, #60]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80032c0:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	4907      	ldr	r1, [pc, #28]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00c      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80032de:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	e002      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f2:	4913      	ldr	r1, [pc, #76]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003304:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003310:	490b      	ldr	r1, [pc, #44]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003312:	4313      	orrs	r3, r2
 8003314:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003322:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332e:	4904      	ldr	r1, [pc, #16]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003330:	4313      	orrs	r3, r2
 8003332:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3748      	adds	r7, #72	@ 0x48
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000

08003344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e049      	b.n	80033ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f841 	bl	80033f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f000 f9da 	bl	800373c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d001      	beq.n	8003420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e04f      	b.n	80034c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a23      	ldr	r2, [pc, #140]	@ (80034cc <HAL_TIM_Base_Start_IT+0xc4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01d      	beq.n	800347e <HAL_TIM_Base_Start_IT+0x76>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344a:	d018      	beq.n	800347e <HAL_TIM_Base_Start_IT+0x76>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1f      	ldr	r2, [pc, #124]	@ (80034d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_TIM_Base_Start_IT+0x76>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1e      	ldr	r2, [pc, #120]	@ (80034d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_TIM_Base_Start_IT+0x76>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_TIM_Base_Start_IT+0x76>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_TIM_Base_Start_IT+0x76>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	@ (80034e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d115      	bne.n	80034aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	4b17      	ldr	r3, [pc, #92]	@ (80034e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003486:	4013      	ands	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b06      	cmp	r3, #6
 800348e:	d015      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0xb4>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003496:	d011      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a8:	e008      	b.n	80034bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e000      	b.n	80034be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40013400 	.word	0x40013400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40015000 	.word	0x40015000
 80034e4:	00010007 	.word	0x00010007

080034e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d020      	beq.n	800354c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01b      	beq.n	800354c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0202 	mvn.w	r2, #2
 800351c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8e4 	bl	8003700 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8d6 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f8e7 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d020      	beq.n	8003598 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01b      	beq.n	8003598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0204 	mvn.w	r2, #4
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8be 	bl	8003700 <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8b0 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8c1 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d020      	beq.n	80035e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01b      	beq.n	80035e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0208 	mvn.w	r2, #8
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2204      	movs	r2, #4
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f898 	bl	8003700 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f88a 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f89b 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d020      	beq.n	8003630 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f872 	bl	8003700 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f864 	bl	80036ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f875 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0201 	mvn.w	r2, #1
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fa30 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f916 	bl	80038a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f90e 	bl	80038b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f834 	bl	8003728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0220 	mvn.w	r2, #32
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8d6 	bl	8003890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a48      	ldr	r2, [pc, #288]	@ (8003870 <TIM_Base_SetConfig+0x134>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375a:	d00f      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a45      	ldr	r2, [pc, #276]	@ (8003874 <TIM_Base_SetConfig+0x138>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00b      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a44      	ldr	r2, [pc, #272]	@ (8003878 <TIM_Base_SetConfig+0x13c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a43      	ldr	r2, [pc, #268]	@ (800387c <TIM_Base_SetConfig+0x140>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a42      	ldr	r2, [pc, #264]	@ (8003880 <TIM_Base_SetConfig+0x144>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a37      	ldr	r2, [pc, #220]	@ (8003870 <TIM_Base_SetConfig+0x134>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01f      	beq.n	80037d6 <TIM_Base_SetConfig+0x9a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379c:	d01b      	beq.n	80037d6 <TIM_Base_SetConfig+0x9a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a34      	ldr	r2, [pc, #208]	@ (8003874 <TIM_Base_SetConfig+0x138>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d017      	beq.n	80037d6 <TIM_Base_SetConfig+0x9a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a33      	ldr	r2, [pc, #204]	@ (8003878 <TIM_Base_SetConfig+0x13c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <TIM_Base_SetConfig+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a32      	ldr	r2, [pc, #200]	@ (800387c <TIM_Base_SetConfig+0x140>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00f      	beq.n	80037d6 <TIM_Base_SetConfig+0x9a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a32      	ldr	r2, [pc, #200]	@ (8003884 <TIM_Base_SetConfig+0x148>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_Base_SetConfig+0x9a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a31      	ldr	r2, [pc, #196]	@ (8003888 <TIM_Base_SetConfig+0x14c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_Base_SetConfig+0x9a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a30      	ldr	r2, [pc, #192]	@ (800388c <TIM_Base_SetConfig+0x150>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_Base_SetConfig+0x9a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003880 <TIM_Base_SetConfig+0x144>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a18      	ldr	r2, [pc, #96]	@ (8003870 <TIM_Base_SetConfig+0x134>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <TIM_Base_SetConfig+0x100>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a19      	ldr	r2, [pc, #100]	@ (800387c <TIM_Base_SetConfig+0x140>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00f      	beq.n	800383c <TIM_Base_SetConfig+0x100>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a19      	ldr	r2, [pc, #100]	@ (8003884 <TIM_Base_SetConfig+0x148>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_Base_SetConfig+0x100>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <TIM_Base_SetConfig+0x14c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_Base_SetConfig+0x100>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a17      	ldr	r2, [pc, #92]	@ (800388c <TIM_Base_SetConfig+0x150>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_Base_SetConfig+0x100>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <TIM_Base_SetConfig+0x144>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d103      	bne.n	8003844 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	611a      	str	r2, [r3, #16]
  }
}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40012c00 	.word	0x40012c00
 8003874:	40000400 	.word	0x40000400
 8003878:	40000800 	.word	0x40000800
 800387c:	40013400 	.word	0x40013400
 8003880:	40015000 	.word	0x40015000
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800

08003890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e040      	b.n	8003960 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd f920 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	@ 0x24
 80038f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fec0 	bl	8004698 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fce9 	bl	80042f0 <UART_SetConfig>
 800391e:	4603      	mov	r3, r0
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e01b      	b.n	8003960 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 ff3f 	bl	80047dc <UART_CheckIdleState>
 800395e:	4603      	mov	r3, r0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	@ 0x28
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800397c:	2b20      	cmp	r3, #32
 800397e:	d177      	bne.n	8003a70 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Transmit+0x24>
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e070      	b.n	8003a72 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2221      	movs	r2, #33	@ 0x21
 800399c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800399e:	f7fd fb69 	bl	8001074 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039bc:	d108      	bne.n	80039d0 <HAL_UART_Transmit+0x68>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e003      	b.n	80039d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d8:	e02f      	b.n	8003a3a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2180      	movs	r1, #128	@ 0x80
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 ffa1 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e03b      	b.n	8003a72 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10b      	bne.n	8003a18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	881a      	ldrh	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a0c:	b292      	uxth	r2, r2
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	3302      	adds	r3, #2
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	e007      	b.n	8003a28 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1c9      	bne.n	80039da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2140      	movs	r1, #64	@ 0x40
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 ff6b 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e005      	b.n	8003a72 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b08b      	sub	sp, #44	@ 0x2c
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d147      	bne.n	8003b22 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_UART_Transmit_IT+0x22>
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e040      	b.n	8003b24 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2221      	movs	r2, #33	@ 0x21
 8003aca:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad4:	d107      	bne.n	8003ae6 <HAL_UART_Transmit_IT+0x6a>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	@ (8003b30 <HAL_UART_Transmit_IT+0xb4>)
 8003ae2:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003ae4:	e002      	b.n	8003aec <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a12      	ldr	r2, [pc, #72]	@ (8003b34 <HAL_UART_Transmit_IT+0xb8>)
 8003aea:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	613b      	str	r3, [r7, #16]
   return(result);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	69f9      	ldr	r1, [r7, #28]
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e6      	bne.n	8003aec <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	372c      	adds	r7, #44	@ 0x2c
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	08004f21 	.word	0x08004f21
 8003b34:	08004e6b 	.word	0x08004e6b

08003b38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	@ 0x28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d132      	bne.n	8003bb6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_UART_Receive_DMA+0x24>
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e02b      	b.n	8003bb8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d018      	beq.n	8003ba6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	613b      	str	r3, [r7, #16]
   return(result);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	69f9      	ldr	r1, [r7, #28]
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e6      	bne.n	8003b74 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 ff2b 	bl	8004a08 <UART_Start_Receive_DMA>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3728      	adds	r7, #40	@ 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b090      	sub	sp, #64	@ 0x40
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bd4:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be0:	2b80      	cmp	r3, #128	@ 0x80
 8003be2:	d139      	bne.n	8003c58 <HAL_UART_DMAStop+0x98>
 8003be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be6:	2b21      	cmp	r3, #33	@ 0x21
 8003be8:	d136      	bne.n	8003c58 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d015      	beq.n	8003c52 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd fbb6 	bl	800139c <HAL_DMA_Abort>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd fccd 	bl	80015da <HAL_DMA_GetError>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d105      	bne.n	8003c52 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e044      	b.n	8003cdc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 ff78 	bl	8004b48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b40      	cmp	r3, #64	@ 0x40
 8003c64:	d139      	bne.n	8003cda <HAL_UART_DMAStop+0x11a>
 8003c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c68:	2b22      	cmp	r3, #34	@ 0x22
 8003c6a:	d136      	bne.n	8003cda <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3308      	adds	r3, #8
 8003c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c82:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8c:	61ba      	str	r2, [r7, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd fb75 	bl	800139c <HAL_DMA_Abort>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd fc8c 	bl	80015da <HAL_DMA_GetError>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d105      	bne.n	8003cd4 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2210      	movs	r2, #16
 8003ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e003      	b.n	8003cdc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 ff5d 	bl	8004b94 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3740      	adds	r7, #64	@ 0x40
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003d0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003d12:	4013      	ands	r3, r2
 8003d14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d115      	bne.n	8003d4c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00f      	beq.n	8003d4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 82ab 	beq.w	8004298 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
      }
      return;
 8003d4a:	e2a5      	b.n	8004298 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8117 	beq.w	8003f84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d66:	4b85      	ldr	r3, [pc, #532]	@ (8003f7c <HAL_UART_IRQHandler+0x298>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 810a 	beq.w	8003f84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d011      	beq.n	8003da0 <HAL_UART_IRQHandler+0xbc>
 8003d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d011      	beq.n	8003dd0 <HAL_UART_IRQHandler+0xec>
 8003dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d011      	beq.n	8003e00 <HAL_UART_IRQHandler+0x11c>
 8003ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00b      	beq.n	8003e00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2204      	movs	r2, #4
 8003dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003df6:	f043 0202 	orr.w	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d017      	beq.n	8003e3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e32:	f043 0208 	orr.w	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d012      	beq.n	8003e6e <HAL_UART_IRQHandler+0x18a>
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00c      	beq.n	8003e6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8211 	beq.w	800429c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb6:	2b40      	cmp	r3, #64	@ 0x40
 8003eb8:	d005      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ebe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d04f      	beq.n	8003f66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fe64 	bl	8004b94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed6:	2b40      	cmp	r3, #64	@ 0x40
 8003ed8:	d141      	bne.n	8003f5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3308      	adds	r3, #8
 8003f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1d9      	bne.n	8003eda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d013      	beq.n	8003f56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f32:	4a13      	ldr	r2, [pc, #76]	@ (8003f80 <HAL_UART_IRQHandler+0x29c>)
 8003f34:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fa6c 	bl	8001418 <HAL_DMA_Abort_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d017      	beq.n	8003f76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f50:	4610      	mov	r0, r2
 8003f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	e00f      	b.n	8003f76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9b4 	bl	80042c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e00b      	b.n	8003f76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9b0 	bl	80042c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e007      	b.n	8003f76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9ac 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003f74:	e192      	b.n	800429c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f76:	bf00      	nop
    return;
 8003f78:	e190      	b.n	800429c <HAL_UART_IRQHandler+0x5b8>
 8003f7a:	bf00      	nop
 8003f7c:	04000120 	.word	0x04000120
 8003f80:	08004e3f 	.word	0x08004e3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 814b 	bne.w	8004224 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8144 	beq.w	8004224 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 813d 	beq.w	8004224 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b40      	cmp	r3, #64	@ 0x40
 8003fbe:	f040 80b5 	bne.w	800412c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8164 	beq.w	80042a0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	f080 815c 	bcs.w	80042a0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	f000 8086 	beq.w	800410a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004012:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004016:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800401a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004028:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800402c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004034:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1da      	bne.n	8003ffe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3308      	adds	r3, #8
 800404e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004058:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3308      	adds	r3, #8
 8004068:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800406c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004070:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004074:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800407e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e1      	bne.n	8004048 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3308      	adds	r3, #8
 800408a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800409a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e3      	bne.n	8004084 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040da:	f023 0310 	bic.w	r3, r3, #16
 80040de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e4      	bne.n	80040ca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004104:	4618      	mov	r0, r3
 8004106:	f7fd f949 	bl	800139c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800411c:	b29b      	uxth	r3, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	b29b      	uxth	r3, r3
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f8d7 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800412a:	e0b9      	b.n	80042a0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004138:	b29b      	uxth	r3, r3
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80ab 	beq.w	80042a4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800414e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80a6 	beq.w	80042a4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800416c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800417a:	647b      	str	r3, [r7, #68]	@ 0x44
 800417c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004180:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e4      	bne.n	8004158 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3308      	adds	r3, #8
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	623b      	str	r3, [r7, #32]
   return(result);
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80041b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0310 	bic.w	r3, r3, #16
 80041ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	617b      	str	r3, [r7, #20]
   return(result);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e4      	bne.n	80041da <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004216:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800421a:	4619      	mov	r1, r3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f85b 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004222:	e03f      	b.n	80042a4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <HAL_UART_IRQHandler+0x56a>
 8004230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004244:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fef4 	bl	8005034 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800424c:	e02d      	b.n	80042aa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00e      	beq.n	8004278 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01c      	beq.n	80042a8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
    }
    return;
 8004276:	e017      	b.n	80042a8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d012      	beq.n	80042aa <HAL_UART_IRQHandler+0x5c6>
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00c      	beq.n	80042aa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fea5 	bl	8004fe0 <UART_EndTransmit_IT>
    return;
 8004296:	e008      	b.n	80042aa <HAL_UART_IRQHandler+0x5c6>
      return;
 8004298:	bf00      	nop
 800429a:	e006      	b.n	80042aa <HAL_UART_IRQHandler+0x5c6>
    return;
 800429c:	bf00      	nop
 800429e:	e004      	b.n	80042aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_UART_IRQHandler+0x5c6>
    return;
 80042a8:	bf00      	nop
  }

}
 80042aa:	37e8      	adds	r7, #232	@ 0xe8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b92      	ldr	r3, [pc, #584]	@ (8004564 <UART_SetConfig+0x274>)
 800431c:	4013      	ands	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	6979      	ldr	r1, [r7, #20]
 8004324:	430b      	orrs	r3, r1
 8004326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a80      	ldr	r2, [pc, #512]	@ (8004568 <UART_SetConfig+0x278>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d120      	bne.n	80043ae <UART_SetConfig+0xbe>
 800436c:	4b7f      	ldr	r3, [pc, #508]	@ (800456c <UART_SetConfig+0x27c>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b03      	cmp	r3, #3
 8004376:	d817      	bhi.n	80043a8 <UART_SetConfig+0xb8>
 8004378:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <UART_SetConfig+0x90>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004391 	.word	0x08004391
 8004384:	0800439d 	.word	0x0800439d
 8004388:	080043a3 	.word	0x080043a3
 800438c:	08004397 	.word	0x08004397
 8004390:	2301      	movs	r3, #1
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e0b5      	b.n	8004502 <UART_SetConfig+0x212>
 8004396:	2302      	movs	r3, #2
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e0b2      	b.n	8004502 <UART_SetConfig+0x212>
 800439c:	2304      	movs	r3, #4
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e0af      	b.n	8004502 <UART_SetConfig+0x212>
 80043a2:	2308      	movs	r3, #8
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	e0ac      	b.n	8004502 <UART_SetConfig+0x212>
 80043a8:	2310      	movs	r3, #16
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e0a9      	b.n	8004502 <UART_SetConfig+0x212>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6f      	ldr	r2, [pc, #444]	@ (8004570 <UART_SetConfig+0x280>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d124      	bne.n	8004402 <UART_SetConfig+0x112>
 80043b8:	4b6c      	ldr	r3, [pc, #432]	@ (800456c <UART_SetConfig+0x27c>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043c4:	d011      	beq.n	80043ea <UART_SetConfig+0xfa>
 80043c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043ca:	d817      	bhi.n	80043fc <UART_SetConfig+0x10c>
 80043cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d0:	d011      	beq.n	80043f6 <UART_SetConfig+0x106>
 80043d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d6:	d811      	bhi.n	80043fc <UART_SetConfig+0x10c>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <UART_SetConfig+0xf4>
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e0:	d006      	beq.n	80043f0 <UART_SetConfig+0x100>
 80043e2:	e00b      	b.n	80043fc <UART_SetConfig+0x10c>
 80043e4:	2300      	movs	r3, #0
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e08b      	b.n	8004502 <UART_SetConfig+0x212>
 80043ea:	2302      	movs	r3, #2
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e088      	b.n	8004502 <UART_SetConfig+0x212>
 80043f0:	2304      	movs	r3, #4
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e085      	b.n	8004502 <UART_SetConfig+0x212>
 80043f6:	2308      	movs	r3, #8
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e082      	b.n	8004502 <UART_SetConfig+0x212>
 80043fc:	2310      	movs	r3, #16
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e07f      	b.n	8004502 <UART_SetConfig+0x212>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5b      	ldr	r2, [pc, #364]	@ (8004574 <UART_SetConfig+0x284>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d124      	bne.n	8004456 <UART_SetConfig+0x166>
 800440c:	4b57      	ldr	r3, [pc, #348]	@ (800456c <UART_SetConfig+0x27c>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004410:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004414:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004418:	d011      	beq.n	800443e <UART_SetConfig+0x14e>
 800441a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800441e:	d817      	bhi.n	8004450 <UART_SetConfig+0x160>
 8004420:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004424:	d011      	beq.n	800444a <UART_SetConfig+0x15a>
 8004426:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800442a:	d811      	bhi.n	8004450 <UART_SetConfig+0x160>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <UART_SetConfig+0x148>
 8004430:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004434:	d006      	beq.n	8004444 <UART_SetConfig+0x154>
 8004436:	e00b      	b.n	8004450 <UART_SetConfig+0x160>
 8004438:	2300      	movs	r3, #0
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e061      	b.n	8004502 <UART_SetConfig+0x212>
 800443e:	2302      	movs	r3, #2
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e05e      	b.n	8004502 <UART_SetConfig+0x212>
 8004444:	2304      	movs	r3, #4
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e05b      	b.n	8004502 <UART_SetConfig+0x212>
 800444a:	2308      	movs	r3, #8
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e058      	b.n	8004502 <UART_SetConfig+0x212>
 8004450:	2310      	movs	r3, #16
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e055      	b.n	8004502 <UART_SetConfig+0x212>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a47      	ldr	r2, [pc, #284]	@ (8004578 <UART_SetConfig+0x288>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d124      	bne.n	80044aa <UART_SetConfig+0x1ba>
 8004460:	4b42      	ldr	r3, [pc, #264]	@ (800456c <UART_SetConfig+0x27c>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004464:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004468:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800446c:	d011      	beq.n	8004492 <UART_SetConfig+0x1a2>
 800446e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004472:	d817      	bhi.n	80044a4 <UART_SetConfig+0x1b4>
 8004474:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004478:	d011      	beq.n	800449e <UART_SetConfig+0x1ae>
 800447a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800447e:	d811      	bhi.n	80044a4 <UART_SetConfig+0x1b4>
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <UART_SetConfig+0x19c>
 8004484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004488:	d006      	beq.n	8004498 <UART_SetConfig+0x1a8>
 800448a:	e00b      	b.n	80044a4 <UART_SetConfig+0x1b4>
 800448c:	2300      	movs	r3, #0
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e037      	b.n	8004502 <UART_SetConfig+0x212>
 8004492:	2302      	movs	r3, #2
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e034      	b.n	8004502 <UART_SetConfig+0x212>
 8004498:	2304      	movs	r3, #4
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e031      	b.n	8004502 <UART_SetConfig+0x212>
 800449e:	2308      	movs	r3, #8
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	e02e      	b.n	8004502 <UART_SetConfig+0x212>
 80044a4:	2310      	movs	r3, #16
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e02b      	b.n	8004502 <UART_SetConfig+0x212>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a33      	ldr	r2, [pc, #204]	@ (800457c <UART_SetConfig+0x28c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d124      	bne.n	80044fe <UART_SetConfig+0x20e>
 80044b4:	4b2d      	ldr	r3, [pc, #180]	@ (800456c <UART_SetConfig+0x27c>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80044bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044c0:	d011      	beq.n	80044e6 <UART_SetConfig+0x1f6>
 80044c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044c6:	d817      	bhi.n	80044f8 <UART_SetConfig+0x208>
 80044c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044cc:	d011      	beq.n	80044f2 <UART_SetConfig+0x202>
 80044ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044d2:	d811      	bhi.n	80044f8 <UART_SetConfig+0x208>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <UART_SetConfig+0x1f0>
 80044d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044dc:	d006      	beq.n	80044ec <UART_SetConfig+0x1fc>
 80044de:	e00b      	b.n	80044f8 <UART_SetConfig+0x208>
 80044e0:	2300      	movs	r3, #0
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e00d      	b.n	8004502 <UART_SetConfig+0x212>
 80044e6:	2302      	movs	r3, #2
 80044e8:	77fb      	strb	r3, [r7, #31]
 80044ea:	e00a      	b.n	8004502 <UART_SetConfig+0x212>
 80044ec:	2304      	movs	r3, #4
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e007      	b.n	8004502 <UART_SetConfig+0x212>
 80044f2:	2308      	movs	r3, #8
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e004      	b.n	8004502 <UART_SetConfig+0x212>
 80044f8:	2310      	movs	r3, #16
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e001      	b.n	8004502 <UART_SetConfig+0x212>
 80044fe:	2310      	movs	r3, #16
 8004500:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800450a:	d16b      	bne.n	80045e4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800450c:	7ffb      	ldrb	r3, [r7, #31]
 800450e:	2b08      	cmp	r3, #8
 8004510:	d838      	bhi.n	8004584 <UART_SetConfig+0x294>
 8004512:	a201      	add	r2, pc, #4	@ (adr r2, 8004518 <UART_SetConfig+0x228>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	0800453d 	.word	0x0800453d
 800451c:	08004545 	.word	0x08004545
 8004520:	0800454d 	.word	0x0800454d
 8004524:	08004585 	.word	0x08004585
 8004528:	08004553 	.word	0x08004553
 800452c:	08004585 	.word	0x08004585
 8004530:	08004585 	.word	0x08004585
 8004534:	08004585 	.word	0x08004585
 8004538:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7fe fc70 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8004540:	61b8      	str	r0, [r7, #24]
        break;
 8004542:	e024      	b.n	800458e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7fe fc8e 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8004548:	61b8      	str	r0, [r7, #24]
        break;
 800454a:	e020      	b.n	800458e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <UART_SetConfig+0x290>)
 800454e:	61bb      	str	r3, [r7, #24]
        break;
 8004550:	e01d      	b.n	800458e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7fe fc05 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8004556:	61b8      	str	r0, [r7, #24]
        break;
 8004558:	e019      	b.n	800458e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455e:	61bb      	str	r3, [r7, #24]
        break;
 8004560:	e015      	b.n	800458e <UART_SetConfig+0x29e>
 8004562:	bf00      	nop
 8004564:	efff69f3 	.word	0xefff69f3
 8004568:	40013800 	.word	0x40013800
 800456c:	40021000 	.word	0x40021000
 8004570:	40004400 	.word	0x40004400
 8004574:	40004800 	.word	0x40004800
 8004578:	40004c00 	.word	0x40004c00
 800457c:	40005000 	.word	0x40005000
 8004580:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77bb      	strb	r3, [r7, #30]
        break;
 800458c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d073      	beq.n	800467c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	005a      	lsls	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	441a      	add	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b0f      	cmp	r3, #15
 80045ae:	d916      	bls.n	80045de <UART_SetConfig+0x2ee>
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b6:	d212      	bcs.n	80045de <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f023 030f 	bic.w	r3, r3, #15
 80045c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	89fb      	ldrh	r3, [r7, #14]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	89fa      	ldrh	r2, [r7, #14]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	e04e      	b.n	800467c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	77bb      	strb	r3, [r7, #30]
 80045e2:	e04b      	b.n	800467c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045e4:	7ffb      	ldrb	r3, [r7, #31]
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d827      	bhi.n	800463a <UART_SetConfig+0x34a>
 80045ea:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <UART_SetConfig+0x300>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004615 	.word	0x08004615
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004625 	.word	0x08004625
 80045fc:	0800463b 	.word	0x0800463b
 8004600:	0800462b 	.word	0x0800462b
 8004604:	0800463b 	.word	0x0800463b
 8004608:	0800463b 	.word	0x0800463b
 800460c:	0800463b 	.word	0x0800463b
 8004610:	08004633 	.word	0x08004633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004614:	f7fe fc04 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8004618:	61b8      	str	r0, [r7, #24]
        break;
 800461a:	e013      	b.n	8004644 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7fe fc22 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8004620:	61b8      	str	r0, [r7, #24]
        break;
 8004622:	e00f      	b.n	8004644 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004624:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <UART_SetConfig+0x3a4>)
 8004626:	61bb      	str	r3, [r7, #24]
        break;
 8004628:	e00c      	b.n	8004644 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800462a:	f7fe fb99 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 800462e:	61b8      	str	r0, [r7, #24]
        break;
 8004630:	e008      	b.n	8004644 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004636:	61bb      	str	r3, [r7, #24]
        break;
 8004638:	e004      	b.n	8004644 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	77bb      	strb	r3, [r7, #30]
        break;
 8004642:	bf00      	nop
    }

    if (pclk != 0U)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	085a      	lsrs	r2, r3, #1
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	441a      	add	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b0f      	cmp	r3, #15
 8004662:	d909      	bls.n	8004678 <UART_SetConfig+0x388>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800466a:	d205      	bcs.n	8004678 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	b29a      	uxth	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	e001      	b.n	800467c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004688:	7fbb      	ldrb	r3, [r7, #30]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	007a1200 	.word	0x007a1200

08004698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01a      	beq.n	80047ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004796:	d10a      	bne.n	80047ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]
  }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b098      	sub	sp, #96	@ 0x60
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047ec:	f7fc fc42 	bl	8001074 <HAL_GetTick>
 80047f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d12e      	bne.n	800485e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004800:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004808:	2200      	movs	r2, #0
 800480a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f88c 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d021      	beq.n	800485e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800482e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004838:	647b      	str	r3, [r7, #68]	@ 0x44
 800483a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800483e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e6      	bne.n	800481a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e062      	b.n	8004924 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b04      	cmp	r3, #4
 800486a:	d149      	bne.n	8004900 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800486c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004874:	2200      	movs	r2, #0
 8004876:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f856 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d03c      	beq.n	8004900 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	623b      	str	r3, [r7, #32]
   return(result);
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800489a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e6      	bne.n	8004886 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3308      	adds	r3, #8
 80048be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3308      	adds	r3, #8
 80048d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d8:	61fa      	str	r2, [r7, #28]
 80048da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	69b9      	ldr	r1, [r7, #24]
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	617b      	str	r3, [r7, #20]
   return(result);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e5      	bne.n	80048b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e011      	b.n	8004924 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3758      	adds	r7, #88	@ 0x58
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493c:	e04f      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004944:	d04b      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fc fb95 	bl	8001074 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <UART_WaitOnFlagUntilTimeout+0x30>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e04e      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d037      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b80      	cmp	r3, #128	@ 0x80
 8004972:	d034      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b40      	cmp	r3, #64	@ 0x40
 8004978:	d031      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b08      	cmp	r3, #8
 8004986:	d110      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2208      	movs	r2, #8
 800498e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f8ff 	bl	8004b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2208      	movs	r2, #8
 800499a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e029      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b8:	d111      	bne.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f8e5 	bl	8004b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e00f      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4013      	ands	r3, r2
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	bf0c      	ite	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	2300      	movne	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d0a0      	beq.n	800493e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b096      	sub	sp, #88	@ 0x58
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2222      	movs	r2, #34	@ 0x22
 8004a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d028      	beq.n	8004a8e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a40:	4a3e      	ldr	r2, [pc, #248]	@ (8004b3c <UART_Start_Receive_DMA+0x134>)
 8004a42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a48:	4a3d      	ldr	r2, [pc, #244]	@ (8004b40 <UART_Start_Receive_DMA+0x138>)
 8004a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a50:	4a3c      	ldr	r2, [pc, #240]	@ (8004b44 <UART_Start_Receive_DMA+0x13c>)
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a58:	2200      	movs	r2, #0
 8004a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3324      	adds	r3, #36	@ 0x24
 8004a66:	4619      	mov	r1, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	f7fc fc35 	bl	80012de <HAL_DMA_Start_IT>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2210      	movs	r2, #16
 8004a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e051      	b.n	8004b32 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e6      	bne.n	8004a96 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ae8:	637a      	str	r2, [r7, #52]	@ 0x34
 8004aea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004aee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3308      	adds	r3, #8
 8004b1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b1c:	623a      	str	r2, [r7, #32]
 8004b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	69f9      	ldr	r1, [r7, #28]
 8004b22:	6a3a      	ldr	r2, [r7, #32]
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e5      	bne.n	8004afc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3758      	adds	r7, #88	@ 0x58
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	08004c5d 	.word	0x08004c5d
 8004b40:	08004d83 	.word	0x08004d83
 8004b44:	08004dc1 	.word	0x08004dc1

08004b48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b089      	sub	sp, #36	@ 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	6979      	ldr	r1, [r7, #20]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	e841 2300 	strex	r3, r2, [r1]
 8004b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e6      	bne.n	8004b50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004b88:	bf00      	nop
 8004b8a:	3724      	adds	r7, #36	@ 0x24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b095      	sub	sp, #84	@ 0x54
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bba:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e6      	bne.n	8004b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e5      	bne.n	8004bce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d118      	bne.n	8004c3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f023 0310 	bic.w	r3, r3, #16
 8004c1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6979      	ldr	r1, [r7, #20]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	613b      	str	r3, [r7, #16]
   return(result);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e6      	bne.n	8004c0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c50:	bf00      	nop
 8004c52:	3754      	adds	r7, #84	@ 0x54
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b09c      	sub	sp, #112	@ 0x70
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d071      	beq.n	8004d56 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c9a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e6      	bne.n	8004c7a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ccc:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	623b      	str	r3, [r7, #32]
   return(result);
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d00:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d16:	2220      	movs	r2, #32
 8004d18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d118      	bne.n	8004d56 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f023 0310 	bic.w	r3, r3, #16
 8004d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d42:	61fb      	str	r3, [r7, #28]
 8004d44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	69b9      	ldr	r1, [r7, #24]
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e6      	bne.n	8004d24 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d58:	2200      	movs	r2, #0
 8004d5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d107      	bne.n	8004d74 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d6e:	f7ff fab3 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d72:	e002      	b.n	8004d7a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004d74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d76:	f7fb fbf1 	bl	800055c <HAL_UART_RxCpltCallback>
}
 8004d7a:	bf00      	nop
 8004d7c:	3770      	adds	r7, #112	@ 0x70
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d109      	bne.n	8004db2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	4619      	mov	r1, r3
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fa94 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004db0:	e002      	b.n	8004db8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7ff fa7c 	bl	80042b0 <HAL_UART_RxHalfCpltCallback>
}
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dd2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de6:	2b80      	cmp	r3, #128	@ 0x80
 8004de8:	d109      	bne.n	8004dfe <UART_DMAError+0x3e>
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b21      	cmp	r3, #33	@ 0x21
 8004dee:	d106      	bne.n	8004dfe <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004df8:	6978      	ldr	r0, [r7, #20]
 8004dfa:	f7ff fea5 	bl	8004b48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e08:	2b40      	cmp	r3, #64	@ 0x40
 8004e0a:	d109      	bne.n	8004e20 <UART_DMAError+0x60>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b22      	cmp	r3, #34	@ 0x22
 8004e10:	d106      	bne.n	8004e20 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004e1a:	6978      	ldr	r0, [r7, #20]
 8004e1c:	f7ff feba 	bl	8004b94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e26:	f043 0210 	orr.w	r2, r3, #16
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e30:	6978      	ldr	r0, [r7, #20]
 8004e32:	f7ff fa47 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e36:	bf00      	nop
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff fa31 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b08f      	sub	sp, #60	@ 0x3c
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e76:	2b21      	cmp	r3, #33	@ 0x21
 8004e78:	d14c      	bne.n	8004f14 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d132      	bne.n	8004eec <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ea6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e6      	bne.n	8004e86 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6979      	ldr	r1, [r7, #20]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e6      	bne.n	8004eb8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004eea:	e013      	b.n	8004f14 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004f14:	bf00      	nop
 8004f16:	373c      	adds	r7, #60	@ 0x3c
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b091      	sub	sp, #68	@ 0x44
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f2c:	2b21      	cmp	r3, #33	@ 0x21
 8004f2e:	d151      	bne.n	8004fd4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d132      	bne.n	8004fa2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	623b      	str	r3, [r7, #32]
   return(result);
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e6      	bne.n	8004f3c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	69b9      	ldr	r1, [r7, #24]
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	617b      	str	r3, [r7, #20]
   return(result);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e6      	bne.n	8004f6e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004fa0:	e018      	b.n	8004fd4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004faa:	881a      	ldrh	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb4:	b292      	uxth	r2, r2
 8004fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fbc:	1c9a      	adds	r2, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004fd4:	bf00      	nop
 8004fd6:	3744      	adds	r7, #68	@ 0x44
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6979      	ldr	r1, [r7, #20]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	613b      	str	r3, [r7, #16]
   return(result);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e6      	bne.n	8004fe8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fb fb00 	bl	800062c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502c:	bf00      	nop
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800504e:	f3ef 8305 	mrs	r3, IPSR
 8005052:	60bb      	str	r3, [r7, #8]
  return(result);
 8005054:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10f      	bne.n	800507a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505a:	f3ef 8310 	mrs	r3, PRIMASK
 800505e:	607b      	str	r3, [r7, #4]
  return(result);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <osKernelInitialize+0x32>
 8005066:	4b11      	ldr	r3, [pc, #68]	@ (80050ac <osKernelInitialize+0x64>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d109      	bne.n	8005082 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800506e:	f3ef 8311 	mrs	r3, BASEPRI
 8005072:	603b      	str	r3, [r7, #0]
  return(result);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800507a:	f06f 0305 	mvn.w	r3, #5
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e00c      	b.n	800509c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005082:	4b0a      	ldr	r3, [pc, #40]	@ (80050ac <osKernelInitialize+0x64>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d105      	bne.n	8005096 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800508a:	4b08      	ldr	r3, [pc, #32]	@ (80050ac <osKernelInitialize+0x64>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e002      	b.n	800509c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800509a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800509c:	68fb      	ldr	r3, [r7, #12]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	2000194c 	.word	0x2000194c

080050b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050b6:	f3ef 8305 	mrs	r3, IPSR
 80050ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80050bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10f      	bne.n	80050e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c2:	f3ef 8310 	mrs	r3, PRIMASK
 80050c6:	607b      	str	r3, [r7, #4]
  return(result);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <osKernelStart+0x32>
 80050ce:	4b11      	ldr	r3, [pc, #68]	@ (8005114 <osKernelStart+0x64>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d109      	bne.n	80050ea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050d6:	f3ef 8311 	mrs	r3, BASEPRI
 80050da:	603b      	str	r3, [r7, #0]
  return(result);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80050e2:	f06f 0305 	mvn.w	r3, #5
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e00e      	b.n	8005108 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80050ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005114 <osKernelStart+0x64>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d107      	bne.n	8005102 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <osKernelStart+0x64>)
 80050f4:	2202      	movs	r2, #2
 80050f6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80050f8:	f001 f8b0 	bl	800625c <vTaskStartScheduler>
      stat = osOK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e002      	b.n	8005108 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005106:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005108:	68fb      	ldr	r3, [r7, #12]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	2000194c 	.word	0x2000194c

08005118 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b092      	sub	sp, #72	@ 0x48
 800511c:	af04      	add	r7, sp, #16
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005128:	f3ef 8305 	mrs	r3, IPSR
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005130:	2b00      	cmp	r3, #0
 8005132:	f040 8094 	bne.w	800525e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005136:	f3ef 8310 	mrs	r3, PRIMASK
 800513a:	623b      	str	r3, [r7, #32]
  return(result);
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 808d 	bne.w	800525e <osThreadNew+0x146>
 8005144:	4b48      	ldr	r3, [pc, #288]	@ (8005268 <osThreadNew+0x150>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d106      	bne.n	800515a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800514c:	f3ef 8311 	mrs	r3, BASEPRI
 8005150:	61fb      	str	r3, [r7, #28]
  return(result);
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 8082 	bne.w	800525e <osThreadNew+0x146>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d07e      	beq.n	800525e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005160:	2380      	movs	r3, #128	@ 0x80
 8005162:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005164:	2318      	movs	r3, #24
 8005166:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8005168:	2300      	movs	r3, #0
 800516a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800516c:	f107 031b 	add.w	r3, r7, #27
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005176:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d045      	beq.n	800520a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <osThreadNew+0x74>
        name = attr->name;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800519a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <osThreadNew+0x9a>
 80051a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a2:	2b38      	cmp	r3, #56	@ 0x38
 80051a4:	d805      	bhi.n	80051b2 <osThreadNew+0x9a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <osThreadNew+0x9e>
        return (NULL);
 80051b2:	2300      	movs	r3, #0
 80051b4:	e054      	b.n	8005260 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00e      	beq.n	80051ec <osThreadNew+0xd4>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2ba7      	cmp	r3, #167	@ 0xa7
 80051d4:	d90a      	bls.n	80051ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <osThreadNew+0xd4>
        mem = 1;
 80051e6:	2301      	movs	r3, #1
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ea:	e010      	b.n	800520e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10c      	bne.n	800520e <osThreadNew+0xf6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d108      	bne.n	800520e <osThreadNew+0xf6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <osThreadNew+0xf6>
          mem = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005208:	e001      	b.n	800520e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800520e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005210:	2b01      	cmp	r3, #1
 8005212:	d110      	bne.n	8005236 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800521c:	9202      	str	r2, [sp, #8]
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005228:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fe2c 	bl	8005e88 <xTaskCreateStatic>
 8005230:	4603      	mov	r3, r0
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e013      	b.n	800525e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d110      	bne.n	800525e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	b29a      	uxth	r2, r3
 8005240:	f107 0314 	add.w	r3, r7, #20
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fe79 	bl	8005f46 <xTaskCreate>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d001      	beq.n	800525e <osThreadNew+0x146>
          hTask = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800525e:	697b      	ldr	r3, [r7, #20]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3738      	adds	r7, #56	@ 0x38
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	2000194c 	.word	0x2000194c

0800526c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005274:	f3ef 8305 	mrs	r3, IPSR
 8005278:	613b      	str	r3, [r7, #16]
  return(result);
 800527a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10f      	bne.n	80052a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	60fb      	str	r3, [r7, #12]
  return(result);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <osDelay+0x34>
 800528c:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <osDelay+0x58>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d109      	bne.n	80052a8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005294:	f3ef 8311 	mrs	r3, BASEPRI
 8005298:	60bb      	str	r3, [r7, #8]
  return(result);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <osDelay+0x3c>
    stat = osErrorISR;
 80052a0:	f06f 0305 	mvn.w	r3, #5
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e007      	b.n	80052b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 ff9c 	bl	80061f0 <vTaskDelay>
    }
  }

  return (stat);
 80052b8:	697b      	ldr	r3, [r7, #20]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	2000194c 	.word	0x2000194c

080052c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4a07      	ldr	r2, [pc, #28]	@ (80052f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80052d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4a06      	ldr	r2, [pc, #24]	@ (80052f8 <vApplicationGetIdleTaskMemory+0x30>)
 80052de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2280      	movs	r2, #128	@ 0x80
 80052e4:	601a      	str	r2, [r3, #0]
}
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20001950 	.word	0x20001950
 80052f8:	200019f8 	.word	0x200019f8

080052fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a07      	ldr	r2, [pc, #28]	@ (8005328 <vApplicationGetTimerTaskMemory+0x2c>)
 800530c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4a06      	ldr	r2, [pc, #24]	@ (800532c <vApplicationGetTimerTaskMemory+0x30>)
 8005312:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800531a:	601a      	str	r2, [r3, #0]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	20001bf8 	.word	0x20001bf8
 800532c:	20001ca0 	.word	0x20001ca0

08005330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f103 0208 	add.w	r2, r3, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f103 0208 	add.w	r2, r3, #8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f103 0208 	add.w	r2, r3, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	601a      	str	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053e8:	d103      	bne.n	80053f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e00c      	b.n	800540c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3308      	adds	r3, #8
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	e002      	b.n	8005400 <vListInsert+0x2e>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	429a      	cmp	r2, r3
 800540a:	d2f6      	bcs.n	80053fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6892      	ldr	r2, [r2, #8]
 800545a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6852      	ldr	r2, [r2, #4]
 8005464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d103      	bne.n	8005478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10b      	bne.n	80054c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054be:	bf00      	nop
 80054c0:	bf00      	nop
 80054c2:	e7fd      	b.n	80054c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054c4:	f002 f870 	bl	80075a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d0:	68f9      	ldr	r1, [r7, #12]
 80054d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	441a      	add	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f4:	3b01      	subs	r3, #1
 80054f6:	68f9      	ldr	r1, [r7, #12]
 80054f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	441a      	add	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	22ff      	movs	r2, #255	@ 0xff
 8005508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	22ff      	movs	r2, #255	@ 0xff
 8005510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d114      	bne.n	8005544 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01a      	beq.n	8005558 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3310      	adds	r3, #16
 8005526:	4618      	mov	r0, r3
 8005528:	f001 f93c 	bl	80067a4 <xTaskRemoveFromEventList>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d012      	beq.n	8005558 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <xQueueGenericReset+0xd0>)
 8005534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	e009      	b.n	8005558 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3310      	adds	r3, #16
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fef1 	bl	8005330 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3324      	adds	r3, #36	@ 0x24
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff feec 	bl	8005330 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005558:	f002 f858 	bl	800760c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800555c:	2301      	movs	r3, #1
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08e      	sub	sp, #56	@ 0x38
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10b      	bne.n	8005598 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	e7fd      	b.n	8005594 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10b      	bne.n	80055b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <xQueueGenericCreateStatic+0x56>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <xQueueGenericCreateStatic+0x5a>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueGenericCreateStatic+0x5c>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	623b      	str	r3, [r7, #32]
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <xQueueGenericCreateStatic+0x84>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <xQueueGenericCreateStatic+0x88>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <xQueueGenericCreateStatic+0x8a>
 80055f4:	2300      	movs	r3, #0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	61fb      	str	r3, [r7, #28]
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	e7fd      	b.n	800560e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005612:	2350      	movs	r3, #80	@ 0x50
 8005614:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b50      	cmp	r3, #80	@ 0x50
 800561a:	d00b      	beq.n	8005634 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	61bb      	str	r3, [r7, #24]
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	e7fd      	b.n	8005630 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00d      	beq.n	800565a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800563e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005646:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800564a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	4613      	mov	r3, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f805 	bl	8005664 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800565a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800565c:	4618      	mov	r0, r3
 800565e:	3730      	adds	r7, #48	@ 0x30
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e002      	b.n	8005686 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005692:	2101      	movs	r1, #1
 8005694:	69b8      	ldr	r0, [r7, #24]
 8005696:	f7ff feff 	bl	8005498 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	78fa      	ldrb	r2, [r7, #3]
 800569e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08e      	sub	sp, #56	@ 0x38
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056ba:	2300      	movs	r3, #0
 80056bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10b      	bne.n	80056e0 <xQueueGenericSend+0x34>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056da:	bf00      	nop
 80056dc:	bf00      	nop
 80056de:	e7fd      	b.n	80056dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <xQueueGenericSend+0x42>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <xQueueGenericSend+0x46>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueGenericSend+0x48>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <xQueueGenericSend+0x64>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d103      	bne.n	800571e <xQueueGenericSend+0x72>
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <xQueueGenericSend+0x76>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueGenericSend+0x78>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <xQueueGenericSend+0x94>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	623b      	str	r3, [r7, #32]
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005740:	f001 f9fc 	bl	8006b3c <xTaskGetSchedulerState>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <xQueueGenericSend+0xa4>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <xQueueGenericSend+0xa8>
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <xQueueGenericSend+0xaa>
 8005754:	2300      	movs	r3, #0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10b      	bne.n	8005772 <xQueueGenericSend+0xc6>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	61fb      	str	r3, [r7, #28]
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	e7fd      	b.n	800576e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005772:	f001 ff19 	bl	80075a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <xQueueGenericSend+0xdc>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d129      	bne.n	80057dc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800578e:	f000 fa0d 	bl	8005bac <prvCopyDataToQueue>
 8005792:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d010      	beq.n	80057be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	3324      	adds	r3, #36	@ 0x24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 ffff 	bl	80067a4 <xTaskRemoveFromEventList>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d013      	beq.n	80057d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057ac:	4b3f      	ldr	r3, [pc, #252]	@ (80058ac <xQueueGenericSend+0x200>)
 80057ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	e00a      	b.n	80057d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057c4:	4b39      	ldr	r3, [pc, #228]	@ (80058ac <xQueueGenericSend+0x200>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057d4:	f001 ff1a 	bl	800760c <vPortExitCritical>
				return pdPASS;
 80057d8:	2301      	movs	r3, #1
 80057da:	e063      	b.n	80058a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057e2:	f001 ff13 	bl	800760c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e05c      	b.n	80058a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057f0:	f107 0314 	add.w	r3, r7, #20
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f839 	bl	800686c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057fe:	f001 ff05 	bl	800760c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005802:	f000 fd9b 	bl	800633c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005806:	f001 fecf 	bl	80075a8 <vPortEnterCritical>
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005810:	b25b      	sxtb	r3, r3
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005816:	d103      	bne.n	8005820 <xQueueGenericSend+0x174>
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005826:	b25b      	sxtb	r3, r3
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800582c:	d103      	bne.n	8005836 <xQueueGenericSend+0x18a>
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005836:	f001 fee9 	bl	800760c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800583a:	1d3a      	adds	r2, r7, #4
 800583c:	f107 0314 	add.w	r3, r7, #20
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f001 f828 	bl	8006898 <xTaskCheckForTimeOut>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d124      	bne.n	8005898 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800584e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005850:	f000 faa4 	bl	8005d9c <prvIsQueueFull>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d018      	beq.n	800588c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	3310      	adds	r3, #16
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f000 ff4c 	bl	8006700 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005868:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800586a:	f000 fa2f 	bl	8005ccc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800586e:	f000 fd73 	bl	8006358 <xTaskResumeAll>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	f47f af7c 	bne.w	8005772 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800587a:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <xQueueGenericSend+0x200>)
 800587c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	e772      	b.n	8005772 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800588c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800588e:	f000 fa1d 	bl	8005ccc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005892:	f000 fd61 	bl	8006358 <xTaskResumeAll>
 8005896:	e76c      	b.n	8005772 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800589a:	f000 fa17 	bl	8005ccc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800589e:	f000 fd5b 	bl	8006358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058a2:	2300      	movs	r3, #0
		}
	}
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3738      	adds	r7, #56	@ 0x38
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	e000ed04 	.word	0xe000ed04

080058b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08e      	sub	sp, #56	@ 0x38
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058da:	bf00      	nop
 80058dc:	bf00      	nop
 80058de:	e7fd      	b.n	80058dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <xQueueGenericSendFromISR+0x3e>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <xQueueGenericSendFromISR+0x42>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <xQueueGenericSendFromISR+0x44>
 80058f2:	2300      	movs	r3, #0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	623b      	str	r3, [r7, #32]
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	e7fd      	b.n	800590c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d103      	bne.n	800591e <xQueueGenericSendFromISR+0x6e>
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <xQueueGenericSendFromISR+0x72>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <xQueueGenericSendFromISR+0x74>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10b      	bne.n	8005940 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	61fb      	str	r3, [r7, #28]
}
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	e7fd      	b.n	800593c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005940:	f001 ff12 	bl	8007768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005944:	f3ef 8211 	mrs	r2, BASEPRI
 8005948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	61ba      	str	r2, [r7, #24]
 800595a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800595c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800595e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005962:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005968:	429a      	cmp	r2, r3
 800596a:	d302      	bcc.n	8005972 <xQueueGenericSendFromISR+0xc2>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d12c      	bne.n	80059cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005978:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005982:	f000 f913 	bl	8005bac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005986:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800598e:	d112      	bne.n	80059b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d016      	beq.n	80059c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	3324      	adds	r3, #36	@ 0x24
 800599c:	4618      	mov	r0, r3
 800599e:	f000 ff01 	bl	80067a4 <xTaskRemoveFromEventList>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00e      	beq.n	80059c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e007      	b.n	80059c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059ba:	3301      	adds	r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	b25a      	sxtb	r2, r3
 80059c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059c6:	2301      	movs	r3, #1
 80059c8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80059ca:	e001      	b.n	80059d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3738      	adds	r7, #56	@ 0x38
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08c      	sub	sp, #48	@ 0x30
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10b      	bne.n	8005a1a <xQueueReceive+0x32>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	623b      	str	r3, [r7, #32]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d103      	bne.n	8005a28 <xQueueReceive+0x40>
 8005a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <xQueueReceive+0x44>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <xQueueReceive+0x46>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10b      	bne.n	8005a4a <xQueueReceive+0x62>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	61fb      	str	r3, [r7, #28]
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	e7fd      	b.n	8005a46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a4a:	f001 f877 	bl	8006b3c <xTaskGetSchedulerState>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d102      	bne.n	8005a5a <xQueueReceive+0x72>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <xQueueReceive+0x76>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <xQueueReceive+0x78>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <xQueueReceive+0x94>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	61bb      	str	r3, [r7, #24]
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	e7fd      	b.n	8005a78 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a7c:	f001 fd94 	bl	80075a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01f      	beq.n	8005acc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a90:	f000 f8f6 	bl	8005c80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	1e5a      	subs	r2, r3, #1
 8005a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00f      	beq.n	8005ac4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	3310      	adds	r3, #16
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fe7b 	bl	80067a4 <xTaskRemoveFromEventList>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ba8 <xQueueReceive+0x1c0>)
 8005ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ac4:	f001 fda2 	bl	800760c <vPortExitCritical>
				return pdPASS;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e069      	b.n	8005ba0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ad2:	f001 fd9b 	bl	800760c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e062      	b.n	8005ba0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ae0:	f107 0310 	add.w	r3, r7, #16
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fec1 	bl	800686c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aea:	2301      	movs	r3, #1
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aee:	f001 fd8d 	bl	800760c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005af2:	f000 fc23 	bl	800633c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005af6:	f001 fd57 	bl	80075a8 <vPortEnterCritical>
 8005afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b06:	d103      	bne.n	8005b10 <xQueueReceive+0x128>
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b16:	b25b      	sxtb	r3, r3
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b1c:	d103      	bne.n	8005b26 <xQueueReceive+0x13e>
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b26:	f001 fd71 	bl	800760c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b2a:	1d3a      	adds	r2, r7, #4
 8005b2c:	f107 0310 	add.w	r3, r7, #16
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 feb0 	bl	8006898 <xTaskCheckForTimeOut>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d123      	bne.n	8005b86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b40:	f000 f916 	bl	8005d70 <prvIsQueueEmpty>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d017      	beq.n	8005b7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4c:	3324      	adds	r3, #36	@ 0x24
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	4611      	mov	r1, r2
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fdd4 	bl	8006700 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b5a:	f000 f8b7 	bl	8005ccc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b5e:	f000 fbfb 	bl	8006358 <xTaskResumeAll>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d189      	bne.n	8005a7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b68:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba8 <xQueueReceive+0x1c0>)
 8005b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	e780      	b.n	8005a7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b7c:	f000 f8a6 	bl	8005ccc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b80:	f000 fbea 	bl	8006358 <xTaskResumeAll>
 8005b84:	e77a      	b.n	8005a7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b88:	f000 f8a0 	bl	8005ccc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b8c:	f000 fbe4 	bl	8006358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b92:	f000 f8ed 	bl	8005d70 <prvIsQueueEmpty>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f43f af6f 	beq.w	8005a7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3730      	adds	r7, #48	@ 0x30
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10d      	bne.n	8005be6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d14d      	bne.n	8005c6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 ffce 	bl	8006b78 <xTaskPriorityDisinherit>
 8005bdc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	605a      	str	r2, [r3, #4]
 8005be4:	e043      	b.n	8005c6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d119      	bne.n	8005c20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6898      	ldr	r0, [r3, #8]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	f002 f88c 	bl	8007d14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c04:	441a      	add	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d32b      	bcc.n	8005c6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	609a      	str	r2, [r3, #8]
 8005c1e:	e026      	b.n	8005c6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68d8      	ldr	r0, [r3, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	f002 f872 	bl	8007d14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c38:	425b      	negs	r3, r3
 8005c3a:	441a      	add	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d207      	bcs.n	8005c5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	425b      	negs	r3, r3
 8005c56:	441a      	add	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d105      	bne.n	8005c6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c76:	697b      	ldr	r3, [r7, #20]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d018      	beq.n	8005cc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9a:	441a      	add	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d303      	bcc.n	8005cb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68d9      	ldr	r1, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6838      	ldr	r0, [r7, #0]
 8005cc0:	f002 f828 	bl	8007d14 <memcpy>
	}
}
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cd4:	f001 fc68 	bl	80075a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ce0:	e011      	b.n	8005d06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d012      	beq.n	8005d10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3324      	adds	r3, #36	@ 0x24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fd58 	bl	80067a4 <xTaskRemoveFromEventList>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cfa:	f000 fe31 	bl	8006960 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	dce9      	bgt.n	8005ce2 <prvUnlockQueue+0x16>
 8005d0e:	e000      	b.n	8005d12 <prvUnlockQueue+0x46>
					break;
 8005d10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	22ff      	movs	r2, #255	@ 0xff
 8005d16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d1a:	f001 fc77 	bl	800760c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d1e:	f001 fc43 	bl	80075a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d2a:	e011      	b.n	8005d50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d012      	beq.n	8005d5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3310      	adds	r3, #16
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fd33 	bl	80067a4 <xTaskRemoveFromEventList>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d44:	f000 fe0c 	bl	8006960 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	dce9      	bgt.n	8005d2c <prvUnlockQueue+0x60>
 8005d58:	e000      	b.n	8005d5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	22ff      	movs	r2, #255	@ 0xff
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d64:	f001 fc52 	bl	800760c <vPortExitCritical>
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d78:	f001 fc16 	bl	80075a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e001      	b.n	8005d8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d8e:	f001 fc3d 	bl	800760c <vPortExitCritical>

	return xReturn;
 8005d92:	68fb      	ldr	r3, [r7, #12]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005da4:	f001 fc00 	bl	80075a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d102      	bne.n	8005dba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e001      	b.n	8005dbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dbe:	f001 fc25 	bl	800760c <vPortExitCritical>

	return xReturn;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e014      	b.n	8005e06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8005e1c <vQueueAddToRegistry+0x50>)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005de8:	490c      	ldr	r1, [pc, #48]	@ (8005e1c <vQueueAddToRegistry+0x50>)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005df2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <vQueueAddToRegistry+0x50>)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dfe:	e006      	b.n	8005e0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b07      	cmp	r3, #7
 8005e0a:	d9e7      	bls.n	8005ddc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	200020a0 	.word	0x200020a0

08005e20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e30:	f001 fbba 	bl	80075a8 <vPortEnterCritical>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e3a:	b25b      	sxtb	r3, r3
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e40:	d103      	bne.n	8005e4a <vQueueWaitForMessageRestricted+0x2a>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e50:	b25b      	sxtb	r3, r3
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e56:	d103      	bne.n	8005e60 <vQueueWaitForMessageRestricted+0x40>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e60:	f001 fbd4 	bl	800760c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	3324      	adds	r3, #36	@ 0x24
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fc69 	bl	800674c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	f7ff ff26 	bl	8005ccc <prvUnlockQueue>
	}
 8005e80:	bf00      	nop
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08e      	sub	sp, #56	@ 0x38
 8005e8c:	af04      	add	r7, sp, #16
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	623b      	str	r3, [r7, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	e7fd      	b.n	8005eb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	61fb      	str	r3, [r7, #28]
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	e7fd      	b.n	8005ece <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ed2:	23a8      	movs	r3, #168	@ 0xa8
 8005ed4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2ba8      	cmp	r3, #168	@ 0xa8
 8005eda:	d00b      	beq.n	8005ef4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	61bb      	str	r3, [r7, #24]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01e      	beq.n	8005f38 <xTaskCreateStatic+0xb0>
 8005efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f02:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f08:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f12:	2300      	movs	r3, #0
 8005f14:	9303      	str	r3, [sp, #12]
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	9302      	str	r3, [sp, #8]
 8005f1a:	f107 0314 	add.w	r3, r7, #20
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f850 	bl	8005fd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f32:	f000 f8ed 	bl	8006110 <prvAddNewTaskToReadyList>
 8005f36:	e001      	b.n	8005f3c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f3c:	697b      	ldr	r3, [r7, #20]
	}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3728      	adds	r7, #40	@ 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b08c      	sub	sp, #48	@ 0x30
 8005f4a:	af04      	add	r7, sp, #16
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 fc46 	bl	80077ec <pvPortMalloc>
 8005f60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00e      	beq.n	8005f86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f68:	20a8      	movs	r0, #168	@ 0xa8
 8005f6a:	f001 fc3f 	bl	80077ec <pvPortMalloc>
 8005f6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f7c:	e005      	b.n	8005f8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f7e:	6978      	ldr	r0, [r7, #20]
 8005f80:	f001 fcfc 	bl	800797c <vPortFree>
 8005f84:	e001      	b.n	8005f8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d017      	beq.n	8005fc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f98:	88fa      	ldrh	r2, [r7, #6]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9303      	str	r3, [sp, #12]
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	9302      	str	r3, [sp, #8]
 8005fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f80e 	bl	8005fd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fb4:	69f8      	ldr	r0, [r7, #28]
 8005fb6:	f000 f8ab 	bl	8006110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e002      	b.n	8005fc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
	}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	21a5      	movs	r1, #165	@ 0xa5
 8005fea:	f001 fe01 	bl	8007bf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f023 0307 	bic.w	r3, r3, #7
 8006006:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	617b      	str	r3, [r7, #20]
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	e7fd      	b.n	8006026 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	e012      	b.n	8006056 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	7819      	ldrb	r1, [r3, #0]
 8006038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	3334      	adds	r3, #52	@ 0x34
 8006040:	460a      	mov	r2, r1
 8006042:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d006      	beq.n	800605e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	3301      	adds	r3, #1
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	2b0f      	cmp	r3, #15
 800605a:	d9e9      	bls.n	8006030 <prvInitialiseNewTask+0x60>
 800605c:	e000      	b.n	8006060 <prvInitialiseNewTask+0x90>
		{
			break;
 800605e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606a:	2b37      	cmp	r3, #55	@ 0x37
 800606c:	d901      	bls.n	8006072 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800606e:	2337      	movs	r3, #55	@ 0x37
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006076:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800607c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	2200      	movs	r2, #0
 8006082:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	3304      	adds	r3, #4
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff f971 	bl	8005370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	3318      	adds	r3, #24
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff f96c 	bl	8005370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800609c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	3354      	adds	r3, #84	@ 0x54
 80060c2:	224c      	movs	r2, #76	@ 0x4c
 80060c4:	2100      	movs	r1, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 fd92 	bl	8007bf0 <memset>
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006104 <prvInitialiseNewTask+0x134>)
 80060d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006108 <prvInitialiseNewTask+0x138>)
 80060d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	4a0c      	ldr	r2, [pc, #48]	@ (800610c <prvInitialiseNewTask+0x13c>)
 80060dc:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	69b8      	ldr	r0, [r7, #24]
 80060e4:	f001 f92c 	bl	8007340 <pxPortInitialiseStack>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060fa:	bf00      	nop
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	2000332c 	.word	0x2000332c
 8006108:	20003394 	.word	0x20003394
 800610c:	200033fc 	.word	0x200033fc

08006110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006118:	f001 fa46 	bl	80075a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800611c:	4b2d      	ldr	r3, [pc, #180]	@ (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	4a2c      	ldr	r2, [pc, #176]	@ (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006126:	4b2c      	ldr	r3, [pc, #176]	@ (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800612e:	4a2a      	ldr	r2, [pc, #168]	@ (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006134:	4b27      	ldr	r3, [pc, #156]	@ (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d110      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800613c:	f000 fc34 	bl	80069a8 <prvInitialiseTaskLists>
 8006140:	e00d      	b.n	800615e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006142:	4b26      	ldr	r3, [pc, #152]	@ (80061dc <prvAddNewTaskToReadyList+0xcc>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800614a:	4b23      	ldr	r3, [pc, #140]	@ (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	429a      	cmp	r2, r3
 8006156:	d802      	bhi.n	800615e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006158:	4a1f      	ldr	r2, [pc, #124]	@ (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800615e:	4b20      	ldr	r3, [pc, #128]	@ (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3301      	adds	r3, #1
 8006164:	4a1e      	ldr	r2, [pc, #120]	@ (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 8006166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006168:	4b1d      	ldr	r3, [pc, #116]	@ (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006174:	4b1b      	ldr	r3, [pc, #108]	@ (80061e4 <prvAddNewTaskToReadyList+0xd4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d903      	bls.n	8006184 <prvAddNewTaskToReadyList+0x74>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	4a18      	ldr	r2, [pc, #96]	@ (80061e4 <prvAddNewTaskToReadyList+0xd4>)
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a15      	ldr	r2, [pc, #84]	@ (80061e8 <prvAddNewTaskToReadyList+0xd8>)
 8006192:	441a      	add	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7ff f8f5 	bl	800538a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061a0:	f001 fa34 	bl	800760c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061a4:	4b0d      	ldr	r3, [pc, #52]	@ (80061dc <prvAddNewTaskToReadyList+0xcc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061ac:	4b0a      	ldr	r3, [pc, #40]	@ (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d207      	bcs.n	80061ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061ba:	4b0c      	ldr	r3, [pc, #48]	@ (80061ec <prvAddNewTaskToReadyList+0xdc>)
 80061bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	200025b4 	.word	0x200025b4
 80061d8:	200020e0 	.word	0x200020e0
 80061dc:	200025c0 	.word	0x200025c0
 80061e0:	200025d0 	.word	0x200025d0
 80061e4:	200025bc 	.word	0x200025bc
 80061e8:	200020e4 	.word	0x200020e4
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d018      	beq.n	8006234 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006202:	4b14      	ldr	r3, [pc, #80]	@ (8006254 <vTaskDelay+0x64>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <vTaskDelay+0x32>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	60bb      	str	r3, [r7, #8]
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	e7fd      	b.n	800621e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006222:	f000 f88b 	bl	800633c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006226:	2100      	movs	r1, #0
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fd15 	bl	8006c58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800622e:	f000 f893 	bl	8006358 <xTaskResumeAll>
 8006232:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d107      	bne.n	800624a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800623a:	4b07      	ldr	r3, [pc, #28]	@ (8006258 <vTaskDelay+0x68>)
 800623c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800624a:	bf00      	nop
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	200025dc 	.word	0x200025dc
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	@ 0x28
 8006260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800626a:	463a      	mov	r2, r7
 800626c:	1d39      	adds	r1, r7, #4
 800626e:	f107 0308 	add.w	r3, r7, #8
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff f828 	bl	80052c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	9202      	str	r2, [sp, #8]
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	2300      	movs	r3, #0
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	2300      	movs	r3, #0
 8006288:	460a      	mov	r2, r1
 800628a:	4924      	ldr	r1, [pc, #144]	@ (800631c <vTaskStartScheduler+0xc0>)
 800628c:	4824      	ldr	r0, [pc, #144]	@ (8006320 <vTaskStartScheduler+0xc4>)
 800628e:	f7ff fdfb 	bl	8005e88 <xTaskCreateStatic>
 8006292:	4603      	mov	r3, r0
 8006294:	4a23      	ldr	r2, [pc, #140]	@ (8006324 <vTaskStartScheduler+0xc8>)
 8006296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006298:	4b22      	ldr	r3, [pc, #136]	@ (8006324 <vTaskStartScheduler+0xc8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062a0:	2301      	movs	r3, #1
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	e001      	b.n	80062aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d102      	bne.n	80062b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062b0:	f000 fd26 	bl	8006d00 <xTimerCreateTimerTask>
 80062b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d11b      	bne.n	80062f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	613b      	str	r3, [r7, #16]
}
 80062ce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062d0:	4b15      	ldr	r3, [pc, #84]	@ (8006328 <vTaskStartScheduler+0xcc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3354      	adds	r3, #84	@ 0x54
 80062d6:	4a15      	ldr	r2, [pc, #84]	@ (800632c <vTaskStartScheduler+0xd0>)
 80062d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062da:	4b15      	ldr	r3, [pc, #84]	@ (8006330 <vTaskStartScheduler+0xd4>)
 80062dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062e2:	4b14      	ldr	r3, [pc, #80]	@ (8006334 <vTaskStartScheduler+0xd8>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062e8:	4b13      	ldr	r3, [pc, #76]	@ (8006338 <vTaskStartScheduler+0xdc>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062ee:	f001 f8b7 	bl	8007460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062f2:	e00f      	b.n	8006314 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062fa:	d10b      	bne.n	8006314 <vTaskStartScheduler+0xb8>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60fb      	str	r3, [r7, #12]
}
 800630e:	bf00      	nop
 8006310:	bf00      	nop
 8006312:	e7fd      	b.n	8006310 <vTaskStartScheduler+0xb4>
}
 8006314:	bf00      	nop
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	08008620 	.word	0x08008620
 8006320:	08006979 	.word	0x08006979
 8006324:	200025d8 	.word	0x200025d8
 8006328:	200020e0 	.word	0x200020e0
 800632c:	20000014 	.word	0x20000014
 8006330:	200025d4 	.word	0x200025d4
 8006334:	200025c0 	.word	0x200025c0
 8006338:	200025b8 	.word	0x200025b8

0800633c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006340:	4b04      	ldr	r3, [pc, #16]	@ (8006354 <vTaskSuspendAll+0x18>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3301      	adds	r3, #1
 8006346:	4a03      	ldr	r2, [pc, #12]	@ (8006354 <vTaskSuspendAll+0x18>)
 8006348:	6013      	str	r3, [r2, #0]
}
 800634a:	bf00      	nop
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	200025dc 	.word	0x200025dc

08006358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006366:	4b42      	ldr	r3, [pc, #264]	@ (8006470 <xTaskResumeAll+0x118>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <xTaskResumeAll+0x2e>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	603b      	str	r3, [r7, #0]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006386:	f001 f90f 	bl	80075a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800638a:	4b39      	ldr	r3, [pc, #228]	@ (8006470 <xTaskResumeAll+0x118>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3b01      	subs	r3, #1
 8006390:	4a37      	ldr	r2, [pc, #220]	@ (8006470 <xTaskResumeAll+0x118>)
 8006392:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006394:	4b36      	ldr	r3, [pc, #216]	@ (8006470 <xTaskResumeAll+0x118>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d162      	bne.n	8006462 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800639c:	4b35      	ldr	r3, [pc, #212]	@ (8006474 <xTaskResumeAll+0x11c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05e      	beq.n	8006462 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063a4:	e02f      	b.n	8006406 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063a6:	4b34      	ldr	r3, [pc, #208]	@ (8006478 <xTaskResumeAll+0x120>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3318      	adds	r3, #24
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff f846 	bl	8005444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff f841 	bl	8005444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c6:	4b2d      	ldr	r3, [pc, #180]	@ (800647c <xTaskResumeAll+0x124>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d903      	bls.n	80063d6 <xTaskResumeAll+0x7e>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	4a2a      	ldr	r2, [pc, #168]	@ (800647c <xTaskResumeAll+0x124>)
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4a27      	ldr	r2, [pc, #156]	@ (8006480 <xTaskResumeAll+0x128>)
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f7fe ffcc 	bl	800538a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f6:	4b23      	ldr	r3, [pc, #140]	@ (8006484 <xTaskResumeAll+0x12c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006400:	4b21      	ldr	r3, [pc, #132]	@ (8006488 <xTaskResumeAll+0x130>)
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006406:	4b1c      	ldr	r3, [pc, #112]	@ (8006478 <xTaskResumeAll+0x120>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1cb      	bne.n	80063a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006414:	f000 fb6c 	bl	8006af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006418:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <xTaskResumeAll+0x134>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d010      	beq.n	8006446 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006424:	f000 f846 	bl	80064b4 <xTaskIncrementTick>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800642e:	4b16      	ldr	r3, [pc, #88]	@ (8006488 <xTaskResumeAll+0x130>)
 8006430:	2201      	movs	r2, #1
 8006432:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3b01      	subs	r3, #1
 8006438:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f1      	bne.n	8006424 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006440:	4b12      	ldr	r3, [pc, #72]	@ (800648c <xTaskResumeAll+0x134>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006446:	4b10      	ldr	r3, [pc, #64]	@ (8006488 <xTaskResumeAll+0x130>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006452:	4b0f      	ldr	r3, [pc, #60]	@ (8006490 <xTaskResumeAll+0x138>)
 8006454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006462:	f001 f8d3 	bl	800760c <vPortExitCritical>

	return xAlreadyYielded;
 8006466:	68bb      	ldr	r3, [r7, #8]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200025dc 	.word	0x200025dc
 8006474:	200025b4 	.word	0x200025b4
 8006478:	20002574 	.word	0x20002574
 800647c:	200025bc 	.word	0x200025bc
 8006480:	200020e4 	.word	0x200020e4
 8006484:	200020e0 	.word	0x200020e0
 8006488:	200025c8 	.word	0x200025c8
 800648c:	200025c4 	.word	0x200025c4
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800649a:	4b05      	ldr	r3, [pc, #20]	@ (80064b0 <xTaskGetTickCount+0x1c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064a0:	687b      	ldr	r3, [r7, #4]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	200025b8 	.word	0x200025b8

080064b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064be:	4b52      	ldr	r3, [pc, #328]	@ (8006608 <xTaskIncrementTick+0x154>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f040 808f 	bne.w	80065e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064c8:	4b50      	ldr	r3, [pc, #320]	@ (800660c <xTaskIncrementTick+0x158>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064d0:	4a4e      	ldr	r2, [pc, #312]	@ (800660c <xTaskIncrementTick+0x158>)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d121      	bne.n	8006520 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80064dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006610 <xTaskIncrementTick+0x15c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00b      	beq.n	80064fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	603b      	str	r3, [r7, #0]
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	e7fd      	b.n	80064fa <xTaskIncrementTick+0x46>
 80064fe:	4b44      	ldr	r3, [pc, #272]	@ (8006610 <xTaskIncrementTick+0x15c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	4b43      	ldr	r3, [pc, #268]	@ (8006614 <xTaskIncrementTick+0x160>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a41      	ldr	r2, [pc, #260]	@ (8006610 <xTaskIncrementTick+0x15c>)
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4a41      	ldr	r2, [pc, #260]	@ (8006614 <xTaskIncrementTick+0x160>)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	4b41      	ldr	r3, [pc, #260]	@ (8006618 <xTaskIncrementTick+0x164>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	4a3f      	ldr	r2, [pc, #252]	@ (8006618 <xTaskIncrementTick+0x164>)
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	f000 fae8 	bl	8006af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006520:	4b3e      	ldr	r3, [pc, #248]	@ (800661c <xTaskIncrementTick+0x168>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	429a      	cmp	r2, r3
 8006528:	d34e      	bcc.n	80065c8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800652a:	4b39      	ldr	r3, [pc, #228]	@ (8006610 <xTaskIncrementTick+0x15c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <xTaskIncrementTick+0x84>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <xTaskIncrementTick+0x86>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653e:	4b37      	ldr	r3, [pc, #220]	@ (800661c <xTaskIncrementTick+0x168>)
 8006540:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006544:	601a      	str	r2, [r3, #0]
					break;
 8006546:	e03f      	b.n	80065c8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006548:	4b31      	ldr	r3, [pc, #196]	@ (8006610 <xTaskIncrementTick+0x15c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	429a      	cmp	r2, r3
 800655e:	d203      	bcs.n	8006568 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006560:	4a2e      	ldr	r2, [pc, #184]	@ (800661c <xTaskIncrementTick+0x168>)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6013      	str	r3, [r2, #0]
						break;
 8006566:	e02f      	b.n	80065c8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	3304      	adds	r3, #4
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe ff69 	bl	8005444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	d004      	beq.n	8006584 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	3318      	adds	r3, #24
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe ff60 	bl	8005444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006588:	4b25      	ldr	r3, [pc, #148]	@ (8006620 <xTaskIncrementTick+0x16c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d903      	bls.n	8006598 <xTaskIncrementTick+0xe4>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	4a22      	ldr	r2, [pc, #136]	@ (8006620 <xTaskIncrementTick+0x16c>)
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006624 <xTaskIncrementTick+0x170>)
 80065a6:	441a      	add	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7fe feeb 	bl	800538a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006628 <xTaskIncrementTick+0x174>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065be:	429a      	cmp	r2, r3
 80065c0:	d3b3      	bcc.n	800652a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80065c2:	2301      	movs	r3, #1
 80065c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065c6:	e7b0      	b.n	800652a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065c8:	4b17      	ldr	r3, [pc, #92]	@ (8006628 <xTaskIncrementTick+0x174>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ce:	4915      	ldr	r1, [pc, #84]	@ (8006624 <xTaskIncrementTick+0x170>)
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d907      	bls.n	80065f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e004      	b.n	80065f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80065e6:	4b11      	ldr	r3, [pc, #68]	@ (800662c <xTaskIncrementTick+0x178>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3301      	adds	r3, #1
 80065ec:	4a0f      	ldr	r2, [pc, #60]	@ (800662c <xTaskIncrementTick+0x178>)
 80065ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80065f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006630 <xTaskIncrementTick+0x17c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80065f8:	2301      	movs	r3, #1
 80065fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065fc:	697b      	ldr	r3, [r7, #20]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200025dc 	.word	0x200025dc
 800660c:	200025b8 	.word	0x200025b8
 8006610:	2000256c 	.word	0x2000256c
 8006614:	20002570 	.word	0x20002570
 8006618:	200025cc 	.word	0x200025cc
 800661c:	200025d4 	.word	0x200025d4
 8006620:	200025bc 	.word	0x200025bc
 8006624:	200020e4 	.word	0x200020e4
 8006628:	200020e0 	.word	0x200020e0
 800662c:	200025c4 	.word	0x200025c4
 8006630:	200025c8 	.word	0x200025c8

08006634 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800663a:	4b2b      	ldr	r3, [pc, #172]	@ (80066e8 <vTaskSwitchContext+0xb4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006642:	4b2a      	ldr	r3, [pc, #168]	@ (80066ec <vTaskSwitchContext+0xb8>)
 8006644:	2201      	movs	r2, #1
 8006646:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006648:	e047      	b.n	80066da <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800664a:	4b28      	ldr	r3, [pc, #160]	@ (80066ec <vTaskSwitchContext+0xb8>)
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006650:	4b27      	ldr	r3, [pc, #156]	@ (80066f0 <vTaskSwitchContext+0xbc>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e011      	b.n	800667c <vTaskSwitchContext+0x48>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <vTaskSwitchContext+0x42>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	607b      	str	r3, [r7, #4]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <vTaskSwitchContext+0x3e>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3b01      	subs	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	491d      	ldr	r1, [pc, #116]	@ (80066f4 <vTaskSwitchContext+0xc0>)
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0e3      	beq.n	8006658 <vTaskSwitchContext+0x24>
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4a16      	ldr	r2, [pc, #88]	@ (80066f4 <vTaskSwitchContext+0xc0>)
 800669c:	4413      	add	r3, r2
 800669e:	60bb      	str	r3, [r7, #8]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	3308      	adds	r3, #8
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d104      	bne.n	80066c0 <vTaskSwitchContext+0x8c>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	4a0c      	ldr	r2, [pc, #48]	@ (80066f8 <vTaskSwitchContext+0xc4>)
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	4a09      	ldr	r2, [pc, #36]	@ (80066f0 <vTaskSwitchContext+0xbc>)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066d0:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <vTaskSwitchContext+0xc4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3354      	adds	r3, #84	@ 0x54
 80066d6:	4a09      	ldr	r2, [pc, #36]	@ (80066fc <vTaskSwitchContext+0xc8>)
 80066d8:	6013      	str	r3, [r2, #0]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	200025dc 	.word	0x200025dc
 80066ec:	200025c8 	.word	0x200025c8
 80066f0:	200025bc 	.word	0x200025bc
 80066f4:	200020e4 	.word	0x200020e4
 80066f8:	200020e0 	.word	0x200020e0
 80066fc:	20000014 	.word	0x20000014

08006700 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	60fb      	str	r3, [r7, #12]
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006728:	4b07      	ldr	r3, [pc, #28]	@ (8006748 <vTaskPlaceOnEventList+0x48>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3318      	adds	r3, #24
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7fe fe4e 	bl	80053d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006736:	2101      	movs	r1, #1
 8006738:	6838      	ldr	r0, [r7, #0]
 800673a:	f000 fa8d 	bl	8006c58 <prvAddCurrentTaskToDelayedList>
}
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	200020e0 	.word	0x200020e0

0800674c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	617b      	str	r3, [r7, #20]
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006776:	4b0a      	ldr	r3, [pc, #40]	@ (80067a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3318      	adds	r3, #24
 800677c:	4619      	mov	r1, r3
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7fe fe03 	bl	800538a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800678e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	68b8      	ldr	r0, [r7, #8]
 8006794:	f000 fa60 	bl	8006c58 <prvAddCurrentTaskToDelayedList>
	}
 8006798:	bf00      	nop
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200020e0 	.word	0x200020e0

080067a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	60fb      	str	r3, [r7, #12]
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	e7fd      	b.n	80067ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3318      	adds	r3, #24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe fe34 	bl	8005444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006854 <xTaskRemoveFromEventList+0xb0>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d11d      	bne.n	8006820 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe fe2b 	bl	8005444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f2:	4b19      	ldr	r3, [pc, #100]	@ (8006858 <xTaskRemoveFromEventList+0xb4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d903      	bls.n	8006802 <xTaskRemoveFromEventList+0x5e>
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fe:	4a16      	ldr	r2, [pc, #88]	@ (8006858 <xTaskRemoveFromEventList+0xb4>)
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4a13      	ldr	r2, [pc, #76]	@ (800685c <xTaskRemoveFromEventList+0xb8>)
 8006810:	441a      	add	r2, r3
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3304      	adds	r3, #4
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f7fe fdb6 	bl	800538a <vListInsertEnd>
 800681e:	e005      	b.n	800682c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3318      	adds	r3, #24
 8006824:	4619      	mov	r1, r3
 8006826:	480e      	ldr	r0, [pc, #56]	@ (8006860 <xTaskRemoveFromEventList+0xbc>)
 8006828:	f7fe fdaf 	bl	800538a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006830:	4b0c      	ldr	r3, [pc, #48]	@ (8006864 <xTaskRemoveFromEventList+0xc0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	429a      	cmp	r2, r3
 8006838:	d905      	bls.n	8006846 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800683a:	2301      	movs	r3, #1
 800683c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800683e:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <xTaskRemoveFromEventList+0xc4>)
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e001      	b.n	800684a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800684a:	697b      	ldr	r3, [r7, #20]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	200025dc 	.word	0x200025dc
 8006858:	200025bc 	.word	0x200025bc
 800685c:	200020e4 	.word	0x200020e4
 8006860:	20002574 	.word	0x20002574
 8006864:	200020e0 	.word	0x200020e0
 8006868:	200025c8 	.word	0x200025c8

0800686c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006874:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <vTaskInternalSetTimeOutState+0x24>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800687c:	4b05      	ldr	r3, [pc, #20]	@ (8006894 <vTaskInternalSetTimeOutState+0x28>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	605a      	str	r2, [r3, #4]
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	200025cc 	.word	0x200025cc
 8006894:	200025b8 	.word	0x200025b8

08006898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	613b      	str	r3, [r7, #16]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	60fb      	str	r3, [r7, #12]
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	e7fd      	b.n	80068da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80068de:	f000 fe63 	bl	80075a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <xTaskCheckForTimeOut+0xc0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068fa:	d102      	bne.n	8006902 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	e023      	b.n	800694a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	4b15      	ldr	r3, [pc, #84]	@ (800695c <xTaskCheckForTimeOut+0xc4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d007      	beq.n	800691e <xTaskCheckForTimeOut+0x86>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	429a      	cmp	r2, r3
 8006916:	d302      	bcc.n	800691e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	61fb      	str	r3, [r7, #28]
 800691c:	e015      	b.n	800694a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	429a      	cmp	r2, r3
 8006926:	d20b      	bcs.n	8006940 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ff99 	bl	800686c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	e004      	b.n	800694a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006946:	2301      	movs	r3, #1
 8006948:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800694a:	f000 fe5f 	bl	800760c <vPortExitCritical>

	return xReturn;
 800694e:	69fb      	ldr	r3, [r7, #28]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	200025b8 	.word	0x200025b8
 800695c:	200025cc 	.word	0x200025cc

08006960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006964:	4b03      	ldr	r3, [pc, #12]	@ (8006974 <vTaskMissedYield+0x14>)
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]
}
 800696a:	bf00      	nop
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	200025c8 	.word	0x200025c8

08006978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006980:	f000 f852 	bl	8006a28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006984:	4b06      	ldr	r3, [pc, #24]	@ (80069a0 <prvIdleTask+0x28>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d9f9      	bls.n	8006980 <prvIdleTask+0x8>
			{
				taskYIELD();
 800698c:	4b05      	ldr	r3, [pc, #20]	@ (80069a4 <prvIdleTask+0x2c>)
 800698e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800699c:	e7f0      	b.n	8006980 <prvIdleTask+0x8>
 800699e:	bf00      	nop
 80069a0:	200020e4 	.word	0x200020e4
 80069a4:	e000ed04 	.word	0xe000ed04

080069a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ae:	2300      	movs	r3, #0
 80069b0:	607b      	str	r3, [r7, #4]
 80069b2:	e00c      	b.n	80069ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4a12      	ldr	r2, [pc, #72]	@ (8006a08 <prvInitialiseTaskLists+0x60>)
 80069c0:	4413      	add	r3, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe fcb4 	bl	8005330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3301      	adds	r3, #1
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b37      	cmp	r3, #55	@ 0x37
 80069d2:	d9ef      	bls.n	80069b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069d4:	480d      	ldr	r0, [pc, #52]	@ (8006a0c <prvInitialiseTaskLists+0x64>)
 80069d6:	f7fe fcab 	bl	8005330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069da:	480d      	ldr	r0, [pc, #52]	@ (8006a10 <prvInitialiseTaskLists+0x68>)
 80069dc:	f7fe fca8 	bl	8005330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069e0:	480c      	ldr	r0, [pc, #48]	@ (8006a14 <prvInitialiseTaskLists+0x6c>)
 80069e2:	f7fe fca5 	bl	8005330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069e6:	480c      	ldr	r0, [pc, #48]	@ (8006a18 <prvInitialiseTaskLists+0x70>)
 80069e8:	f7fe fca2 	bl	8005330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069ec:	480b      	ldr	r0, [pc, #44]	@ (8006a1c <prvInitialiseTaskLists+0x74>)
 80069ee:	f7fe fc9f 	bl	8005330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <prvInitialiseTaskLists+0x78>)
 80069f4:	4a05      	ldr	r2, [pc, #20]	@ (8006a0c <prvInitialiseTaskLists+0x64>)
 80069f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006a24 <prvInitialiseTaskLists+0x7c>)
 80069fa:	4a05      	ldr	r2, [pc, #20]	@ (8006a10 <prvInitialiseTaskLists+0x68>)
 80069fc:	601a      	str	r2, [r3, #0]
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200020e4 	.word	0x200020e4
 8006a0c:	20002544 	.word	0x20002544
 8006a10:	20002558 	.word	0x20002558
 8006a14:	20002574 	.word	0x20002574
 8006a18:	20002588 	.word	0x20002588
 8006a1c:	200025a0 	.word	0x200025a0
 8006a20:	2000256c 	.word	0x2000256c
 8006a24:	20002570 	.word	0x20002570

08006a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a2e:	e019      	b.n	8006a64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a30:	f000 fdba 	bl	80075a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a34:	4b10      	ldr	r3, [pc, #64]	@ (8006a78 <prvCheckTasksWaitingTermination+0x50>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe fcff 	bl	8005444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a46:	4b0d      	ldr	r3, [pc, #52]	@ (8006a7c <prvCheckTasksWaitingTermination+0x54>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006a7c <prvCheckTasksWaitingTermination+0x54>)
 8006a4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a50:	4b0b      	ldr	r3, [pc, #44]	@ (8006a80 <prvCheckTasksWaitingTermination+0x58>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	4a0a      	ldr	r2, [pc, #40]	@ (8006a80 <prvCheckTasksWaitingTermination+0x58>)
 8006a58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a5a:	f000 fdd7 	bl	800760c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f810 	bl	8006a84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a64:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <prvCheckTasksWaitingTermination+0x58>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e1      	bne.n	8006a30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20002588 	.word	0x20002588
 8006a7c:	200025b4 	.word	0x200025b4
 8006a80:	2000259c 	.word	0x2000259c

08006a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3354      	adds	r3, #84	@ 0x54
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 f8b5 	bl	8007c00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d108      	bne.n	8006ab2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 ff69 	bl	800797c <vPortFree>
				vPortFree( pxTCB );
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 ff66 	bl	800797c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ab0:	e019      	b.n	8006ae6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d103      	bne.n	8006ac4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 ff5d 	bl	800797c <vPortFree>
	}
 8006ac2:	e010      	b.n	8006ae6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d00b      	beq.n	8006ae6 <prvDeleteTCB+0x62>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60fb      	str	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	e7fd      	b.n	8006ae2 <prvDeleteTCB+0x5e>
	}
 8006ae6:	bf00      	nop
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006af6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b34 <prvResetNextTaskUnblockTime+0x44>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <prvResetNextTaskUnblockTime+0x14>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <prvResetNextTaskUnblockTime+0x16>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <prvResetNextTaskUnblockTime+0x48>)
 8006b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b12:	e008      	b.n	8006b26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b14:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <prvResetNextTaskUnblockTime+0x44>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4a05      	ldr	r2, [pc, #20]	@ (8006b38 <prvResetNextTaskUnblockTime+0x48>)
 8006b24:	6013      	str	r3, [r2, #0]
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	2000256c 	.word	0x2000256c
 8006b38:	200025d4 	.word	0x200025d4

08006b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b42:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <xTaskGetSchedulerState+0x34>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	607b      	str	r3, [r7, #4]
 8006b4e:	e008      	b.n	8006b62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b50:	4b08      	ldr	r3, [pc, #32]	@ (8006b74 <xTaskGetSchedulerState+0x38>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d102      	bne.n	8006b5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	607b      	str	r3, [r7, #4]
 8006b5c:	e001      	b.n	8006b62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b62:	687b      	ldr	r3, [r7, #4]
	}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	200025c0 	.word	0x200025c0
 8006b74:	200025dc 	.word	0x200025dc

08006b78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d058      	beq.n	8006c40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c4c <xTaskPriorityDisinherit+0xd4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d00b      	beq.n	8006bb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60fb      	str	r3, [r7, #12]
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	e7fd      	b.n	8006bac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10b      	bne.n	8006bd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	60bb      	str	r3, [r7, #8]
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	e7fd      	b.n	8006bcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd4:	1e5a      	subs	r2, r3, #1
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d02c      	beq.n	8006c40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d128      	bne.n	8006c40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fc26 	bl	8005444 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c10:	4b0f      	ldr	r3, [pc, #60]	@ (8006c50 <xTaskPriorityDisinherit+0xd8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d903      	bls.n	8006c20 <xTaskPriorityDisinherit+0xa8>
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c50 <xTaskPriorityDisinherit+0xd8>)
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4a09      	ldr	r2, [pc, #36]	@ (8006c54 <xTaskPriorityDisinherit+0xdc>)
 8006c2e:	441a      	add	r2, r3
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	3304      	adds	r3, #4
 8006c34:	4619      	mov	r1, r3
 8006c36:	4610      	mov	r0, r2
 8006c38:	f7fe fba7 	bl	800538a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c40:	697b      	ldr	r3, [r7, #20]
	}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200020e0 	.word	0x200020e0
 8006c50:	200025bc 	.word	0x200025bc
 8006c54:	200020e4 	.word	0x200020e4

08006c58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c62:	4b21      	ldr	r3, [pc, #132]	@ (8006ce8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c68:	4b20      	ldr	r3, [pc, #128]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe fbe8 	bl	8005444 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c7a:	d10a      	bne.n	8006c92 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c82:	4b1a      	ldr	r3, [pc, #104]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4819      	ldr	r0, [pc, #100]	@ (8006cf0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c8c:	f7fe fb7d 	bl	800538a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c90:	e026      	b.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4413      	add	r3, r2
 8006c98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c9a:	4b14      	ldr	r3, [pc, #80]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d209      	bcs.n	8006cbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006caa:	4b12      	ldr	r3, [pc, #72]	@ (8006cf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b0f      	ldr	r3, [pc, #60]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f7fe fb8b 	bl	80053d2 <vListInsert>
}
 8006cbc:	e010      	b.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f7fe fb81 	bl	80053d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d202      	bcs.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cda:	4a08      	ldr	r2, [pc, #32]	@ (8006cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6013      	str	r3, [r2, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200025b8 	.word	0x200025b8
 8006cec:	200020e0 	.word	0x200020e0
 8006cf0:	200025a0 	.word	0x200025a0
 8006cf4:	20002570 	.word	0x20002570
 8006cf8:	2000256c 	.word	0x2000256c
 8006cfc:	200025d4 	.word	0x200025d4

08006d00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	@ 0x28
 8006d04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d0a:	f000 fad9 	bl	80072c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d84 <xTimerCreateTimerTask+0x84>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d021      	beq.n	8006d5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d1e:	1d3a      	adds	r2, r7, #4
 8006d20:	f107 0108 	add.w	r1, r7, #8
 8006d24:	f107 030c 	add.w	r3, r7, #12
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe fae7 	bl	80052fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	9202      	str	r2, [sp, #8]
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	2302      	movs	r3, #2
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	460a      	mov	r2, r1
 8006d40:	4911      	ldr	r1, [pc, #68]	@ (8006d88 <xTimerCreateTimerTask+0x88>)
 8006d42:	4812      	ldr	r0, [pc, #72]	@ (8006d8c <xTimerCreateTimerTask+0x8c>)
 8006d44:	f7ff f8a0 	bl	8005e88 <xTaskCreateStatic>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	4a11      	ldr	r2, [pc, #68]	@ (8006d90 <xTimerCreateTimerTask+0x90>)
 8006d4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d4e:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <xTimerCreateTimerTask+0x90>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d56:	2301      	movs	r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10b      	bne.n	8006d78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	613b      	str	r3, [r7, #16]
}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d78:	697b      	ldr	r3, [r7, #20]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20002610 	.word	0x20002610
 8006d88:	08008628 	.word	0x08008628
 8006d8c:	08006eb5 	.word	0x08006eb5
 8006d90:	20002614 	.word	0x20002614

08006d94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	@ 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10b      	bne.n	8006dc4 <xTimerGenericCommand+0x30>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	623b      	str	r3, [r7, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	e7fd      	b.n	8006dc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dc4:	4b19      	ldr	r3, [pc, #100]	@ (8006e2c <xTimerGenericCommand+0x98>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d02a      	beq.n	8006e22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	dc18      	bgt.n	8006e10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dde:	f7ff fead 	bl	8006b3c <xTaskGetSchedulerState>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d109      	bne.n	8006dfc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006de8:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <xTimerGenericCommand+0x98>)
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	f107 0110 	add.w	r1, r7, #16
 8006df0:	2300      	movs	r3, #0
 8006df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df4:	f7fe fc5a 	bl	80056ac <xQueueGenericSend>
 8006df8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006dfa:	e012      	b.n	8006e22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <xTimerGenericCommand+0x98>)
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	f107 0110 	add.w	r1, r7, #16
 8006e04:	2300      	movs	r3, #0
 8006e06:	2200      	movs	r2, #0
 8006e08:	f7fe fc50 	bl	80056ac <xQueueGenericSend>
 8006e0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e0e:	e008      	b.n	8006e22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <xTimerGenericCommand+0x98>)
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	f107 0110 	add.w	r1, r7, #16
 8006e18:	2300      	movs	r3, #0
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	f7fe fd48 	bl	80058b0 <xQueueGenericSendFromISR>
 8006e20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3728      	adds	r7, #40	@ 0x28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20002610 	.word	0x20002610

08006e30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb0 <prvProcessExpiredTimer+0x80>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe fafb 	bl	8005444 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d123      	bne.n	8006e9e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	18d1      	adds	r1, r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	6978      	ldr	r0, [r7, #20]
 8006e64:	f000 f8cc 	bl	8007000 <prvInsertTimerInActiveList>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d017      	beq.n	8006e9e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	2100      	movs	r1, #0
 8006e78:	6978      	ldr	r0, [r7, #20]
 8006e7a:	f7ff ff8b 	bl	8006d94 <xTimerGenericCommand>
 8006e7e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60fb      	str	r3, [r7, #12]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	6978      	ldr	r0, [r7, #20]
 8006ea4:	4798      	blx	r3
}
 8006ea6:	bf00      	nop
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20002608 	.word	0x20002608

08006eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ebc:	f107 0308 	add.w	r3, r7, #8
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 f859 	bl	8006f78 <prvGetNextExpireTime>
 8006ec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 f805 	bl	8006edc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ed2:	f000 f8d7 	bl	8007084 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ed6:	bf00      	nop
 8006ed8:	e7f0      	b.n	8006ebc <prvTimerTask+0x8>
	...

08006edc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ee6:	f7ff fa29 	bl	800633c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eea:	f107 0308 	add.w	r3, r7, #8
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 f866 	bl	8006fc0 <prvSampleTimeNow>
 8006ef4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d130      	bne.n	8006f5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <prvProcessTimerOrBlockTask+0x3c>
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d806      	bhi.n	8006f18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f0a:	f7ff fa25 	bl	8006358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ff8d 	bl	8006e30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f16:	e024      	b.n	8006f62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d008      	beq.n	8006f30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f1e:	4b13      	ldr	r3, [pc, #76]	@ (8006f6c <prvProcessTimerOrBlockTask+0x90>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bf0c      	ite	eq
 8006f28:	2301      	moveq	r3, #1
 8006f2a:	2300      	movne	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f30:	4b0f      	ldr	r3, [pc, #60]	@ (8006f70 <prvProcessTimerOrBlockTask+0x94>)
 8006f32:	6818      	ldr	r0, [r3, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	f7fe ff6f 	bl	8005e20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f42:	f7ff fa09 	bl	8006358 <xTaskResumeAll>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f4c:	4b09      	ldr	r3, [pc, #36]	@ (8006f74 <prvProcessTimerOrBlockTask+0x98>)
 8006f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	f3bf 8f6f 	isb	sy
}
 8006f5c:	e001      	b.n	8006f62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f5e:	f7ff f9fb 	bl	8006358 <xTaskResumeAll>
}
 8006f62:	bf00      	nop
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	2000260c 	.word	0x2000260c
 8006f70:	20002610 	.word	0x20002610
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f80:	4b0e      	ldr	r3, [pc, #56]	@ (8006fbc <prvGetNextExpireTime+0x44>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bf0c      	ite	eq
 8006f8a:	2301      	moveq	r3, #1
 8006f8c:	2300      	movne	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d105      	bne.n	8006faa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f9e:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <prvGetNextExpireTime+0x44>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	e001      	b.n	8006fae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fae:	68fb      	ldr	r3, [r7, #12]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	20002608 	.word	0x20002608

08006fc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fc8:	f7ff fa64 	bl	8006494 <xTaskGetTickCount>
 8006fcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fce:	4b0b      	ldr	r3, [pc, #44]	@ (8006ffc <prvSampleTimeNow+0x3c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d205      	bcs.n	8006fe4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fd8:	f000 f910 	bl	80071fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e002      	b.n	8006fea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fea:	4a04      	ldr	r2, [pc, #16]	@ (8006ffc <prvSampleTimeNow+0x3c>)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20002618 	.word	0x20002618

08007000 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	429a      	cmp	r2, r3
 8007024:	d812      	bhi.n	800704c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	429a      	cmp	r2, r3
 8007032:	d302      	bcc.n	800703a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007034:	2301      	movs	r3, #1
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	e01b      	b.n	8007072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800703a:	4b10      	ldr	r3, [pc, #64]	@ (800707c <prvInsertTimerInActiveList+0x7c>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3304      	adds	r3, #4
 8007042:	4619      	mov	r1, r3
 8007044:	4610      	mov	r0, r2
 8007046:	f7fe f9c4 	bl	80053d2 <vListInsert>
 800704a:	e012      	b.n	8007072 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d206      	bcs.n	8007062 <prvInsertTimerInActiveList+0x62>
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d302      	bcc.n	8007062 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800705c:	2301      	movs	r3, #1
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	e007      	b.n	8007072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007062:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <prvInsertTimerInActiveList+0x80>)
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3304      	adds	r3, #4
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f7fe f9b0 	bl	80053d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007072:	697b      	ldr	r3, [r7, #20]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	2000260c 	.word	0x2000260c
 8007080:	20002608 	.word	0x20002608

08007084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08e      	sub	sp, #56	@ 0x38
 8007088:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800708a:	e0a5      	b.n	80071d8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	da19      	bge.n	80070c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007092:	1d3b      	adds	r3, r7, #4
 8007094:	3304      	adds	r3, #4
 8007096:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10b      	bne.n	80070b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	61fb      	str	r3, [r7, #28]
}
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop
 80070b4:	e7fd      	b.n	80070b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070bc:	6850      	ldr	r0, [r2, #4]
 80070be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070c0:	6892      	ldr	r2, [r2, #8]
 80070c2:	4611      	mov	r1, r2
 80070c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f2c0 8085 	blt.w	80071d8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	3304      	adds	r3, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe f9b0 	bl	8005444 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070e4:	463b      	mov	r3, r7
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff ff6a 	bl	8006fc0 <prvSampleTimeNow>
 80070ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b09      	cmp	r3, #9
 80070f2:	d86c      	bhi.n	80071ce <prvProcessReceivedCommands+0x14a>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <prvProcessReceivedCommands+0x78>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007125 	.word	0x08007125
 8007100:	08007125 	.word	0x08007125
 8007104:	08007125 	.word	0x08007125
 8007108:	080071cf 	.word	0x080071cf
 800710c:	08007183 	.word	0x08007183
 8007110:	080071bd 	.word	0x080071bd
 8007114:	08007125 	.word	0x08007125
 8007118:	08007125 	.word	0x08007125
 800711c:	080071cf 	.word	0x080071cf
 8007120:	08007183 	.word	0x08007183
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	18d1      	adds	r1, r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007132:	f7ff ff65 	bl	8007000 <prvInsertTimerInActiveList>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d04a      	beq.n	80071d2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007142:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d142      	bne.n	80071d2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	441a      	add	r2, r3
 8007154:	2300      	movs	r3, #0
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	2300      	movs	r3, #0
 800715a:	2100      	movs	r1, #0
 800715c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800715e:	f7ff fe19 	bl	8006d94 <xTimerGenericCommand>
 8007162:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d133      	bne.n	80071d2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	61bb      	str	r3, [r7, #24]
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	e7fd      	b.n	800717e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10b      	bne.n	80071a8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	617b      	str	r3, [r7, #20]
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	e7fd      	b.n	80071a4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	18d1      	adds	r1, r2, r3
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071b6:	f7ff ff23 	bl	8007000 <prvInsertTimerInActiveList>
					break;
 80071ba:	e00d      	b.n	80071d8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d107      	bne.n	80071d6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80071c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c8:	f000 fbd8 	bl	800797c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071cc:	e003      	b.n	80071d6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80071ce:	bf00      	nop
 80071d0:	e002      	b.n	80071d8 <prvProcessReceivedCommands+0x154>
					break;
 80071d2:	bf00      	nop
 80071d4:	e000      	b.n	80071d8 <prvProcessReceivedCommands+0x154>
					break;
 80071d6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071d8:	4b07      	ldr	r3, [pc, #28]	@ (80071f8 <prvProcessReceivedCommands+0x174>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	1d39      	adds	r1, r7, #4
 80071de:	2200      	movs	r2, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fe fc01 	bl	80059e8 <xQueueReceive>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f47f af4f 	bne.w	800708c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	3730      	adds	r7, #48	@ 0x30
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20002610 	.word	0x20002610

080071fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007202:	e046      	b.n	8007292 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007204:	4b2c      	ldr	r3, [pc, #176]	@ (80072b8 <prvSwitchTimerLists+0xbc>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800720e:	4b2a      	ldr	r3, [pc, #168]	@ (80072b8 <prvSwitchTimerLists+0xbc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3304      	adds	r3, #4
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe f911 	bl	8005444 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d12f      	bne.n	8007292 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4413      	add	r3, r2
 800723a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	429a      	cmp	r2, r3
 8007242:	d90e      	bls.n	8007262 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007250:	4b19      	ldr	r3, [pc, #100]	@ (80072b8 <prvSwitchTimerLists+0xbc>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3304      	adds	r3, #4
 8007258:	4619      	mov	r1, r3
 800725a:	4610      	mov	r0, r2
 800725c:	f7fe f8b9 	bl	80053d2 <vListInsert>
 8007260:	e017      	b.n	8007292 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007262:	2300      	movs	r3, #0
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	2300      	movs	r3, #0
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	2100      	movs	r1, #0
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff fd91 	bl	8006d94 <xTimerGenericCommand>
 8007272:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10b      	bne.n	8007292 <prvSwitchTimerLists+0x96>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	603b      	str	r3, [r7, #0]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007292:	4b09      	ldr	r3, [pc, #36]	@ (80072b8 <prvSwitchTimerLists+0xbc>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1b3      	bne.n	8007204 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800729c:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <prvSwitchTimerLists+0xbc>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072a2:	4b06      	ldr	r3, [pc, #24]	@ (80072bc <prvSwitchTimerLists+0xc0>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a04      	ldr	r2, [pc, #16]	@ (80072b8 <prvSwitchTimerLists+0xbc>)
 80072a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072aa:	4a04      	ldr	r2, [pc, #16]	@ (80072bc <prvSwitchTimerLists+0xc0>)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	6013      	str	r3, [r2, #0]
}
 80072b0:	bf00      	nop
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20002608 	.word	0x20002608
 80072bc:	2000260c 	.word	0x2000260c

080072c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072c6:	f000 f96f 	bl	80075a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072ca:	4b15      	ldr	r3, [pc, #84]	@ (8007320 <prvCheckForValidListAndQueue+0x60>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d120      	bne.n	8007314 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072d2:	4814      	ldr	r0, [pc, #80]	@ (8007324 <prvCheckForValidListAndQueue+0x64>)
 80072d4:	f7fe f82c 	bl	8005330 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072d8:	4813      	ldr	r0, [pc, #76]	@ (8007328 <prvCheckForValidListAndQueue+0x68>)
 80072da:	f7fe f829 	bl	8005330 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072de:	4b13      	ldr	r3, [pc, #76]	@ (800732c <prvCheckForValidListAndQueue+0x6c>)
 80072e0:	4a10      	ldr	r2, [pc, #64]	@ (8007324 <prvCheckForValidListAndQueue+0x64>)
 80072e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072e4:	4b12      	ldr	r3, [pc, #72]	@ (8007330 <prvCheckForValidListAndQueue+0x70>)
 80072e6:	4a10      	ldr	r2, [pc, #64]	@ (8007328 <prvCheckForValidListAndQueue+0x68>)
 80072e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072ea:	2300      	movs	r3, #0
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4b11      	ldr	r3, [pc, #68]	@ (8007334 <prvCheckForValidListAndQueue+0x74>)
 80072f0:	4a11      	ldr	r2, [pc, #68]	@ (8007338 <prvCheckForValidListAndQueue+0x78>)
 80072f2:	2110      	movs	r1, #16
 80072f4:	200a      	movs	r0, #10
 80072f6:	f7fe f939 	bl	800556c <xQueueGenericCreateStatic>
 80072fa:	4603      	mov	r3, r0
 80072fc:	4a08      	ldr	r2, [pc, #32]	@ (8007320 <prvCheckForValidListAndQueue+0x60>)
 80072fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007300:	4b07      	ldr	r3, [pc, #28]	@ (8007320 <prvCheckForValidListAndQueue+0x60>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007308:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <prvCheckForValidListAndQueue+0x60>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	490b      	ldr	r1, [pc, #44]	@ (800733c <prvCheckForValidListAndQueue+0x7c>)
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fd5c 	bl	8005dcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007314:	f000 f97a 	bl	800760c <vPortExitCritical>
}
 8007318:	bf00      	nop
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20002610 	.word	0x20002610
 8007324:	200025e0 	.word	0x200025e0
 8007328:	200025f4 	.word	0x200025f4
 800732c:	20002608 	.word	0x20002608
 8007330:	2000260c 	.word	0x2000260c
 8007334:	200026bc 	.word	0x200026bc
 8007338:	2000261c 	.word	0x2000261c
 800733c:	08008630 	.word	0x08008630

08007340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3b04      	subs	r3, #4
 8007350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3b04      	subs	r3, #4
 800735e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f023 0201 	bic.w	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3b04      	subs	r3, #4
 800736e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007370:	4a0c      	ldr	r2, [pc, #48]	@ (80073a4 <pxPortInitialiseStack+0x64>)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3b14      	subs	r3, #20
 800737a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3b04      	subs	r3, #4
 8007386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f06f 0202 	mvn.w	r2, #2
 800738e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3b20      	subs	r3, #32
 8007394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007396:	68fb      	ldr	r3, [r7, #12]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	080073a9 	.word	0x080073a9

080073a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073b2:	4b13      	ldr	r3, [pc, #76]	@ (8007400 <prvTaskExitError+0x58>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073ba:	d00b      	beq.n	80073d4 <prvTaskExitError+0x2c>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	60fb      	str	r3, [r7, #12]
}
 80073ce:	bf00      	nop
 80073d0:	bf00      	nop
 80073d2:	e7fd      	b.n	80073d0 <prvTaskExitError+0x28>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60bb      	str	r3, [r7, #8]
}
 80073e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073e8:	bf00      	nop
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0fc      	beq.n	80073ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000010 	.word	0x20000010
	...

08007410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007410:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <pxCurrentTCBConst2>)
 8007412:	6819      	ldr	r1, [r3, #0]
 8007414:	6808      	ldr	r0, [r1, #0]
 8007416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741a:	f380 8809 	msr	PSP, r0
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8811 	msr	BASEPRI, r0
 800742a:	4770      	bx	lr
 800742c:	f3af 8000 	nop.w

08007430 <pxCurrentTCBConst2>:
 8007430:	200020e0 	.word	0x200020e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop

08007438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007438:	4808      	ldr	r0, [pc, #32]	@ (800745c <prvPortStartFirstTask+0x24>)
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	6800      	ldr	r0, [r0, #0]
 800743e:	f380 8808 	msr	MSP, r0
 8007442:	f04f 0000 	mov.w	r0, #0
 8007446:	f380 8814 	msr	CONTROL, r0
 800744a:	b662      	cpsie	i
 800744c:	b661      	cpsie	f
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	df00      	svc	0
 8007458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800745a:	bf00      	nop
 800745c:	e000ed08 	.word	0xe000ed08

08007460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007466:	4b47      	ldr	r3, [pc, #284]	@ (8007584 <xPortStartScheduler+0x124>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a47      	ldr	r2, [pc, #284]	@ (8007588 <xPortStartScheduler+0x128>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d10b      	bne.n	8007488 <xPortStartScheduler+0x28>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	bf00      	nop
 8007486:	e7fd      	b.n	8007484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007488:	4b3e      	ldr	r3, [pc, #248]	@ (8007584 <xPortStartScheduler+0x124>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a3f      	ldr	r2, [pc, #252]	@ (800758c <xPortStartScheduler+0x12c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10b      	bne.n	80074aa <xPortStartScheduler+0x4a>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	613b      	str	r3, [r7, #16]
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	e7fd      	b.n	80074a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074aa:	4b39      	ldr	r3, [pc, #228]	@ (8007590 <xPortStartScheduler+0x130>)
 80074ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	22ff      	movs	r2, #255	@ 0xff
 80074ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	4b31      	ldr	r3, [pc, #196]	@ (8007594 <xPortStartScheduler+0x134>)
 80074d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074d2:	4b31      	ldr	r3, [pc, #196]	@ (8007598 <xPortStartScheduler+0x138>)
 80074d4:	2207      	movs	r2, #7
 80074d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074d8:	e009      	b.n	80074ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80074da:	4b2f      	ldr	r3, [pc, #188]	@ (8007598 <xPortStartScheduler+0x138>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3b01      	subs	r3, #1
 80074e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007598 <xPortStartScheduler+0x138>)
 80074e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f6:	2b80      	cmp	r3, #128	@ 0x80
 80074f8:	d0ef      	beq.n	80074da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074fa:	4b27      	ldr	r3, [pc, #156]	@ (8007598 <xPortStartScheduler+0x138>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f1c3 0307 	rsb	r3, r3, #7
 8007502:	2b04      	cmp	r3, #4
 8007504:	d00b      	beq.n	800751e <xPortStartScheduler+0xbe>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60bb      	str	r3, [r7, #8]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800751e:	4b1e      	ldr	r3, [pc, #120]	@ (8007598 <xPortStartScheduler+0x138>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	4a1c      	ldr	r2, [pc, #112]	@ (8007598 <xPortStartScheduler+0x138>)
 8007526:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007528:	4b1b      	ldr	r3, [pc, #108]	@ (8007598 <xPortStartScheduler+0x138>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007530:	4a19      	ldr	r2, [pc, #100]	@ (8007598 <xPortStartScheduler+0x138>)
 8007532:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	b2da      	uxtb	r2, r3
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800753c:	4b17      	ldr	r3, [pc, #92]	@ (800759c <xPortStartScheduler+0x13c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a16      	ldr	r2, [pc, #88]	@ (800759c <xPortStartScheduler+0x13c>)
 8007542:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007546:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007548:	4b14      	ldr	r3, [pc, #80]	@ (800759c <xPortStartScheduler+0x13c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a13      	ldr	r2, [pc, #76]	@ (800759c <xPortStartScheduler+0x13c>)
 800754e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007552:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007554:	f000 f8da 	bl	800770c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007558:	4b11      	ldr	r3, [pc, #68]	@ (80075a0 <xPortStartScheduler+0x140>)
 800755a:	2200      	movs	r2, #0
 800755c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800755e:	f000 f8f9 	bl	8007754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007562:	4b10      	ldr	r3, [pc, #64]	@ (80075a4 <xPortStartScheduler+0x144>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a0f      	ldr	r2, [pc, #60]	@ (80075a4 <xPortStartScheduler+0x144>)
 8007568:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800756c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800756e:	f7ff ff63 	bl	8007438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007572:	f7ff f85f 	bl	8006634 <vTaskSwitchContext>
	prvTaskExitError();
 8007576:	f7ff ff17 	bl	80073a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	e000ed00 	.word	0xe000ed00
 8007588:	410fc271 	.word	0x410fc271
 800758c:	410fc270 	.word	0x410fc270
 8007590:	e000e400 	.word	0xe000e400
 8007594:	2000270c 	.word	0x2000270c
 8007598:	20002710 	.word	0x20002710
 800759c:	e000ed20 	.word	0xe000ed20
 80075a0:	20000010 	.word	0x20000010
 80075a4:	e000ef34 	.word	0xe000ef34

080075a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075c2:	4b10      	ldr	r3, [pc, #64]	@ (8007604 <vPortEnterCritical+0x5c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3301      	adds	r3, #1
 80075c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007604 <vPortEnterCritical+0x5c>)
 80075ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <vPortEnterCritical+0x5c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d110      	bne.n	80075f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007608 <vPortEnterCritical+0x60>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	603b      	str	r3, [r7, #0]
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	e7fd      	b.n	80075f2 <vPortEnterCritical+0x4a>
	}
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	20000010 	.word	0x20000010
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007612:	4b12      	ldr	r3, [pc, #72]	@ (800765c <vPortExitCritical+0x50>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <vPortExitCritical+0x26>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	607b      	str	r3, [r7, #4]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007632:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <vPortExitCritical+0x50>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3b01      	subs	r3, #1
 8007638:	4a08      	ldr	r2, [pc, #32]	@ (800765c <vPortExitCritical+0x50>)
 800763a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800763c:	4b07      	ldr	r3, [pc, #28]	@ (800765c <vPortExitCritical+0x50>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <vPortExitCritical+0x44>
 8007644:	2300      	movs	r3, #0
 8007646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f383 8811 	msr	BASEPRI, r3
}
 800764e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	20000010 	.word	0x20000010

08007660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007660:	f3ef 8009 	mrs	r0, PSP
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	4b15      	ldr	r3, [pc, #84]	@ (80076c0 <pxCurrentTCBConst>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	f01e 0f10 	tst.w	lr, #16
 8007670:	bf08      	it	eq
 8007672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767a:	6010      	str	r0, [r2, #0]
 800767c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007684:	f380 8811 	msr	BASEPRI, r0
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f7fe ffd0 	bl	8006634 <vTaskSwitchContext>
 8007694:	f04f 0000 	mov.w	r0, #0
 8007698:	f380 8811 	msr	BASEPRI, r0
 800769c:	bc09      	pop	{r0, r3}
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	6808      	ldr	r0, [r1, #0]
 80076a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a6:	f01e 0f10 	tst.w	lr, #16
 80076aa:	bf08      	it	eq
 80076ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076b0:	f380 8809 	msr	PSP, r0
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	f3af 8000 	nop.w

080076c0 <pxCurrentTCBConst>:
 80076c0:	200020e0 	.word	0x200020e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop

080076c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	607b      	str	r3, [r7, #4]
}
 80076e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076e2:	f7fe fee7 	bl	80064b4 <xTaskIncrementTick>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076ec:	4b06      	ldr	r3, [pc, #24]	@ (8007708 <SysTick_Handler+0x40>)
 80076ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	2300      	movs	r3, #0
 80076f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f383 8811 	msr	BASEPRI, r3
}
 80076fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	e000ed04 	.word	0xe000ed04

0800770c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007710:	4b0b      	ldr	r3, [pc, #44]	@ (8007740 <vPortSetupTimerInterrupt+0x34>)
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007716:	4b0b      	ldr	r3, [pc, #44]	@ (8007744 <vPortSetupTimerInterrupt+0x38>)
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800771c:	4b0a      	ldr	r3, [pc, #40]	@ (8007748 <vPortSetupTimerInterrupt+0x3c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a0a      	ldr	r2, [pc, #40]	@ (800774c <vPortSetupTimerInterrupt+0x40>)
 8007722:	fba2 2303 	umull	r2, r3, r2, r3
 8007726:	099b      	lsrs	r3, r3, #6
 8007728:	4a09      	ldr	r2, [pc, #36]	@ (8007750 <vPortSetupTimerInterrupt+0x44>)
 800772a:	3b01      	subs	r3, #1
 800772c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800772e:	4b04      	ldr	r3, [pc, #16]	@ (8007740 <vPortSetupTimerInterrupt+0x34>)
 8007730:	2207      	movs	r2, #7
 8007732:	601a      	str	r2, [r3, #0]
}
 8007734:	bf00      	nop
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	e000e010 	.word	0xe000e010
 8007744:	e000e018 	.word	0xe000e018
 8007748:	20000004 	.word	0x20000004
 800774c:	10624dd3 	.word	0x10624dd3
 8007750:	e000e014 	.word	0xe000e014

08007754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007754:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007764 <vPortEnableVFP+0x10>
 8007758:	6801      	ldr	r1, [r0, #0]
 800775a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800775e:	6001      	str	r1, [r0, #0]
 8007760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007762:	bf00      	nop
 8007764:	e000ed88 	.word	0xe000ed88

08007768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800776e:	f3ef 8305 	mrs	r3, IPSR
 8007772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b0f      	cmp	r3, #15
 8007778:	d915      	bls.n	80077a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800777a:	4a18      	ldr	r2, [pc, #96]	@ (80077dc <vPortValidateInterruptPriority+0x74>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007784:	4b16      	ldr	r3, [pc, #88]	@ (80077e0 <vPortValidateInterruptPriority+0x78>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	7afa      	ldrb	r2, [r7, #11]
 800778a:	429a      	cmp	r2, r3
 800778c:	d20b      	bcs.n	80077a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	607b      	str	r3, [r7, #4]
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077a6:	4b0f      	ldr	r3, [pc, #60]	@ (80077e4 <vPortValidateInterruptPriority+0x7c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077ae:	4b0e      	ldr	r3, [pc, #56]	@ (80077e8 <vPortValidateInterruptPriority+0x80>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d90b      	bls.n	80077ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	603b      	str	r3, [r7, #0]
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	e7fd      	b.n	80077ca <vPortValidateInterruptPriority+0x62>
	}
 80077ce:	bf00      	nop
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	e000e3f0 	.word	0xe000e3f0
 80077e0:	2000270c 	.word	0x2000270c
 80077e4:	e000ed0c 	.word	0xe000ed0c
 80077e8:	20002710 	.word	0x20002710

080077ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	@ 0x28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077f8:	f7fe fda0 	bl	800633c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077fc:	4b5a      	ldr	r3, [pc, #360]	@ (8007968 <pvPortMalloc+0x17c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007804:	f000 f916 	bl	8007a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007808:	4b58      	ldr	r3, [pc, #352]	@ (800796c <pvPortMalloc+0x180>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4013      	ands	r3, r2
 8007810:	2b00      	cmp	r3, #0
 8007812:	f040 8090 	bne.w	8007936 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01e      	beq.n	800785a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800781c:	2208      	movs	r2, #8
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b00      	cmp	r3, #0
 800782c:	d015      	beq.n	800785a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f023 0307 	bic.w	r3, r3, #7
 8007834:	3308      	adds	r3, #8
 8007836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00b      	beq.n	800785a <pvPortMalloc+0x6e>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	617b      	str	r3, [r7, #20]
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	e7fd      	b.n	8007856 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d06a      	beq.n	8007936 <pvPortMalloc+0x14a>
 8007860:	4b43      	ldr	r3, [pc, #268]	@ (8007970 <pvPortMalloc+0x184>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	429a      	cmp	r2, r3
 8007868:	d865      	bhi.n	8007936 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800786a:	4b42      	ldr	r3, [pc, #264]	@ (8007974 <pvPortMalloc+0x188>)
 800786c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800786e:	4b41      	ldr	r3, [pc, #260]	@ (8007974 <pvPortMalloc+0x188>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007874:	e004      	b.n	8007880 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	429a      	cmp	r2, r3
 8007888:	d903      	bls.n	8007892 <pvPortMalloc+0xa6>
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f1      	bne.n	8007876 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007892:	4b35      	ldr	r3, [pc, #212]	@ (8007968 <pvPortMalloc+0x17c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007898:	429a      	cmp	r2, r3
 800789a:	d04c      	beq.n	8007936 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2208      	movs	r2, #8
 80078a2:	4413      	add	r3, r2
 80078a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	1ad2      	subs	r2, r2, r3
 80078b6:	2308      	movs	r3, #8
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d920      	bls.n	8007900 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4413      	add	r3, r2
 80078c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <pvPortMalloc+0xfc>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	613b      	str	r3, [r7, #16]
}
 80078e2:	bf00      	nop
 80078e4:	bf00      	nop
 80078e6:	e7fd      	b.n	80078e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	1ad2      	subs	r2, r2, r3
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078fa:	69b8      	ldr	r0, [r7, #24]
 80078fc:	f000 f8fc 	bl	8007af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007900:	4b1b      	ldr	r3, [pc, #108]	@ (8007970 <pvPortMalloc+0x184>)
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	4a19      	ldr	r2, [pc, #100]	@ (8007970 <pvPortMalloc+0x184>)
 800790c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800790e:	4b18      	ldr	r3, [pc, #96]	@ (8007970 <pvPortMalloc+0x184>)
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b19      	ldr	r3, [pc, #100]	@ (8007978 <pvPortMalloc+0x18c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d203      	bcs.n	8007922 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800791a:	4b15      	ldr	r3, [pc, #84]	@ (8007970 <pvPortMalloc+0x184>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a16      	ldr	r2, [pc, #88]	@ (8007978 <pvPortMalloc+0x18c>)
 8007920:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	4b11      	ldr	r3, [pc, #68]	@ (800796c <pvPortMalloc+0x180>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	431a      	orrs	r2, r3
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007936:	f7fe fd0f 	bl	8006358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <pvPortMalloc+0x170>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	60fb      	str	r3, [r7, #12]
}
 8007956:	bf00      	nop
 8007958:	bf00      	nop
 800795a:	e7fd      	b.n	8007958 <pvPortMalloc+0x16c>
	return pvReturn;
 800795c:	69fb      	ldr	r3, [r7, #28]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3728      	adds	r7, #40	@ 0x28
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	2000331c 	.word	0x2000331c
 800796c:	20003328 	.word	0x20003328
 8007970:	20003320 	.word	0x20003320
 8007974:	20003314 	.word	0x20003314
 8007978:	20003324 	.word	0x20003324

0800797c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d04a      	beq.n	8007a24 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800798e:	2308      	movs	r3, #8
 8007990:	425b      	negs	r3, r3
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4413      	add	r3, r2
 8007996:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	4b22      	ldr	r3, [pc, #136]	@ (8007a2c <vPortFree+0xb0>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4013      	ands	r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <vPortFree+0x46>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	60fb      	str	r3, [r7, #12]
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00b      	beq.n	80079e2 <vPortFree+0x66>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	60bb      	str	r3, [r7, #8]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	4b11      	ldr	r3, [pc, #68]	@ (8007a2c <vPortFree+0xb0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d019      	beq.n	8007a24 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d115      	bne.n	8007a24 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	4b0b      	ldr	r3, [pc, #44]	@ (8007a2c <vPortFree+0xb0>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	43db      	mvns	r3, r3
 8007a02:	401a      	ands	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a08:	f7fe fc98 	bl	800633c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <vPortFree+0xb4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4413      	add	r3, r2
 8007a16:	4a06      	ldr	r2, [pc, #24]	@ (8007a30 <vPortFree+0xb4>)
 8007a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a1a:	6938      	ldr	r0, [r7, #16]
 8007a1c:	f000 f86c 	bl	8007af8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a20:	f7fe fc9a 	bl	8006358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a24:	bf00      	nop
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20003328 	.word	0x20003328
 8007a30:	20003320 	.word	0x20003320

08007a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a40:	4b27      	ldr	r3, [pc, #156]	@ (8007ae0 <prvHeapInit+0xac>)
 8007a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00c      	beq.n	8007a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3307      	adds	r3, #7
 8007a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae0 <prvHeapInit+0xac>)
 8007a64:	4413      	add	r3, r2
 8007a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae4 <prvHeapInit+0xb0>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a72:	4b1c      	ldr	r3, [pc, #112]	@ (8007ae4 <prvHeapInit+0xb0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a80:	2208      	movs	r2, #8
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0307 	bic.w	r3, r3, #7
 8007a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4a15      	ldr	r2, [pc, #84]	@ (8007ae8 <prvHeapInit+0xb4>)
 8007a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a96:	4b14      	ldr	r3, [pc, #80]	@ (8007ae8 <prvHeapInit+0xb4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a9e:	4b12      	ldr	r3, [pc, #72]	@ (8007ae8 <prvHeapInit+0xb4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	1ad2      	subs	r2, r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <prvHeapInit+0xb4>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8007aec <prvHeapInit+0xb8>)
 8007ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4a09      	ldr	r2, [pc, #36]	@ (8007af0 <prvHeapInit+0xbc>)
 8007aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007acc:	4b09      	ldr	r3, [pc, #36]	@ (8007af4 <prvHeapInit+0xc0>)
 8007ace:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20002714 	.word	0x20002714
 8007ae4:	20003314 	.word	0x20003314
 8007ae8:	2000331c 	.word	0x2000331c
 8007aec:	20003324 	.word	0x20003324
 8007af0:	20003320 	.word	0x20003320
 8007af4:	20003328 	.word	0x20003328

08007af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b00:	4b28      	ldr	r3, [pc, #160]	@ (8007ba4 <prvInsertBlockIntoFreeList+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e002      	b.n	8007b0c <prvInsertBlockIntoFreeList+0x14>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d8f7      	bhi.n	8007b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d108      	bne.n	8007b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	441a      	add	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	441a      	add	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d118      	bne.n	8007b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4b15      	ldr	r3, [pc, #84]	@ (8007ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d00d      	beq.n	8007b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	441a      	add	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	e008      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b76:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e003      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d002      	beq.n	8007b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b96:	bf00      	nop
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20003314 	.word	0x20003314
 8007ba8:	2000331c 	.word	0x2000331c

08007bac <siprintf>:
 8007bac:	b40e      	push	{r1, r2, r3}
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	b09d      	sub	sp, #116	@ 0x74
 8007bb2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007bb4:	9002      	str	r0, [sp, #8]
 8007bb6:	9006      	str	r0, [sp, #24]
 8007bb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007bbc:	480a      	ldr	r0, [pc, #40]	@ (8007be8 <siprintf+0x3c>)
 8007bbe:	9107      	str	r1, [sp, #28]
 8007bc0:	9104      	str	r1, [sp, #16]
 8007bc2:	490a      	ldr	r1, [pc, #40]	@ (8007bec <siprintf+0x40>)
 8007bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc8:	9105      	str	r1, [sp, #20]
 8007bca:	2400      	movs	r4, #0
 8007bcc:	a902      	add	r1, sp, #8
 8007bce:	6800      	ldr	r0, [r0, #0]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007bd4:	f000 fa00 	bl	8007fd8 <_svfiprintf_r>
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	701c      	strb	r4, [r3, #0]
 8007bdc:	b01d      	add	sp, #116	@ 0x74
 8007bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be2:	b003      	add	sp, #12
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20000014 	.word	0x20000014
 8007bec:	ffff0208 	.word	0xffff0208

08007bf0 <memset>:
 8007bf0:	4402      	add	r2, r0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d100      	bne.n	8007bfa <memset+0xa>
 8007bf8:	4770      	bx	lr
 8007bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfe:	e7f9      	b.n	8007bf4 <memset+0x4>

08007c00 <_reclaim_reent>:
 8007c00:	4b2d      	ldr	r3, [pc, #180]	@ (8007cb8 <_reclaim_reent+0xb8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4283      	cmp	r3, r0
 8007c06:	b570      	push	{r4, r5, r6, lr}
 8007c08:	4604      	mov	r4, r0
 8007c0a:	d053      	beq.n	8007cb4 <_reclaim_reent+0xb4>
 8007c0c:	69c3      	ldr	r3, [r0, #28]
 8007c0e:	b31b      	cbz	r3, 8007c58 <_reclaim_reent+0x58>
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	b163      	cbz	r3, 8007c2e <_reclaim_reent+0x2e>
 8007c14:	2500      	movs	r5, #0
 8007c16:	69e3      	ldr	r3, [r4, #28]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	5959      	ldr	r1, [r3, r5]
 8007c1c:	b9b1      	cbnz	r1, 8007c4c <_reclaim_reent+0x4c>
 8007c1e:	3504      	adds	r5, #4
 8007c20:	2d80      	cmp	r5, #128	@ 0x80
 8007c22:	d1f8      	bne.n	8007c16 <_reclaim_reent+0x16>
 8007c24:	69e3      	ldr	r3, [r4, #28]
 8007c26:	4620      	mov	r0, r4
 8007c28:	68d9      	ldr	r1, [r3, #12]
 8007c2a:	f000 f881 	bl	8007d30 <_free_r>
 8007c2e:	69e3      	ldr	r3, [r4, #28]
 8007c30:	6819      	ldr	r1, [r3, #0]
 8007c32:	b111      	cbz	r1, 8007c3a <_reclaim_reent+0x3a>
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 f87b 	bl	8007d30 <_free_r>
 8007c3a:	69e3      	ldr	r3, [r4, #28]
 8007c3c:	689d      	ldr	r5, [r3, #8]
 8007c3e:	b15d      	cbz	r5, 8007c58 <_reclaim_reent+0x58>
 8007c40:	4629      	mov	r1, r5
 8007c42:	4620      	mov	r0, r4
 8007c44:	682d      	ldr	r5, [r5, #0]
 8007c46:	f000 f873 	bl	8007d30 <_free_r>
 8007c4a:	e7f8      	b.n	8007c3e <_reclaim_reent+0x3e>
 8007c4c:	680e      	ldr	r6, [r1, #0]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 f86e 	bl	8007d30 <_free_r>
 8007c54:	4631      	mov	r1, r6
 8007c56:	e7e1      	b.n	8007c1c <_reclaim_reent+0x1c>
 8007c58:	6961      	ldr	r1, [r4, #20]
 8007c5a:	b111      	cbz	r1, 8007c62 <_reclaim_reent+0x62>
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 f867 	bl	8007d30 <_free_r>
 8007c62:	69e1      	ldr	r1, [r4, #28]
 8007c64:	b111      	cbz	r1, 8007c6c <_reclaim_reent+0x6c>
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 f862 	bl	8007d30 <_free_r>
 8007c6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c6e:	b111      	cbz	r1, 8007c76 <_reclaim_reent+0x76>
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 f85d 	bl	8007d30 <_free_r>
 8007c76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c78:	b111      	cbz	r1, 8007c80 <_reclaim_reent+0x80>
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 f858 	bl	8007d30 <_free_r>
 8007c80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c82:	b111      	cbz	r1, 8007c8a <_reclaim_reent+0x8a>
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 f853 	bl	8007d30 <_free_r>
 8007c8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c8c:	b111      	cbz	r1, 8007c94 <_reclaim_reent+0x94>
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 f84e 	bl	8007d30 <_free_r>
 8007c94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c96:	b111      	cbz	r1, 8007c9e <_reclaim_reent+0x9e>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 f849 	bl	8007d30 <_free_r>
 8007c9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007ca0:	b111      	cbz	r1, 8007ca8 <_reclaim_reent+0xa8>
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 f844 	bl	8007d30 <_free_r>
 8007ca8:	6a23      	ldr	r3, [r4, #32]
 8007caa:	b11b      	cbz	r3, 8007cb4 <_reclaim_reent+0xb4>
 8007cac:	4620      	mov	r0, r4
 8007cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cb2:	4718      	bx	r3
 8007cb4:	bd70      	pop	{r4, r5, r6, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20000014 	.word	0x20000014

08007cbc <__errno>:
 8007cbc:	4b01      	ldr	r3, [pc, #4]	@ (8007cc4 <__errno+0x8>)
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000014 	.word	0x20000014

08007cc8 <__libc_init_array>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4d0d      	ldr	r5, [pc, #52]	@ (8007d00 <__libc_init_array+0x38>)
 8007ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8007d04 <__libc_init_array+0x3c>)
 8007cce:	1b64      	subs	r4, r4, r5
 8007cd0:	10a4      	asrs	r4, r4, #2
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	42a6      	cmp	r6, r4
 8007cd6:	d109      	bne.n	8007cec <__libc_init_array+0x24>
 8007cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8007d08 <__libc_init_array+0x40>)
 8007cda:	4c0c      	ldr	r4, [pc, #48]	@ (8007d0c <__libc_init_array+0x44>)
 8007cdc:	f000 fc64 	bl	80085a8 <_init>
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	42a6      	cmp	r6, r4
 8007ce8:	d105      	bne.n	8007cf6 <__libc_init_array+0x2e>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf0:	4798      	blx	r3
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__libc_init_array+0xc>
 8007cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfa:	4798      	blx	r3
 8007cfc:	3601      	adds	r6, #1
 8007cfe:	e7f2      	b.n	8007ce6 <__libc_init_array+0x1e>
 8007d00:	080086f4 	.word	0x080086f4
 8007d04:	080086f4 	.word	0x080086f4
 8007d08:	080086f4 	.word	0x080086f4
 8007d0c:	080086f8 	.word	0x080086f8

08007d10 <__retarget_lock_acquire_recursive>:
 8007d10:	4770      	bx	lr

08007d12 <__retarget_lock_release_recursive>:
 8007d12:	4770      	bx	lr

08007d14 <memcpy>:
 8007d14:	440a      	add	r2, r1
 8007d16:	4291      	cmp	r1, r2
 8007d18:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d1c:	d100      	bne.n	8007d20 <memcpy+0xc>
 8007d1e:	4770      	bx	lr
 8007d20:	b510      	push	{r4, lr}
 8007d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d2a:	4291      	cmp	r1, r2
 8007d2c:	d1f9      	bne.n	8007d22 <memcpy+0xe>
 8007d2e:	bd10      	pop	{r4, pc}

08007d30 <_free_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4605      	mov	r5, r0
 8007d34:	2900      	cmp	r1, #0
 8007d36:	d041      	beq.n	8007dbc <_free_r+0x8c>
 8007d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3c:	1f0c      	subs	r4, r1, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bfb8      	it	lt
 8007d42:	18e4      	addlt	r4, r4, r3
 8007d44:	f000 f8e0 	bl	8007f08 <__malloc_lock>
 8007d48:	4a1d      	ldr	r2, [pc, #116]	@ (8007dc0 <_free_r+0x90>)
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	b933      	cbnz	r3, 8007d5c <_free_r+0x2c>
 8007d4e:	6063      	str	r3, [r4, #4]
 8007d50:	6014      	str	r4, [r2, #0]
 8007d52:	4628      	mov	r0, r5
 8007d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d58:	f000 b8dc 	b.w	8007f14 <__malloc_unlock>
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d908      	bls.n	8007d72 <_free_r+0x42>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	1821      	adds	r1, r4, r0
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf01      	itttt	eq
 8007d68:	6819      	ldreq	r1, [r3, #0]
 8007d6a:	685b      	ldreq	r3, [r3, #4]
 8007d6c:	1809      	addeq	r1, r1, r0
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	e7ed      	b.n	8007d4e <_free_r+0x1e>
 8007d72:	461a      	mov	r2, r3
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b10b      	cbz	r3, 8007d7c <_free_r+0x4c>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d9fa      	bls.n	8007d72 <_free_r+0x42>
 8007d7c:	6811      	ldr	r1, [r2, #0]
 8007d7e:	1850      	adds	r0, r2, r1
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d10b      	bne.n	8007d9c <_free_r+0x6c>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	4401      	add	r1, r0
 8007d88:	1850      	adds	r0, r2, r1
 8007d8a:	4283      	cmp	r3, r0
 8007d8c:	6011      	str	r1, [r2, #0]
 8007d8e:	d1e0      	bne.n	8007d52 <_free_r+0x22>
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	6053      	str	r3, [r2, #4]
 8007d96:	4408      	add	r0, r1
 8007d98:	6010      	str	r0, [r2, #0]
 8007d9a:	e7da      	b.n	8007d52 <_free_r+0x22>
 8007d9c:	d902      	bls.n	8007da4 <_free_r+0x74>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	e7d6      	b.n	8007d52 <_free_r+0x22>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	1821      	adds	r1, r4, r0
 8007da8:	428b      	cmp	r3, r1
 8007daa:	bf04      	itt	eq
 8007dac:	6819      	ldreq	r1, [r3, #0]
 8007dae:	685b      	ldreq	r3, [r3, #4]
 8007db0:	6063      	str	r3, [r4, #4]
 8007db2:	bf04      	itt	eq
 8007db4:	1809      	addeq	r1, r1, r0
 8007db6:	6021      	streq	r1, [r4, #0]
 8007db8:	6054      	str	r4, [r2, #4]
 8007dba:	e7ca      	b.n	8007d52 <_free_r+0x22>
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20003470 	.word	0x20003470

08007dc4 <sbrk_aligned>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e04 <sbrk_aligned+0x40>)
 8007dc8:	460c      	mov	r4, r1
 8007dca:	6831      	ldr	r1, [r6, #0]
 8007dcc:	4605      	mov	r5, r0
 8007dce:	b911      	cbnz	r1, 8007dd6 <sbrk_aligned+0x12>
 8007dd0:	f000 fba4 	bl	800851c <_sbrk_r>
 8007dd4:	6030      	str	r0, [r6, #0]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 fb9f 	bl	800851c <_sbrk_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d103      	bne.n	8007dea <sbrk_aligned+0x26>
 8007de2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007de6:	4620      	mov	r0, r4
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	1cc4      	adds	r4, r0, #3
 8007dec:	f024 0403 	bic.w	r4, r4, #3
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d0f8      	beq.n	8007de6 <sbrk_aligned+0x22>
 8007df4:	1a21      	subs	r1, r4, r0
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 fb90 	bl	800851c <_sbrk_r>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d1f2      	bne.n	8007de6 <sbrk_aligned+0x22>
 8007e00:	e7ef      	b.n	8007de2 <sbrk_aligned+0x1e>
 8007e02:	bf00      	nop
 8007e04:	2000346c 	.word	0x2000346c

08007e08 <_malloc_r>:
 8007e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e0c:	1ccd      	adds	r5, r1, #3
 8007e0e:	f025 0503 	bic.w	r5, r5, #3
 8007e12:	3508      	adds	r5, #8
 8007e14:	2d0c      	cmp	r5, #12
 8007e16:	bf38      	it	cc
 8007e18:	250c      	movcc	r5, #12
 8007e1a:	2d00      	cmp	r5, #0
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	db01      	blt.n	8007e24 <_malloc_r+0x1c>
 8007e20:	42a9      	cmp	r1, r5
 8007e22:	d904      	bls.n	8007e2e <_malloc_r+0x26>
 8007e24:	230c      	movs	r3, #12
 8007e26:	6033      	str	r3, [r6, #0]
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f04 <_malloc_r+0xfc>
 8007e32:	f000 f869 	bl	8007f08 <__malloc_lock>
 8007e36:	f8d8 3000 	ldr.w	r3, [r8]
 8007e3a:	461c      	mov	r4, r3
 8007e3c:	bb44      	cbnz	r4, 8007e90 <_malloc_r+0x88>
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff ffbf 	bl	8007dc4 <sbrk_aligned>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	4604      	mov	r4, r0
 8007e4a:	d158      	bne.n	8007efe <_malloc_r+0xf6>
 8007e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e50:	4627      	mov	r7, r4
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	d143      	bne.n	8007ede <_malloc_r+0xd6>
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	d04b      	beq.n	8007ef2 <_malloc_r+0xea>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4630      	mov	r0, r6
 8007e60:	eb04 0903 	add.w	r9, r4, r3
 8007e64:	f000 fb5a 	bl	800851c <_sbrk_r>
 8007e68:	4581      	cmp	r9, r0
 8007e6a:	d142      	bne.n	8007ef2 <_malloc_r+0xea>
 8007e6c:	6821      	ldr	r1, [r4, #0]
 8007e6e:	1a6d      	subs	r5, r5, r1
 8007e70:	4629      	mov	r1, r5
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff ffa6 	bl	8007dc4 <sbrk_aligned>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d03a      	beq.n	8007ef2 <_malloc_r+0xea>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	442b      	add	r3, r5
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	f8d8 3000 	ldr.w	r3, [r8]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	bb62      	cbnz	r2, 8007ee4 <_malloc_r+0xdc>
 8007e8a:	f8c8 7000 	str.w	r7, [r8]
 8007e8e:	e00f      	b.n	8007eb0 <_malloc_r+0xa8>
 8007e90:	6822      	ldr	r2, [r4, #0]
 8007e92:	1b52      	subs	r2, r2, r5
 8007e94:	d420      	bmi.n	8007ed8 <_malloc_r+0xd0>
 8007e96:	2a0b      	cmp	r2, #11
 8007e98:	d917      	bls.n	8007eca <_malloc_r+0xc2>
 8007e9a:	1961      	adds	r1, r4, r5
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	6025      	str	r5, [r4, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	6059      	strne	r1, [r3, #4]
 8007ea4:	6863      	ldr	r3, [r4, #4]
 8007ea6:	bf08      	it	eq
 8007ea8:	f8c8 1000 	streq.w	r1, [r8]
 8007eac:	5162      	str	r2, [r4, r5]
 8007eae:	604b      	str	r3, [r1, #4]
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f000 f82f 	bl	8007f14 <__malloc_unlock>
 8007eb6:	f104 000b 	add.w	r0, r4, #11
 8007eba:	1d23      	adds	r3, r4, #4
 8007ebc:	f020 0007 	bic.w	r0, r0, #7
 8007ec0:	1ac2      	subs	r2, r0, r3
 8007ec2:	bf1c      	itt	ne
 8007ec4:	1a1b      	subne	r3, r3, r0
 8007ec6:	50a3      	strne	r3, [r4, r2]
 8007ec8:	e7af      	b.n	8007e2a <_malloc_r+0x22>
 8007eca:	6862      	ldr	r2, [r4, #4]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	bf0c      	ite	eq
 8007ed0:	f8c8 2000 	streq.w	r2, [r8]
 8007ed4:	605a      	strne	r2, [r3, #4]
 8007ed6:	e7eb      	b.n	8007eb0 <_malloc_r+0xa8>
 8007ed8:	4623      	mov	r3, r4
 8007eda:	6864      	ldr	r4, [r4, #4]
 8007edc:	e7ae      	b.n	8007e3c <_malloc_r+0x34>
 8007ede:	463c      	mov	r4, r7
 8007ee0:	687f      	ldr	r7, [r7, #4]
 8007ee2:	e7b6      	b.n	8007e52 <_malloc_r+0x4a>
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d1fb      	bne.n	8007ee4 <_malloc_r+0xdc>
 8007eec:	2300      	movs	r3, #0
 8007eee:	6053      	str	r3, [r2, #4]
 8007ef0:	e7de      	b.n	8007eb0 <_malloc_r+0xa8>
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	6033      	str	r3, [r6, #0]
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f000 f80c 	bl	8007f14 <__malloc_unlock>
 8007efc:	e794      	b.n	8007e28 <_malloc_r+0x20>
 8007efe:	6005      	str	r5, [r0, #0]
 8007f00:	e7d6      	b.n	8007eb0 <_malloc_r+0xa8>
 8007f02:	bf00      	nop
 8007f04:	20003470 	.word	0x20003470

08007f08 <__malloc_lock>:
 8007f08:	4801      	ldr	r0, [pc, #4]	@ (8007f10 <__malloc_lock+0x8>)
 8007f0a:	f7ff bf01 	b.w	8007d10 <__retarget_lock_acquire_recursive>
 8007f0e:	bf00      	nop
 8007f10:	20003468 	.word	0x20003468

08007f14 <__malloc_unlock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	@ (8007f1c <__malloc_unlock+0x8>)
 8007f16:	f7ff befc 	b.w	8007d12 <__retarget_lock_release_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	20003468 	.word	0x20003468

08007f20 <__ssputs_r>:
 8007f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f24:	688e      	ldr	r6, [r1, #8]
 8007f26:	461f      	mov	r7, r3
 8007f28:	42be      	cmp	r6, r7
 8007f2a:	680b      	ldr	r3, [r1, #0]
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4690      	mov	r8, r2
 8007f32:	d82d      	bhi.n	8007f90 <__ssputs_r+0x70>
 8007f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f3c:	d026      	beq.n	8007f8c <__ssputs_r+0x6c>
 8007f3e:	6965      	ldr	r5, [r4, #20]
 8007f40:	6909      	ldr	r1, [r1, #16]
 8007f42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f46:	eba3 0901 	sub.w	r9, r3, r1
 8007f4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f4e:	1c7b      	adds	r3, r7, #1
 8007f50:	444b      	add	r3, r9
 8007f52:	106d      	asrs	r5, r5, #1
 8007f54:	429d      	cmp	r5, r3
 8007f56:	bf38      	it	cc
 8007f58:	461d      	movcc	r5, r3
 8007f5a:	0553      	lsls	r3, r2, #21
 8007f5c:	d527      	bpl.n	8007fae <__ssputs_r+0x8e>
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f7ff ff52 	bl	8007e08 <_malloc_r>
 8007f64:	4606      	mov	r6, r0
 8007f66:	b360      	cbz	r0, 8007fc2 <__ssputs_r+0xa2>
 8007f68:	6921      	ldr	r1, [r4, #16]
 8007f6a:	464a      	mov	r2, r9
 8007f6c:	f7ff fed2 	bl	8007d14 <memcpy>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	6126      	str	r6, [r4, #16]
 8007f7e:	6165      	str	r5, [r4, #20]
 8007f80:	444e      	add	r6, r9
 8007f82:	eba5 0509 	sub.w	r5, r5, r9
 8007f86:	6026      	str	r6, [r4, #0]
 8007f88:	60a5      	str	r5, [r4, #8]
 8007f8a:	463e      	mov	r6, r7
 8007f8c:	42be      	cmp	r6, r7
 8007f8e:	d900      	bls.n	8007f92 <__ssputs_r+0x72>
 8007f90:	463e      	mov	r6, r7
 8007f92:	6820      	ldr	r0, [r4, #0]
 8007f94:	4632      	mov	r2, r6
 8007f96:	4641      	mov	r1, r8
 8007f98:	f000 faa6 	bl	80084e8 <memmove>
 8007f9c:	68a3      	ldr	r3, [r4, #8]
 8007f9e:	1b9b      	subs	r3, r3, r6
 8007fa0:	60a3      	str	r3, [r4, #8]
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	4433      	add	r3, r6
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fae:	462a      	mov	r2, r5
 8007fb0:	f000 fac4 	bl	800853c <_realloc_r>
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d1e0      	bne.n	8007f7c <__ssputs_r+0x5c>
 8007fba:	6921      	ldr	r1, [r4, #16]
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	f7ff feb7 	bl	8007d30 <_free_r>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	f8ca 3000 	str.w	r3, [sl]
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fd4:	e7e9      	b.n	8007faa <__ssputs_r+0x8a>
	...

08007fd8 <_svfiprintf_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	4698      	mov	r8, r3
 8007fde:	898b      	ldrh	r3, [r1, #12]
 8007fe0:	061b      	lsls	r3, r3, #24
 8007fe2:	b09d      	sub	sp, #116	@ 0x74
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	460d      	mov	r5, r1
 8007fe8:	4614      	mov	r4, r2
 8007fea:	d510      	bpl.n	800800e <_svfiprintf_r+0x36>
 8007fec:	690b      	ldr	r3, [r1, #16]
 8007fee:	b973      	cbnz	r3, 800800e <_svfiprintf_r+0x36>
 8007ff0:	2140      	movs	r1, #64	@ 0x40
 8007ff2:	f7ff ff09 	bl	8007e08 <_malloc_r>
 8007ff6:	6028      	str	r0, [r5, #0]
 8007ff8:	6128      	str	r0, [r5, #16]
 8007ffa:	b930      	cbnz	r0, 800800a <_svfiprintf_r+0x32>
 8007ffc:	230c      	movs	r3, #12
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008004:	b01d      	add	sp, #116	@ 0x74
 8008006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800a:	2340      	movs	r3, #64	@ 0x40
 800800c:	616b      	str	r3, [r5, #20]
 800800e:	2300      	movs	r3, #0
 8008010:	9309      	str	r3, [sp, #36]	@ 0x24
 8008012:	2320      	movs	r3, #32
 8008014:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008018:	f8cd 800c 	str.w	r8, [sp, #12]
 800801c:	2330      	movs	r3, #48	@ 0x30
 800801e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081bc <_svfiprintf_r+0x1e4>
 8008022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008026:	f04f 0901 	mov.w	r9, #1
 800802a:	4623      	mov	r3, r4
 800802c:	469a      	mov	sl, r3
 800802e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008032:	b10a      	cbz	r2, 8008038 <_svfiprintf_r+0x60>
 8008034:	2a25      	cmp	r2, #37	@ 0x25
 8008036:	d1f9      	bne.n	800802c <_svfiprintf_r+0x54>
 8008038:	ebba 0b04 	subs.w	fp, sl, r4
 800803c:	d00b      	beq.n	8008056 <_svfiprintf_r+0x7e>
 800803e:	465b      	mov	r3, fp
 8008040:	4622      	mov	r2, r4
 8008042:	4629      	mov	r1, r5
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff ff6b 	bl	8007f20 <__ssputs_r>
 800804a:	3001      	adds	r0, #1
 800804c:	f000 80a7 	beq.w	800819e <_svfiprintf_r+0x1c6>
 8008050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008052:	445a      	add	r2, fp
 8008054:	9209      	str	r2, [sp, #36]	@ 0x24
 8008056:	f89a 3000 	ldrb.w	r3, [sl]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 809f 	beq.w	800819e <_svfiprintf_r+0x1c6>
 8008060:	2300      	movs	r3, #0
 8008062:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800806a:	f10a 0a01 	add.w	sl, sl, #1
 800806e:	9304      	str	r3, [sp, #16]
 8008070:	9307      	str	r3, [sp, #28]
 8008072:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008076:	931a      	str	r3, [sp, #104]	@ 0x68
 8008078:	4654      	mov	r4, sl
 800807a:	2205      	movs	r2, #5
 800807c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008080:	484e      	ldr	r0, [pc, #312]	@ (80081bc <_svfiprintf_r+0x1e4>)
 8008082:	f7f8 f8b5 	bl	80001f0 <memchr>
 8008086:	9a04      	ldr	r2, [sp, #16]
 8008088:	b9d8      	cbnz	r0, 80080c2 <_svfiprintf_r+0xea>
 800808a:	06d0      	lsls	r0, r2, #27
 800808c:	bf44      	itt	mi
 800808e:	2320      	movmi	r3, #32
 8008090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008094:	0711      	lsls	r1, r2, #28
 8008096:	bf44      	itt	mi
 8008098:	232b      	movmi	r3, #43	@ 0x2b
 800809a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800809e:	f89a 3000 	ldrb.w	r3, [sl]
 80080a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80080a4:	d015      	beq.n	80080d2 <_svfiprintf_r+0xfa>
 80080a6:	9a07      	ldr	r2, [sp, #28]
 80080a8:	4654      	mov	r4, sl
 80080aa:	2000      	movs	r0, #0
 80080ac:	f04f 0c0a 	mov.w	ip, #10
 80080b0:	4621      	mov	r1, r4
 80080b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b6:	3b30      	subs	r3, #48	@ 0x30
 80080b8:	2b09      	cmp	r3, #9
 80080ba:	d94b      	bls.n	8008154 <_svfiprintf_r+0x17c>
 80080bc:	b1b0      	cbz	r0, 80080ec <_svfiprintf_r+0x114>
 80080be:	9207      	str	r2, [sp, #28]
 80080c0:	e014      	b.n	80080ec <_svfiprintf_r+0x114>
 80080c2:	eba0 0308 	sub.w	r3, r0, r8
 80080c6:	fa09 f303 	lsl.w	r3, r9, r3
 80080ca:	4313      	orrs	r3, r2
 80080cc:	9304      	str	r3, [sp, #16]
 80080ce:	46a2      	mov	sl, r4
 80080d0:	e7d2      	b.n	8008078 <_svfiprintf_r+0xa0>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	1d19      	adds	r1, r3, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	9103      	str	r1, [sp, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bfbb      	ittet	lt
 80080de:	425b      	neglt	r3, r3
 80080e0:	f042 0202 	orrlt.w	r2, r2, #2
 80080e4:	9307      	strge	r3, [sp, #28]
 80080e6:	9307      	strlt	r3, [sp, #28]
 80080e8:	bfb8      	it	lt
 80080ea:	9204      	strlt	r2, [sp, #16]
 80080ec:	7823      	ldrb	r3, [r4, #0]
 80080ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80080f0:	d10a      	bne.n	8008108 <_svfiprintf_r+0x130>
 80080f2:	7863      	ldrb	r3, [r4, #1]
 80080f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f6:	d132      	bne.n	800815e <_svfiprintf_r+0x186>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	1d1a      	adds	r2, r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	9203      	str	r2, [sp, #12]
 8008100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008104:	3402      	adds	r4, #2
 8008106:	9305      	str	r3, [sp, #20]
 8008108:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081cc <_svfiprintf_r+0x1f4>
 800810c:	7821      	ldrb	r1, [r4, #0]
 800810e:	2203      	movs	r2, #3
 8008110:	4650      	mov	r0, sl
 8008112:	f7f8 f86d 	bl	80001f0 <memchr>
 8008116:	b138      	cbz	r0, 8008128 <_svfiprintf_r+0x150>
 8008118:	9b04      	ldr	r3, [sp, #16]
 800811a:	eba0 000a 	sub.w	r0, r0, sl
 800811e:	2240      	movs	r2, #64	@ 0x40
 8008120:	4082      	lsls	r2, r0
 8008122:	4313      	orrs	r3, r2
 8008124:	3401      	adds	r4, #1
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812c:	4824      	ldr	r0, [pc, #144]	@ (80081c0 <_svfiprintf_r+0x1e8>)
 800812e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008132:	2206      	movs	r2, #6
 8008134:	f7f8 f85c 	bl	80001f0 <memchr>
 8008138:	2800      	cmp	r0, #0
 800813a:	d036      	beq.n	80081aa <_svfiprintf_r+0x1d2>
 800813c:	4b21      	ldr	r3, [pc, #132]	@ (80081c4 <_svfiprintf_r+0x1ec>)
 800813e:	bb1b      	cbnz	r3, 8008188 <_svfiprintf_r+0x1b0>
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	3307      	adds	r3, #7
 8008144:	f023 0307 	bic.w	r3, r3, #7
 8008148:	3308      	adds	r3, #8
 800814a:	9303      	str	r3, [sp, #12]
 800814c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800814e:	4433      	add	r3, r6
 8008150:	9309      	str	r3, [sp, #36]	@ 0x24
 8008152:	e76a      	b.n	800802a <_svfiprintf_r+0x52>
 8008154:	fb0c 3202 	mla	r2, ip, r2, r3
 8008158:	460c      	mov	r4, r1
 800815a:	2001      	movs	r0, #1
 800815c:	e7a8      	b.n	80080b0 <_svfiprintf_r+0xd8>
 800815e:	2300      	movs	r3, #0
 8008160:	3401      	adds	r4, #1
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	4619      	mov	r1, r3
 8008166:	f04f 0c0a 	mov.w	ip, #10
 800816a:	4620      	mov	r0, r4
 800816c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008170:	3a30      	subs	r2, #48	@ 0x30
 8008172:	2a09      	cmp	r2, #9
 8008174:	d903      	bls.n	800817e <_svfiprintf_r+0x1a6>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0c6      	beq.n	8008108 <_svfiprintf_r+0x130>
 800817a:	9105      	str	r1, [sp, #20]
 800817c:	e7c4      	b.n	8008108 <_svfiprintf_r+0x130>
 800817e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008182:	4604      	mov	r4, r0
 8008184:	2301      	movs	r3, #1
 8008186:	e7f0      	b.n	800816a <_svfiprintf_r+0x192>
 8008188:	ab03      	add	r3, sp, #12
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	462a      	mov	r2, r5
 800818e:	4b0e      	ldr	r3, [pc, #56]	@ (80081c8 <_svfiprintf_r+0x1f0>)
 8008190:	a904      	add	r1, sp, #16
 8008192:	4638      	mov	r0, r7
 8008194:	f3af 8000 	nop.w
 8008198:	1c42      	adds	r2, r0, #1
 800819a:	4606      	mov	r6, r0
 800819c:	d1d6      	bne.n	800814c <_svfiprintf_r+0x174>
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	065b      	lsls	r3, r3, #25
 80081a2:	f53f af2d 	bmi.w	8008000 <_svfiprintf_r+0x28>
 80081a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081a8:	e72c      	b.n	8008004 <_svfiprintf_r+0x2c>
 80081aa:	ab03      	add	r3, sp, #12
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	462a      	mov	r2, r5
 80081b0:	4b05      	ldr	r3, [pc, #20]	@ (80081c8 <_svfiprintf_r+0x1f0>)
 80081b2:	a904      	add	r1, sp, #16
 80081b4:	4638      	mov	r0, r7
 80081b6:	f000 f879 	bl	80082ac <_printf_i>
 80081ba:	e7ed      	b.n	8008198 <_svfiprintf_r+0x1c0>
 80081bc:	080086b8 	.word	0x080086b8
 80081c0:	080086c2 	.word	0x080086c2
 80081c4:	00000000 	.word	0x00000000
 80081c8:	08007f21 	.word	0x08007f21
 80081cc:	080086be 	.word	0x080086be

080081d0 <_printf_common>:
 80081d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d4:	4616      	mov	r6, r2
 80081d6:	4698      	mov	r8, r3
 80081d8:	688a      	ldr	r2, [r1, #8]
 80081da:	690b      	ldr	r3, [r1, #16]
 80081dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081e0:	4293      	cmp	r3, r2
 80081e2:	bfb8      	it	lt
 80081e4:	4613      	movlt	r3, r2
 80081e6:	6033      	str	r3, [r6, #0]
 80081e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081ec:	4607      	mov	r7, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	b10a      	cbz	r2, 80081f6 <_printf_common+0x26>
 80081f2:	3301      	adds	r3, #1
 80081f4:	6033      	str	r3, [r6, #0]
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	0699      	lsls	r1, r3, #26
 80081fa:	bf42      	ittt	mi
 80081fc:	6833      	ldrmi	r3, [r6, #0]
 80081fe:	3302      	addmi	r3, #2
 8008200:	6033      	strmi	r3, [r6, #0]
 8008202:	6825      	ldr	r5, [r4, #0]
 8008204:	f015 0506 	ands.w	r5, r5, #6
 8008208:	d106      	bne.n	8008218 <_printf_common+0x48>
 800820a:	f104 0a19 	add.w	sl, r4, #25
 800820e:	68e3      	ldr	r3, [r4, #12]
 8008210:	6832      	ldr	r2, [r6, #0]
 8008212:	1a9b      	subs	r3, r3, r2
 8008214:	42ab      	cmp	r3, r5
 8008216:	dc26      	bgt.n	8008266 <_printf_common+0x96>
 8008218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800821c:	6822      	ldr	r2, [r4, #0]
 800821e:	3b00      	subs	r3, #0
 8008220:	bf18      	it	ne
 8008222:	2301      	movne	r3, #1
 8008224:	0692      	lsls	r2, r2, #26
 8008226:	d42b      	bmi.n	8008280 <_printf_common+0xb0>
 8008228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800822c:	4641      	mov	r1, r8
 800822e:	4638      	mov	r0, r7
 8008230:	47c8      	blx	r9
 8008232:	3001      	adds	r0, #1
 8008234:	d01e      	beq.n	8008274 <_printf_common+0xa4>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	6922      	ldr	r2, [r4, #16]
 800823a:	f003 0306 	and.w	r3, r3, #6
 800823e:	2b04      	cmp	r3, #4
 8008240:	bf02      	ittt	eq
 8008242:	68e5      	ldreq	r5, [r4, #12]
 8008244:	6833      	ldreq	r3, [r6, #0]
 8008246:	1aed      	subeq	r5, r5, r3
 8008248:	68a3      	ldr	r3, [r4, #8]
 800824a:	bf0c      	ite	eq
 800824c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008250:	2500      	movne	r5, #0
 8008252:	4293      	cmp	r3, r2
 8008254:	bfc4      	itt	gt
 8008256:	1a9b      	subgt	r3, r3, r2
 8008258:	18ed      	addgt	r5, r5, r3
 800825a:	2600      	movs	r6, #0
 800825c:	341a      	adds	r4, #26
 800825e:	42b5      	cmp	r5, r6
 8008260:	d11a      	bne.n	8008298 <_printf_common+0xc8>
 8008262:	2000      	movs	r0, #0
 8008264:	e008      	b.n	8008278 <_printf_common+0xa8>
 8008266:	2301      	movs	r3, #1
 8008268:	4652      	mov	r2, sl
 800826a:	4641      	mov	r1, r8
 800826c:	4638      	mov	r0, r7
 800826e:	47c8      	blx	r9
 8008270:	3001      	adds	r0, #1
 8008272:	d103      	bne.n	800827c <_printf_common+0xac>
 8008274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827c:	3501      	adds	r5, #1
 800827e:	e7c6      	b.n	800820e <_printf_common+0x3e>
 8008280:	18e1      	adds	r1, r4, r3
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	2030      	movs	r0, #48	@ 0x30
 8008286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800828a:	4422      	add	r2, r4
 800828c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008294:	3302      	adds	r3, #2
 8008296:	e7c7      	b.n	8008228 <_printf_common+0x58>
 8008298:	2301      	movs	r3, #1
 800829a:	4622      	mov	r2, r4
 800829c:	4641      	mov	r1, r8
 800829e:	4638      	mov	r0, r7
 80082a0:	47c8      	blx	r9
 80082a2:	3001      	adds	r0, #1
 80082a4:	d0e6      	beq.n	8008274 <_printf_common+0xa4>
 80082a6:	3601      	adds	r6, #1
 80082a8:	e7d9      	b.n	800825e <_printf_common+0x8e>
	...

080082ac <_printf_i>:
 80082ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b0:	7e0f      	ldrb	r7, [r1, #24]
 80082b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082b4:	2f78      	cmp	r7, #120	@ 0x78
 80082b6:	4691      	mov	r9, r2
 80082b8:	4680      	mov	r8, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	469a      	mov	sl, r3
 80082be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082c2:	d807      	bhi.n	80082d4 <_printf_i+0x28>
 80082c4:	2f62      	cmp	r7, #98	@ 0x62
 80082c6:	d80a      	bhi.n	80082de <_printf_i+0x32>
 80082c8:	2f00      	cmp	r7, #0
 80082ca:	f000 80d1 	beq.w	8008470 <_printf_i+0x1c4>
 80082ce:	2f58      	cmp	r7, #88	@ 0x58
 80082d0:	f000 80b8 	beq.w	8008444 <_printf_i+0x198>
 80082d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082dc:	e03a      	b.n	8008354 <_printf_i+0xa8>
 80082de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082e2:	2b15      	cmp	r3, #21
 80082e4:	d8f6      	bhi.n	80082d4 <_printf_i+0x28>
 80082e6:	a101      	add	r1, pc, #4	@ (adr r1, 80082ec <_printf_i+0x40>)
 80082e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082ec:	08008345 	.word	0x08008345
 80082f0:	08008359 	.word	0x08008359
 80082f4:	080082d5 	.word	0x080082d5
 80082f8:	080082d5 	.word	0x080082d5
 80082fc:	080082d5 	.word	0x080082d5
 8008300:	080082d5 	.word	0x080082d5
 8008304:	08008359 	.word	0x08008359
 8008308:	080082d5 	.word	0x080082d5
 800830c:	080082d5 	.word	0x080082d5
 8008310:	080082d5 	.word	0x080082d5
 8008314:	080082d5 	.word	0x080082d5
 8008318:	08008457 	.word	0x08008457
 800831c:	08008383 	.word	0x08008383
 8008320:	08008411 	.word	0x08008411
 8008324:	080082d5 	.word	0x080082d5
 8008328:	080082d5 	.word	0x080082d5
 800832c:	08008479 	.word	0x08008479
 8008330:	080082d5 	.word	0x080082d5
 8008334:	08008383 	.word	0x08008383
 8008338:	080082d5 	.word	0x080082d5
 800833c:	080082d5 	.word	0x080082d5
 8008340:	08008419 	.word	0x08008419
 8008344:	6833      	ldr	r3, [r6, #0]
 8008346:	1d1a      	adds	r2, r3, #4
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6032      	str	r2, [r6, #0]
 800834c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008354:	2301      	movs	r3, #1
 8008356:	e09c      	b.n	8008492 <_printf_i+0x1e6>
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	6820      	ldr	r0, [r4, #0]
 800835c:	1d19      	adds	r1, r3, #4
 800835e:	6031      	str	r1, [r6, #0]
 8008360:	0606      	lsls	r6, r0, #24
 8008362:	d501      	bpl.n	8008368 <_printf_i+0xbc>
 8008364:	681d      	ldr	r5, [r3, #0]
 8008366:	e003      	b.n	8008370 <_printf_i+0xc4>
 8008368:	0645      	lsls	r5, r0, #25
 800836a:	d5fb      	bpl.n	8008364 <_printf_i+0xb8>
 800836c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008370:	2d00      	cmp	r5, #0
 8008372:	da03      	bge.n	800837c <_printf_i+0xd0>
 8008374:	232d      	movs	r3, #45	@ 0x2d
 8008376:	426d      	negs	r5, r5
 8008378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800837c:	4858      	ldr	r0, [pc, #352]	@ (80084e0 <_printf_i+0x234>)
 800837e:	230a      	movs	r3, #10
 8008380:	e011      	b.n	80083a6 <_printf_i+0xfa>
 8008382:	6821      	ldr	r1, [r4, #0]
 8008384:	6833      	ldr	r3, [r6, #0]
 8008386:	0608      	lsls	r0, r1, #24
 8008388:	f853 5b04 	ldr.w	r5, [r3], #4
 800838c:	d402      	bmi.n	8008394 <_printf_i+0xe8>
 800838e:	0649      	lsls	r1, r1, #25
 8008390:	bf48      	it	mi
 8008392:	b2ad      	uxthmi	r5, r5
 8008394:	2f6f      	cmp	r7, #111	@ 0x6f
 8008396:	4852      	ldr	r0, [pc, #328]	@ (80084e0 <_printf_i+0x234>)
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	bf14      	ite	ne
 800839c:	230a      	movne	r3, #10
 800839e:	2308      	moveq	r3, #8
 80083a0:	2100      	movs	r1, #0
 80083a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083a6:	6866      	ldr	r6, [r4, #4]
 80083a8:	60a6      	str	r6, [r4, #8]
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	db05      	blt.n	80083ba <_printf_i+0x10e>
 80083ae:	6821      	ldr	r1, [r4, #0]
 80083b0:	432e      	orrs	r6, r5
 80083b2:	f021 0104 	bic.w	r1, r1, #4
 80083b6:	6021      	str	r1, [r4, #0]
 80083b8:	d04b      	beq.n	8008452 <_printf_i+0x1a6>
 80083ba:	4616      	mov	r6, r2
 80083bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80083c0:	fb03 5711 	mls	r7, r3, r1, r5
 80083c4:	5dc7      	ldrb	r7, [r0, r7]
 80083c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083ca:	462f      	mov	r7, r5
 80083cc:	42bb      	cmp	r3, r7
 80083ce:	460d      	mov	r5, r1
 80083d0:	d9f4      	bls.n	80083bc <_printf_i+0x110>
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	d10b      	bne.n	80083ee <_printf_i+0x142>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	07df      	lsls	r7, r3, #31
 80083da:	d508      	bpl.n	80083ee <_printf_i+0x142>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	6861      	ldr	r1, [r4, #4]
 80083e0:	4299      	cmp	r1, r3
 80083e2:	bfde      	ittt	le
 80083e4:	2330      	movle	r3, #48	@ 0x30
 80083e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083ea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80083ee:	1b92      	subs	r2, r2, r6
 80083f0:	6122      	str	r2, [r4, #16]
 80083f2:	f8cd a000 	str.w	sl, [sp]
 80083f6:	464b      	mov	r3, r9
 80083f8:	aa03      	add	r2, sp, #12
 80083fa:	4621      	mov	r1, r4
 80083fc:	4640      	mov	r0, r8
 80083fe:	f7ff fee7 	bl	80081d0 <_printf_common>
 8008402:	3001      	adds	r0, #1
 8008404:	d14a      	bne.n	800849c <_printf_i+0x1f0>
 8008406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800840a:	b004      	add	sp, #16
 800840c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	f043 0320 	orr.w	r3, r3, #32
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	4832      	ldr	r0, [pc, #200]	@ (80084e4 <_printf_i+0x238>)
 800841a:	2778      	movs	r7, #120	@ 0x78
 800841c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	6831      	ldr	r1, [r6, #0]
 8008424:	061f      	lsls	r7, r3, #24
 8008426:	f851 5b04 	ldr.w	r5, [r1], #4
 800842a:	d402      	bmi.n	8008432 <_printf_i+0x186>
 800842c:	065f      	lsls	r7, r3, #25
 800842e:	bf48      	it	mi
 8008430:	b2ad      	uxthmi	r5, r5
 8008432:	6031      	str	r1, [r6, #0]
 8008434:	07d9      	lsls	r1, r3, #31
 8008436:	bf44      	itt	mi
 8008438:	f043 0320 	orrmi.w	r3, r3, #32
 800843c:	6023      	strmi	r3, [r4, #0]
 800843e:	b11d      	cbz	r5, 8008448 <_printf_i+0x19c>
 8008440:	2310      	movs	r3, #16
 8008442:	e7ad      	b.n	80083a0 <_printf_i+0xf4>
 8008444:	4826      	ldr	r0, [pc, #152]	@ (80084e0 <_printf_i+0x234>)
 8008446:	e7e9      	b.n	800841c <_printf_i+0x170>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	f023 0320 	bic.w	r3, r3, #32
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	e7f6      	b.n	8008440 <_printf_i+0x194>
 8008452:	4616      	mov	r6, r2
 8008454:	e7bd      	b.n	80083d2 <_printf_i+0x126>
 8008456:	6833      	ldr	r3, [r6, #0]
 8008458:	6825      	ldr	r5, [r4, #0]
 800845a:	6961      	ldr	r1, [r4, #20]
 800845c:	1d18      	adds	r0, r3, #4
 800845e:	6030      	str	r0, [r6, #0]
 8008460:	062e      	lsls	r6, r5, #24
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	d501      	bpl.n	800846a <_printf_i+0x1be>
 8008466:	6019      	str	r1, [r3, #0]
 8008468:	e002      	b.n	8008470 <_printf_i+0x1c4>
 800846a:	0668      	lsls	r0, r5, #25
 800846c:	d5fb      	bpl.n	8008466 <_printf_i+0x1ba>
 800846e:	8019      	strh	r1, [r3, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	4616      	mov	r6, r2
 8008476:	e7bc      	b.n	80083f2 <_printf_i+0x146>
 8008478:	6833      	ldr	r3, [r6, #0]
 800847a:	1d1a      	adds	r2, r3, #4
 800847c:	6032      	str	r2, [r6, #0]
 800847e:	681e      	ldr	r6, [r3, #0]
 8008480:	6862      	ldr	r2, [r4, #4]
 8008482:	2100      	movs	r1, #0
 8008484:	4630      	mov	r0, r6
 8008486:	f7f7 feb3 	bl	80001f0 <memchr>
 800848a:	b108      	cbz	r0, 8008490 <_printf_i+0x1e4>
 800848c:	1b80      	subs	r0, r0, r6
 800848e:	6060      	str	r0, [r4, #4]
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	2300      	movs	r3, #0
 8008496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800849a:	e7aa      	b.n	80083f2 <_printf_i+0x146>
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	4632      	mov	r2, r6
 80084a0:	4649      	mov	r1, r9
 80084a2:	4640      	mov	r0, r8
 80084a4:	47d0      	blx	sl
 80084a6:	3001      	adds	r0, #1
 80084a8:	d0ad      	beq.n	8008406 <_printf_i+0x15a>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	079b      	lsls	r3, r3, #30
 80084ae:	d413      	bmi.n	80084d8 <_printf_i+0x22c>
 80084b0:	68e0      	ldr	r0, [r4, #12]
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	4298      	cmp	r0, r3
 80084b6:	bfb8      	it	lt
 80084b8:	4618      	movlt	r0, r3
 80084ba:	e7a6      	b.n	800840a <_printf_i+0x15e>
 80084bc:	2301      	movs	r3, #1
 80084be:	4632      	mov	r2, r6
 80084c0:	4649      	mov	r1, r9
 80084c2:	4640      	mov	r0, r8
 80084c4:	47d0      	blx	sl
 80084c6:	3001      	adds	r0, #1
 80084c8:	d09d      	beq.n	8008406 <_printf_i+0x15a>
 80084ca:	3501      	adds	r5, #1
 80084cc:	68e3      	ldr	r3, [r4, #12]
 80084ce:	9903      	ldr	r1, [sp, #12]
 80084d0:	1a5b      	subs	r3, r3, r1
 80084d2:	42ab      	cmp	r3, r5
 80084d4:	dcf2      	bgt.n	80084bc <_printf_i+0x210>
 80084d6:	e7eb      	b.n	80084b0 <_printf_i+0x204>
 80084d8:	2500      	movs	r5, #0
 80084da:	f104 0619 	add.w	r6, r4, #25
 80084de:	e7f5      	b.n	80084cc <_printf_i+0x220>
 80084e0:	080086c9 	.word	0x080086c9
 80084e4:	080086da 	.word	0x080086da

080084e8 <memmove>:
 80084e8:	4288      	cmp	r0, r1
 80084ea:	b510      	push	{r4, lr}
 80084ec:	eb01 0402 	add.w	r4, r1, r2
 80084f0:	d902      	bls.n	80084f8 <memmove+0x10>
 80084f2:	4284      	cmp	r4, r0
 80084f4:	4623      	mov	r3, r4
 80084f6:	d807      	bhi.n	8008508 <memmove+0x20>
 80084f8:	1e43      	subs	r3, r0, #1
 80084fa:	42a1      	cmp	r1, r4
 80084fc:	d008      	beq.n	8008510 <memmove+0x28>
 80084fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008502:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008506:	e7f8      	b.n	80084fa <memmove+0x12>
 8008508:	4402      	add	r2, r0
 800850a:	4601      	mov	r1, r0
 800850c:	428a      	cmp	r2, r1
 800850e:	d100      	bne.n	8008512 <memmove+0x2a>
 8008510:	bd10      	pop	{r4, pc}
 8008512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800851a:	e7f7      	b.n	800850c <memmove+0x24>

0800851c <_sbrk_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4d06      	ldr	r5, [pc, #24]	@ (8008538 <_sbrk_r+0x1c>)
 8008520:	2300      	movs	r3, #0
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	602b      	str	r3, [r5, #0]
 8008528:	f7f8 fd08 	bl	8000f3c <_sbrk>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_sbrk_r+0x1a>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_sbrk_r+0x1a>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20003464 	.word	0x20003464

0800853c <_realloc_r>:
 800853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008540:	4607      	mov	r7, r0
 8008542:	4614      	mov	r4, r2
 8008544:	460d      	mov	r5, r1
 8008546:	b921      	cbnz	r1, 8008552 <_realloc_r+0x16>
 8008548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800854c:	4611      	mov	r1, r2
 800854e:	f7ff bc5b 	b.w	8007e08 <_malloc_r>
 8008552:	b92a      	cbnz	r2, 8008560 <_realloc_r+0x24>
 8008554:	f7ff fbec 	bl	8007d30 <_free_r>
 8008558:	4625      	mov	r5, r4
 800855a:	4628      	mov	r0, r5
 800855c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008560:	f000 f81a 	bl	8008598 <_malloc_usable_size_r>
 8008564:	4284      	cmp	r4, r0
 8008566:	4606      	mov	r6, r0
 8008568:	d802      	bhi.n	8008570 <_realloc_r+0x34>
 800856a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800856e:	d8f4      	bhi.n	800855a <_realloc_r+0x1e>
 8008570:	4621      	mov	r1, r4
 8008572:	4638      	mov	r0, r7
 8008574:	f7ff fc48 	bl	8007e08 <_malloc_r>
 8008578:	4680      	mov	r8, r0
 800857a:	b908      	cbnz	r0, 8008580 <_realloc_r+0x44>
 800857c:	4645      	mov	r5, r8
 800857e:	e7ec      	b.n	800855a <_realloc_r+0x1e>
 8008580:	42b4      	cmp	r4, r6
 8008582:	4622      	mov	r2, r4
 8008584:	4629      	mov	r1, r5
 8008586:	bf28      	it	cs
 8008588:	4632      	movcs	r2, r6
 800858a:	f7ff fbc3 	bl	8007d14 <memcpy>
 800858e:	4629      	mov	r1, r5
 8008590:	4638      	mov	r0, r7
 8008592:	f7ff fbcd 	bl	8007d30 <_free_r>
 8008596:	e7f1      	b.n	800857c <_realloc_r+0x40>

08008598 <_malloc_usable_size_r>:
 8008598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800859c:	1f18      	subs	r0, r3, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bfbc      	itt	lt
 80085a2:	580b      	ldrlt	r3, [r1, r0]
 80085a4:	18c0      	addlt	r0, r0, r3
 80085a6:	4770      	bx	lr

080085a8 <_init>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	bf00      	nop
 80085ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ae:	bc08      	pop	{r3}
 80085b0:	469e      	mov	lr, r3
 80085b2:	4770      	bx	lr

080085b4 <_fini>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr
