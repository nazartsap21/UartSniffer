
uart_sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008440  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080085e0  080085e0  000095e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800870c  0800870c  0000a064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800870c  0800870c  0000970c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008714  08008714  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008714  08008714  00009714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008718  08008718  00009718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800871c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a064  2**0
                  CONTENTS
 10 .bss          00003610  20000064  20000064  0000a064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003674  20003674  0000a064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aef0  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000384d  00000000  00000000  00024f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  000287d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104f  00000000  00000000  00029cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035b3  00000000  00000000  0002ad0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c8a  00000000  00000000  0002e2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d446f  00000000  00000000  00046f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b3bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c88  00000000  00000000  0011b400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00121088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085c8 	.word	0x080085c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080085c8 	.word	0x080085c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <clear_buffer>:
buffer_id             uart3_rx_id       = SNIFFER_BUFFER_2;
message_end_condition message_end_state = MESSAGE_END_CURSOR;


void clear_buffer(uint8_t buffer_id)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  switch (buffer_id)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d002      	beq.n	80002a6 <clear_buffer+0x16>
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d007      	beq.n	80002b4 <clear_buffer+0x24>
      break;
    case SNIFFER_BUFFER_2:
      memset(uart3_rx_buffer, 0, sizeof(uart3_rx_buffer));
      break;
    default:
      return;
 80002a4:	e00d      	b.n	80002c2 <clear_buffer+0x32>
      memset(uart1_rx_buffer, 0, sizeof(uart1_rx_buffer));
 80002a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002aa:	2100      	movs	r1, #0
 80002ac:	4806      	ldr	r0, [pc, #24]	@ (80002c8 <clear_buffer+0x38>)
 80002ae:	f007 fcaf 	bl	8007c10 <memset>
      break;
 80002b2:	e006      	b.n	80002c2 <clear_buffer+0x32>
      memset(uart3_rx_buffer, 0, sizeof(uart3_rx_buffer));
 80002b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002b8:	2100      	movs	r1, #0
 80002ba:	4804      	ldr	r0, [pc, #16]	@ (80002cc <clear_buffer+0x3c>)
 80002bc:	f007 fca8 	bl	8007c10 <memset>
      break;
 80002c0:	bf00      	nop
  }
}
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	200002a8 	.word	0x200002a8
 80002cc:	200004ac 	.word	0x200004ac

080002d0 <print_all_received_messages>:
  }
}


void print_all_received_messages(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08e      	sub	sp, #56	@ 0x38
 80002d4:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < message_index; i++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80002dc:	e05d      	b.n	800039a <print_all_received_messages+0xca>
  {
    char timebuf[32];
    char linebuf[16];
    sprintf(timebuf, "[%lu ms] ", received_data[i].timestamp);
 80002de:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80002e2:	4934      	ldr	r1, [pc, #208]	@ (80003b4 <print_all_received_messages+0xe4>)
 80002e4:	4613      	mov	r3, r2
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	4413      	add	r3, r2
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	440b      	add	r3, r1
 80002ee:	3324      	adds	r3, #36	@ 0x24
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4930      	ldr	r1, [pc, #192]	@ (80003b8 <print_all_received_messages+0xe8>)
 80002f6:	4618      	mov	r0, r3
 80002f8:	f007 fc68 	bl	8007bcc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)timebuf, strlen(timebuf), 100);
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff6e 	bl	80001e0 <strlen>
 8000304:	4603      	mov	r3, r0
 8000306:	b29a      	uxth	r2, r3
 8000308:	1d39      	adds	r1, r7, #4
 800030a:	2364      	movs	r3, #100	@ 0x64
 800030c:	482b      	ldr	r0, [pc, #172]	@ (80003bc <print_all_received_messages+0xec>)
 800030e:	f003 fb3d 	bl	800398c <HAL_UART_Transmit>
    sprintf(linebuf, "UART%d: ", received_data[i].line == SNIFFER_BUFFER_1 ? 1 : 3);
 8000312:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000316:	4927      	ldr	r1, [pc, #156]	@ (80003b4 <print_all_received_messages+0xe4>)
 8000318:	4613      	mov	r3, r2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	4413      	add	r3, r2
 800031e:	00db      	lsls	r3, r3, #3
 8000320:	440b      	add	r3, r1
 8000322:	3321      	adds	r3, #33	@ 0x21
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d101      	bne.n	800032e <print_all_received_messages+0x5e>
 800032a:	2201      	movs	r2, #1
 800032c:	e000      	b.n	8000330 <print_all_received_messages+0x60>
 800032e:	2203      	movs	r2, #3
 8000330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000334:	4922      	ldr	r1, [pc, #136]	@ (80003c0 <print_all_received_messages+0xf0>)
 8000336:	4618      	mov	r0, r3
 8000338:	f007 fc48 	bl	8007bcc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)linebuf, strlen(linebuf), 100);
 800033c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff4d 	bl	80001e0 <strlen>
 8000346:	4603      	mov	r3, r0
 8000348:	b29a      	uxth	r2, r3
 800034a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800034e:	2364      	movs	r3, #100	@ 0x64
 8000350:	481a      	ldr	r0, [pc, #104]	@ (80003bc <print_all_received_messages+0xec>)
 8000352:	f003 fb1b 	bl	800398c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, received_data[i].message, received_data[i].length, 100);
 8000356:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800035a:	4613      	mov	r3, r2
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	4a14      	ldr	r2, [pc, #80]	@ (80003b4 <print_all_received_messages+0xe4>)
 8000364:	1899      	adds	r1, r3, r2
 8000366:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800036a:	4812      	ldr	r0, [pc, #72]	@ (80003b4 <print_all_received_messages+0xe4>)
 800036c:	4613      	mov	r3, r2
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4413      	add	r3, r2
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	4403      	add	r3, r0
 8000376:	3320      	adds	r3, #32
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	461a      	mov	r2, r3
 800037c:	2364      	movs	r3, #100	@ 0x64
 800037e:	480f      	ldr	r0, [pc, #60]	@ (80003bc <print_all_received_messages+0xec>)
 8000380:	f003 fb04 	bl	800398c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, 100);
 8000384:	2364      	movs	r3, #100	@ 0x64
 8000386:	2202      	movs	r2, #2
 8000388:	490e      	ldr	r1, [pc, #56]	@ (80003c4 <print_all_received_messages+0xf4>)
 800038a:	480c      	ldr	r0, [pc, #48]	@ (80003bc <print_all_received_messages+0xec>)
 800038c:	f003 fafe 	bl	800398c <HAL_UART_Transmit>
  for (uint8_t i = 0; i < message_index; i++)
 8000390:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000394:	3301      	adds	r3, #1
 8000396:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <print_all_received_messages+0xf8>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d39b      	bcc.n	80002de <print_all_received_messages+0xe>
  }

  message_index = 0;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <print_all_received_messages+0xf8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	3738      	adds	r7, #56	@ 0x38
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200006b0 	.word	0x200006b0
 80003b8:	080085f0 	.word	0x080085f0
 80003bc:	20000108 	.word	0x20000108
 80003c0:	080085fc 	.word	0x080085fc
 80003c4:	08008608 	.word	0x08008608
 80003c8:	20001ab0 	.word	0x20001ab0

080003cc <handle_receive>:


void handle_receive(uint8_t buffer_byte, uint8_t buffer_id)
{
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	460a      	mov	r2, r1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	71bb      	strb	r3, [r7, #6]
  static uint8_t  temp_buffer[64];
  static uint16_t temp_index = 0;

  if (message_end_state >= MESSAGE_END_TOTAL)
 80003dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000558 <handle_receive+0x18c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f200 80b4 	bhi.w	800054e <handle_receive+0x182>
    return;

  temp_buffer[temp_index++] = buffer_byte;
 80003e6:	4b5d      	ldr	r3, [pc, #372]	@ (800055c <handle_receive+0x190>)
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	b291      	uxth	r1, r2
 80003ee:	4a5b      	ldr	r2, [pc, #364]	@ (800055c <handle_receive+0x190>)
 80003f0:	8011      	strh	r1, [r2, #0]
 80003f2:	4619      	mov	r1, r3
 80003f4:	4a5a      	ldr	r2, [pc, #360]	@ (8000560 <handle_receive+0x194>)
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	5453      	strb	r3, [r2, r1]

  if (temp_index >= 64)
 80003fa:	4b58      	ldr	r3, [pc, #352]	@ (800055c <handle_receive+0x190>)
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000400:	d903      	bls.n	800040a <handle_receive+0x3e>
  {
    temp_index = 0;
 8000402:	4b56      	ldr	r3, [pc, #344]	@ (800055c <handle_receive+0x190>)
 8000404:	2200      	movs	r2, #0
 8000406:	801a      	strh	r2, [r3, #0]
    return;
 8000408:	e0a2      	b.n	8000550 <handle_receive+0x184>
  }

  uint8_t is_end = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	73fb      	strb	r3, [r7, #15]
  switch (message_end_state)
 800040e:	4b52      	ldr	r3, [pc, #328]	@ (8000558 <handle_receive+0x18c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b03      	cmp	r3, #3
 8000414:	d82a      	bhi.n	800046c <handle_receive+0xa0>
 8000416:	a201      	add	r2, pc, #4	@ (adr r2, 800041c <handle_receive+0x50>)
 8000418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041c:	0800042d 	.word	0x0800042d
 8000420:	08000433 	.word	0x08000433
 8000424:	0800043f 	.word	0x0800043f
 8000428:	0800044b 	.word	0x0800044b
  {
    case MESSAGE_END_BYTE:
      is_end = 1;
 800042c:	2301      	movs	r3, #1
 800042e:	73fb      	strb	r3, [r7, #15]
      break;
 8000430:	e023      	b.n	800047a <handle_receive+0xae>
    case MESSAGE_END_NEWLINE:
      if (buffer_byte == '\n')
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b0a      	cmp	r3, #10
 8000436:	d11b      	bne.n	8000470 <handle_receive+0xa4>
        is_end = 1;
 8000438:	2301      	movs	r3, #1
 800043a:	73fb      	strb	r3, [r7, #15]
      break;
 800043c:	e018      	b.n	8000470 <handle_receive+0xa4>
    case MESSAGE_END_CURSOR:
      if (buffer_byte == '\r')
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b0d      	cmp	r3, #13
 8000442:	d117      	bne.n	8000474 <handle_receive+0xa8>
        is_end = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	73fb      	strb	r3, [r7, #15]
      break;
 8000448:	e014      	b.n	8000474 <handle_receive+0xa8>
    case MESSAGE_END_NEWLINE_CURSOR:
      if (buffer_byte == '\r' && temp_index > 1 && temp_buffer[temp_index - 2] == '\n')
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2b0d      	cmp	r3, #13
 800044e:	d113      	bne.n	8000478 <handle_receive+0xac>
 8000450:	4b42      	ldr	r3, [pc, #264]	@ (800055c <handle_receive+0x190>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d90f      	bls.n	8000478 <handle_receive+0xac>
 8000458:	4b40      	ldr	r3, [pc, #256]	@ (800055c <handle_receive+0x190>)
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	3b02      	subs	r3, #2
 800045e:	4a40      	ldr	r2, [pc, #256]	@ (8000560 <handle_receive+0x194>)
 8000460:	5cd3      	ldrb	r3, [r2, r3]
 8000462:	2b0a      	cmp	r3, #10
 8000464:	d108      	bne.n	8000478 <handle_receive+0xac>
        is_end = 1;
 8000466:	2301      	movs	r3, #1
 8000468:	73fb      	strb	r3, [r7, #15]
      break;
 800046a:	e005      	b.n	8000478 <handle_receive+0xac>
    default:
      break;
 800046c:	bf00      	nop
 800046e:	e004      	b.n	800047a <handle_receive+0xae>
      break;
 8000470:	bf00      	nop
 8000472:	e002      	b.n	800047a <handle_receive+0xae>
      break;
 8000474:	bf00      	nop
 8000476:	e000      	b.n	800047a <handle_receive+0xae>
      break;
 8000478:	bf00      	nop
  }

  if (is_end)
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d067      	beq.n	8000550 <handle_receive+0x184>
  {
    memcpy(received_data[message_index].message, temp_buffer, temp_index);
 8000480:	4b38      	ldr	r3, [pc, #224]	@ (8000564 <handle_receive+0x198>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	4a36      	ldr	r2, [pc, #216]	@ (8000568 <handle_receive+0x19c>)
 8000490:	4413      	add	r3, r2
 8000492:	4a32      	ldr	r2, [pc, #200]	@ (800055c <handle_receive+0x190>)
 8000494:	8812      	ldrh	r2, [r2, #0]
 8000496:	4932      	ldr	r1, [pc, #200]	@ (8000560 <handle_receive+0x194>)
 8000498:	4618      	mov	r0, r3
 800049a:	f007 fc4b 	bl	8007d34 <memcpy>
    received_data[message_index].length    = temp_index;
 800049e:	4b2f      	ldr	r3, [pc, #188]	@ (800055c <handle_receive+0x190>)
 80004a0:	881a      	ldrh	r2, [r3, #0]
 80004a2:	4b30      	ldr	r3, [pc, #192]	@ (8000564 <handle_receive+0x198>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	b2d0      	uxtb	r0, r2
 80004aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000568 <handle_receive+0x19c>)
 80004ac:	460b      	mov	r3, r1
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	440b      	add	r3, r1
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	4413      	add	r3, r2
 80004b6:	3320      	adds	r3, #32
 80004b8:	4602      	mov	r2, r0
 80004ba:	701a      	strb	r2, [r3, #0]
    received_data[message_index].line      = buffer_id;
 80004bc:	4b29      	ldr	r3, [pc, #164]	@ (8000564 <handle_receive+0x198>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4619      	mov	r1, r3
 80004c2:	4a29      	ldr	r2, [pc, #164]	@ (8000568 <handle_receive+0x19c>)
 80004c4:	460b      	mov	r3, r1
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	440b      	add	r3, r1
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	4413      	add	r3, r2
 80004ce:	3321      	adds	r3, #33	@ 0x21
 80004d0:	79ba      	ldrb	r2, [r7, #6]
 80004d2:	701a      	strb	r2, [r3, #0]
    received_data[message_index].timestamp = HAL_GetTick();
 80004d4:	4b23      	ldr	r3, [pc, #140]	@ (8000564 <handle_receive+0x198>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461c      	mov	r4, r3
 80004da:	f000 fddd 	bl	8001098 <HAL_GetTick>
 80004de:	4602      	mov	r2, r0
 80004e0:	4921      	ldr	r1, [pc, #132]	@ (8000568 <handle_receive+0x19c>)
 80004e2:	4623      	mov	r3, r4
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4423      	add	r3, r4
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	440b      	add	r3, r1
 80004ec:	3324      	adds	r3, #36	@ 0x24
 80004ee:	601a      	str	r2, [r3, #0]
    if (++message_index >= MAX_MESSAGES)
 80004f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <handle_receive+0x198>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <handle_receive+0x198>)
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <handle_receive+0x198>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b25b      	sxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	da0c      	bge.n	8000520 <handle_receive+0x154>
    {
      keep_receiving = 0;
 8000506:	4b19      	ldr	r3, [pc, #100]	@ (800056c <handle_receive+0x1a0>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
      receive        = 0;
 800050c:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <handle_receive+0x1a4>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Sniffing OFF\r\n", 14);
 8000512:	220e      	movs	r2, #14
 8000514:	4917      	ldr	r1, [pc, #92]	@ (8000574 <handle_receive+0x1a8>)
 8000516:	4818      	ldr	r0, [pc, #96]	@ (8000578 <handle_receive+0x1ac>)
 8000518:	f003 fac2 	bl	8003aa0 <HAL_UART_Transmit_IT>
      print_all_received_messages();
 800051c:	f7ff fed8 	bl	80002d0 <print_all_received_messages>
    }

    temp_index = 0;
 8000520:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <handle_receive+0x190>)
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
    memset(temp_buffer, 0, sizeof(temp_buffer));
 8000526:	2240      	movs	r2, #64	@ 0x40
 8000528:	2100      	movs	r1, #0
 800052a:	480d      	ldr	r0, [pc, #52]	@ (8000560 <handle_receive+0x194>)
 800052c:	f007 fb70 	bl	8007c10 <memset>
    memset(received_data[message_index].message, 0, MAX_MESSAGE_LENGHT);
 8000530:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <handle_receive+0x198>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <handle_receive+0x19c>)
 8000540:	4413      	add	r3, r2
 8000542:	2220      	movs	r2, #32
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f007 fb62 	bl	8007c10 <memset>
 800054c:	e000      	b.n	8000550 <handle_receive+0x184>
    return;
 800054e:	bf00      	nop
  }
}
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	bd90      	pop	{r4, r7, pc}
 8000556:	bf00      	nop
 8000558:	20000001 	.word	0x20000001
 800055c:	20001ab4 	.word	0x20001ab4
 8000560:	20001ab8 	.word	0x20001ab8
 8000564:	20001ab0 	.word	0x20001ab0
 8000568:	200006b0 	.word	0x200006b0
 800056c:	20001ab1 	.word	0x20001ab1
 8000570:	200006af 	.word	0x200006af
 8000574:	0800860c 	.word	0x0800860c
 8000578:	20000108 	.word	0x20000108

0800057c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (!receive)
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <HAL_UART_RxCpltCallback+0xa8>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d105      	bne.n	8000598 <HAL_UART_RxCpltCallback+0x1c>
  {
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Sniffing stopped\r\n", 18);
 800058c:	2212      	movs	r2, #18
 800058e:	4926      	ldr	r1, [pc, #152]	@ (8000628 <HAL_UART_RxCpltCallback+0xac>)
 8000590:	4826      	ldr	r0, [pc, #152]	@ (800062c <HAL_UART_RxCpltCallback+0xb0>)
 8000592:	f003 fa85 	bl	8003aa0 <HAL_UART_Transmit_IT>
    return;
 8000596:	e041      	b.n	800061c <HAL_UART_RxCpltCallback+0xa0>
  }

  if (huart == &huart1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a25      	ldr	r2, [pc, #148]	@ (8000630 <HAL_UART_RxCpltCallback+0xb4>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d11c      	bne.n	80005da <HAL_UART_RxCpltCallback+0x5e>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a8:	f001 fa42 	bl	8001a30 <HAL_GPIO_WritePin>
    handle_receive(uart1_rx_byte, uart1_rx_id);
 80005ac:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <HAL_UART_RxCpltCallback+0xb8>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <HAL_UART_RxCpltCallback+0xbc>)
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	4611      	mov	r1, r2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ff08 	bl	80003cc <handle_receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2120      	movs	r1, #32
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f001 fa34 	bl	8001a30 <HAL_GPIO_WritePin>
    if (keep_receiving)
 80005c8:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <HAL_UART_RxCpltCallback+0xc0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d004      	beq.n	80005da <HAL_UART_RxCpltCallback+0x5e>
    {
      HAL_UART_Receive_DMA(&huart1, &uart1_rx_byte, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	4918      	ldr	r1, [pc, #96]	@ (8000634 <HAL_UART_RxCpltCallback+0xb8>)
 80005d4:	4816      	ldr	r0, [pc, #88]	@ (8000630 <HAL_UART_RxCpltCallback+0xb4>)
 80005d6:	f003 fac1 	bl	8003b5c <HAL_UART_Receive_DMA>
    }
  }
  if (huart == &huart3)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a18      	ldr	r2, [pc, #96]	@ (8000640 <HAL_UART_RxCpltCallback+0xc4>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d11c      	bne.n	800061c <HAL_UART_RxCpltCallback+0xa0>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2120      	movs	r1, #32
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ea:	f001 fa21 	bl	8001a30 <HAL_GPIO_WritePin>
    handle_receive(uart3_rx_byte, uart3_rx_id);\
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_UART_RxCpltCallback+0xc8>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4a15      	ldr	r2, [pc, #84]	@ (8000648 <HAL_UART_RxCpltCallback+0xcc>)
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	4611      	mov	r1, r2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fee7 	bl	80003cc <handle_receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2120      	movs	r1, #32
 8000602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000606:	f001 fa13 	bl	8001a30 <HAL_GPIO_WritePin>
    if (keep_receiving)
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <HAL_UART_RxCpltCallback+0xc0>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d004      	beq.n	800061c <HAL_UART_RxCpltCallback+0xa0>
    {
      HAL_UART_Receive_DMA(&huart3, &uart3_rx_byte, 1);
 8000612:	2201      	movs	r2, #1
 8000614:	490b      	ldr	r1, [pc, #44]	@ (8000644 <HAL_UART_RxCpltCallback+0xc8>)
 8000616:	480a      	ldr	r0, [pc, #40]	@ (8000640 <HAL_UART_RxCpltCallback+0xc4>)
 8000618:	f003 faa0 	bl	8003b5c <HAL_UART_Receive_DMA>
    }
  }
}
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200006af 	.word	0x200006af
 8000628:	0800861c 	.word	0x0800861c
 800062c:	20000108 	.word	0x20000108
 8000630:	20000080 	.word	0x20000080
 8000634:	200004a8 	.word	0x200004a8
 8000638:	20001ab2 	.word	0x20001ab2
 800063c:	20001ab1 	.word	0x20001ab1
 8000640:	20000190 	.word	0x20000190
 8000644:	200006ac 	.word	0x200006ac
 8000648:	20000000 	.word	0x20000000

0800064c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
  }
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 fcee 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f82c 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 f942 	bl	80008f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000670:	f000 f91a 	bl	80008a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000674:	f000 f8b8 	bl	80007e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000678:	f000 f8e6 	bl	8000848 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800067c:	f000 f884 	bl	8000788 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000680:	f004 fcf4 	bl	800506c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_App, NULL, &Task1_attributes);
 8000684:	4a09      	ldr	r2, [pc, #36]	@ (80006ac <main+0x4c>)
 8000686:	2100      	movs	r1, #0
 8000688:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <main+0x50>)
 800068a:	f004 fd57 	bl	800513c <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <main+0x54>)
 8000692:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_App, NULL, &Task2_attributes);
 8000694:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <main+0x58>)
 8000696:	2100      	movs	r1, #0
 8000698:	4808      	ldr	r0, [pc, #32]	@ (80006bc <main+0x5c>)
 800069a:	f004 fd4f 	bl	800513c <osThreadNew>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <main+0x60>)
 80006a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a4:	f004 fd16 	bl	80050d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <main+0x48>
 80006ac:	08008658 	.word	0x08008658
 80006b0:	080009c1 	.word	0x080009c1
 80006b4:	200002a0 	.word	0x200002a0
 80006b8:	0800867c 	.word	0x0800867c
 80006bc:	08000ac5 	.word	0x08000ac5
 80006c0:	200002a4 	.word	0x200002a4

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0a6      	sub	sp, #152	@ 0x98
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006ce:	2228      	movs	r2, #40	@ 0x28
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 fa9c 	bl	8007c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2258      	movs	r2, #88	@ 0x58
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f007 fa8e 	bl	8007c10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fc:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800070c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000710:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000714:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f99c 	bl	8001a60 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800072e:	f000 f9e5 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000742:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f9aa 	bl	8002aa8 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075a:	f000 f9cf 	bl	8000afc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800075e:	2307      	movs	r3, #7
 8000760:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fbdd 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800077c:	f000 f9be 	bl	8000afc <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3798      	adds	r7, #152	@ 0x98
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <MX_USART1_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART1_UART_Init+0x58>)
 80007cc:	f003 f890 	bl	80038f0 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f991 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000080 	.word	0x20000080
 80007e4:	40013800 	.word	0x40013800

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	@ (8000844 <MX_USART2_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART2_UART_Init+0x58>)
 800082c:	f003 f860 	bl	80038f0 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f961 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000108 	.word	0x20000108
 8000844:	40004400 	.word	0x40004400

08000848 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	@ (80008a4 <MX_USART3_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800086e:	2204      	movs	r2, #4
 8000870:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800088c:	f003 f830 	bl	80038f0 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f931 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000190 	.word	0x20000190
 80008a4:	40004800 	.word	0x40004800

080008a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_DMA_Init+0x48>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <MX_DMA_Init+0x48>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <MX_DMA_Init+0x48>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2105      	movs	r1, #5
 80008ca:	200d      	movs	r0, #13
 80008cc:	f000 fca8 	bl	8001220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008d0:	200d      	movs	r0, #13
 80008d2:	f000 fcc1 	bl	8001258 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2105      	movs	r1, #5
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 fca0 	bl	8001220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008e0:	200f      	movs	r0, #15
 80008e2:	f000 fcb9 	bl	8001258 <HAL_NVIC_EnableIRQ>

}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a2a      	ldr	r2, [pc, #168]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000910:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000922:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a24      	ldr	r2, [pc, #144]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000928:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a1e      	ldr	r2, [pc, #120]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a18      	ldr	r2, [pc, #96]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_GPIO_Init+0xc4>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000972:	f001 f85d 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000976:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	480b      	ldr	r0, [pc, #44]	@ (80009bc <MX_GPIO_Init+0xc8>)
 800098e:	f000 fead 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000992:	2320      	movs	r3, #32
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ac:	f000 fe9e 	bl	80016ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	@ 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000800 	.word	0x48000800

080009c0 <Task1_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_App */
void Task1_App(void *argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  btn_state = 1;
 80009c8:	4b32      	ldr	r3, [pc, #200]	@ (8000a94 <Task1_App+0xd4>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
  prev_btn_state = 1;
 80009ce:	4b32      	ldr	r3, [pc, #200]	@ (8000a98 <Task1_App+0xd8>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
  receive = 0;
 80009d4:	4b31      	ldr	r3, [pc, #196]	@ (8000a9c <Task1_App+0xdc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    btn_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80009da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009de:	4830      	ldr	r0, [pc, #192]	@ (8000aa0 <Task1_App+0xe0>)
 80009e0:	f001 f80e 	bl	8001a00 <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <Task1_App+0xd4>)
 80009ea:	701a      	strb	r2, [r3, #0]
    if (!btn_state)
 80009ec:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <Task1_App+0xd4>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d104      	bne.n	80009fe <Task1_App+0x3e>
    {
      prev_btn_state = btn_state;
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <Task1_App+0xd4>)
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <Task1_App+0xd8>)
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e046      	b.n	8000a8c <Task1_App+0xcc>
    }
    else if (btn_state && !prev_btn_state)
 80009fe:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <Task1_App+0xd4>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d042      	beq.n	8000a8c <Task1_App+0xcc>
 8000a06:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <Task1_App+0xd8>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d13e      	bne.n	8000a8c <Task1_App+0xcc>
    {
      receive        ^= 1;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	@ (8000a9c <Task1_App+0xdc>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f083 0301 	eor.w	r3, r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <Task1_App+0xdc>)
 8000a1a:	701a      	strb	r2, [r3, #0]
      keep_receiving ^= 1;
 8000a1c:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <Task1_App+0xe4>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	f083 0301 	eor.w	r3, r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <Task1_App+0xe4>)
 8000a28:	701a      	strb	r2, [r3, #0]
      if (receive)
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <Task1_App+0xdc>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d018      	beq.n	8000a64 <Task1_App+0xa4>
      {
        clear_buffer(SNIFFER_BUFFER_1);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fc2c 	bl	8000290 <clear_buffer>
        clear_buffer(SNIFFER_BUFFER_2);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff fc29 	bl	8000290 <clear_buffer>
        osDelay(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f004 fc26 	bl	8005290 <osDelay>
        HAL_UART_Receive_DMA(&huart1, &uart1_rx_byte, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	4918      	ldr	r1, [pc, #96]	@ (8000aa8 <Task1_App+0xe8>)
 8000a48:	4818      	ldr	r0, [pc, #96]	@ (8000aac <Task1_App+0xec>)
 8000a4a:	f003 f887 	bl	8003b5c <HAL_UART_Receive_DMA>
        HAL_UART_Receive_DMA(&huart3, &uart3_rx_byte, 1);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4917      	ldr	r1, [pc, #92]	@ (8000ab0 <Task1_App+0xf0>)
 8000a52:	4818      	ldr	r0, [pc, #96]	@ (8000ab4 <Task1_App+0xf4>)
 8000a54:	f003 f882 	bl	8003b5c <HAL_UART_Receive_DMA>
        HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Sniffing ON\r\n", 13);
 8000a58:	220d      	movs	r2, #13
 8000a5a:	4917      	ldr	r1, [pc, #92]	@ (8000ab8 <Task1_App+0xf8>)
 8000a5c:	4817      	ldr	r0, [pc, #92]	@ (8000abc <Task1_App+0xfc>)
 8000a5e:	f003 f81f 	bl	8003aa0 <HAL_UART_Transmit_IT>
 8000a62:	e00f      	b.n	8000a84 <Task1_App+0xc4>
      }
      else
      {
        HAL_UART_DMAStop(&huart1);
 8000a64:	4811      	ldr	r0, [pc, #68]	@ (8000aac <Task1_App+0xec>)
 8000a66:	f003 f8bd 	bl	8003be4 <HAL_UART_DMAStop>
        HAL_UART_DMAStop(&huart3);
 8000a6a:	4812      	ldr	r0, [pc, #72]	@ (8000ab4 <Task1_App+0xf4>)
 8000a6c:	f003 f8ba 	bl	8003be4 <HAL_UART_DMAStop>
        HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Sniffing OFF\r\n", 14);
 8000a70:	220e      	movs	r2, #14
 8000a72:	4913      	ldr	r1, [pc, #76]	@ (8000ac0 <Task1_App+0x100>)
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <Task1_App+0xfc>)
 8000a76:	f003 f813 	bl	8003aa0 <HAL_UART_Transmit_IT>
        osDelay(2);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f004 fc08 	bl	8005290 <osDelay>
        print_all_received_messages();
 8000a80:	f7ff fc26 	bl	80002d0 <print_all_received_messages>
      }

      prev_btn_state = btn_state;
 8000a84:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <Task1_App+0xd4>)
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4b03      	ldr	r3, [pc, #12]	@ (8000a98 <Task1_App+0xd8>)
 8000a8a:	701a      	strb	r2, [r3, #0]
    }
    osDelay(100);
 8000a8c:	2064      	movs	r0, #100	@ 0x64
 8000a8e:	f004 fbff 	bl	8005290 <osDelay>
    btn_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a92:	e7a2      	b.n	80009da <Task1_App+0x1a>
 8000a94:	200006ad 	.word	0x200006ad
 8000a98:	200006ae 	.word	0x200006ae
 8000a9c:	200006af 	.word	0x200006af
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	20001ab1 	.word	0x20001ab1
 8000aa8:	200004a8 	.word	0x200004a8
 8000aac:	20000080 	.word	0x20000080
 8000ab0:	200006ac 	.word	0x200006ac
 8000ab4:	20000190 	.word	0x20000190
 8000ab8:	08008630 	.word	0x08008630
 8000abc:	20000108 	.word	0x20000108
 8000ac0:	0800860c 	.word	0x0800860c

08000ac4 <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000acc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad0:	f004 fbde 	bl	8005290 <osDelay>
 8000ad4:	e7fa      	b.n	8000acc <Task2_App+0x8>
	...

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000aea:	f000 fac1 	bl	8001070 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40001000 	.word	0x40001000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f000 fb6b 	bl	8001220 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	@ 0x38
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a87      	ldr	r2, [pc, #540]	@ (8000d94 <HAL_UART_MspInit+0x23c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d157      	bne.n	8000c2a <HAL_UART_MspInit+0xd2>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b7a:	4b87      	ldr	r3, [pc, #540]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a86      	ldr	r2, [pc, #536]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b84      	ldr	r3, [pc, #528]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8e:	623b      	str	r3, [r7, #32]
 8000b90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b81      	ldr	r3, [pc, #516]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a80      	ldr	r2, [pc, #512]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000b98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b7e      	ldr	r3, [pc, #504]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000baa:	2330      	movs	r3, #48	@ 0x30
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4875      	ldr	r0, [pc, #468]	@ (8000d9c <HAL_UART_MspInit+0x244>)
 8000bc6:	f000 fd91 	bl	80016ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000bca:	4b75      	ldr	r3, [pc, #468]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000bcc:	4a75      	ldr	r2, [pc, #468]	@ (8000da4 <HAL_UART_MspInit+0x24c>)
 8000bce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd0:	4b73      	ldr	r3, [pc, #460]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd6:	4b72      	ldr	r3, [pc, #456]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bdc:	4b70      	ldr	r3, [pc, #448]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000bde:	2280      	movs	r2, #128	@ 0x80
 8000be0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000be2:	4b6f      	ldr	r3, [pc, #444]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000be8:	4b6d      	ldr	r3, [pc, #436]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000bee:	4b6c      	ldr	r3, [pc, #432]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000bf6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bfa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bfc:	4868      	ldr	r0, [pc, #416]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000bfe:	f000 fb39 	bl	8001274 <HAL_DMA_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000c08:	f7ff ff78 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a64      	ldr	r2, [pc, #400]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000c10:	675a      	str	r2, [r3, #116]	@ 0x74
 8000c12:	4a63      	ldr	r2, [pc, #396]	@ (8000da0 <HAL_UART_MspInit+0x248>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	2025      	movs	r0, #37	@ 0x25
 8000c1e:	f000 faff 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c22:	2025      	movs	r0, #37	@ 0x25
 8000c24:	f000 fb18 	bl	8001258 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c28:	e0b0      	b.n	8000d8c <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART2)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a5e      	ldr	r2, [pc, #376]	@ (8000da8 <HAL_UART_MspInit+0x250>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d131      	bne.n	8000c98 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c34:	4b58      	ldr	r3, [pc, #352]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	4a57      	ldr	r2, [pc, #348]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3e:	61d3      	str	r3, [r2, #28]
 8000c40:	4b55      	ldr	r3, [pc, #340]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b52      	ldr	r3, [pc, #328]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4a51      	ldr	r2, [pc, #324]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c56:	6153      	str	r3, [r2, #20]
 8000c58:	4b4f      	ldr	r3, [pc, #316]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c64:	230c      	movs	r3, #12
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c74:	2307      	movs	r3, #7
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c82:	f000 fd33 	bl	80016ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2105      	movs	r1, #5
 8000c8a:	2026      	movs	r0, #38	@ 0x26
 8000c8c:	f000 fac8 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c90:	2026      	movs	r0, #38	@ 0x26
 8000c92:	f000 fae1 	bl	8001258 <HAL_NVIC_EnableIRQ>
}
 8000c96:	e079      	b.n	8000d8c <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a43      	ldr	r2, [pc, #268]	@ (8000dac <HAL_UART_MspInit+0x254>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d174      	bne.n	8000d8c <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b3a      	ldr	r3, [pc, #232]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a36      	ldr	r2, [pc, #216]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b34      	ldr	r3, [pc, #208]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a30      	ldr	r2, [pc, #192]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000cd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <HAL_UART_MspInit+0x240>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	482a      	ldr	r0, [pc, #168]	@ (8000db0 <HAL_UART_MspInit+0x258>)
 8000d08:	f000 fcf0 	bl	80016ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <HAL_UART_MspInit+0x244>)
 8000d2a:	f000 fcdf 	bl	80016ec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d30:	4a21      	ldr	r2, [pc, #132]	@ (8000db8 <HAL_UART_MspInit+0x260>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d42:	2280      	movs	r2, #128	@ 0x80
 8000d44:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d60:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d62:	f000 fa87 	bl	8001274 <HAL_DMA_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8000d6c:	f7ff fec6 	bl	8000afc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a10      	ldr	r2, [pc, #64]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d74:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d76:	4a0f      	ldr	r2, [pc, #60]	@ (8000db4 <HAL_UART_MspInit+0x25c>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2027      	movs	r0, #39	@ 0x27
 8000d82:	f000 fa4d 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d86:	2027      	movs	r0, #39	@ 0x27
 8000d88:	f000 fa66 	bl	8001258 <HAL_NVIC_EnableIRQ>
}
 8000d8c:	bf00      	nop
 8000d8e:	3738      	adds	r7, #56	@ 0x38
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40013800 	.word	0x40013800
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	20000218 	.word	0x20000218
 8000da4:	40020058 	.word	0x40020058
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40004800 	.word	0x40004800
 8000db0:	48000400 	.word	0x48000400
 8000db4:	2000025c 	.word	0x2000025c
 8000db8:	40020030 	.word	0x40020030

08000dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	@ 0x38
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dcc:	4b33      	ldr	r3, [pc, #204]	@ (8000e9c <HAL_InitTick+0xe0>)
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	4a32      	ldr	r2, [pc, #200]	@ (8000e9c <HAL_InitTick+0xe0>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	61d3      	str	r3, [r2, #28]
 8000dd8:	4b30      	ldr	r3, [pc, #192]	@ (8000e9c <HAL_InitTick+0xe0>)
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de4:	f107 0210 	add.w	r2, r7, #16
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 f86c 	bl	8002ecc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d103      	bne.n	8000e06 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dfe:	f002 f821 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 8000e02:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e04:	e004      	b.n	8000e10 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e06:	f002 f81d 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e12:	4a23      	ldr	r2, [pc, #140]	@ (8000ea0 <HAL_InitTick+0xe4>)
 8000e14:	fba2 2303 	umull	r2, r3, r2, r3
 8000e18:	0c9b      	lsrs	r3, r3, #18
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e20:	4a21      	ldr	r2, [pc, #132]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e22:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e2a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e30:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e44:	4817      	ldr	r0, [pc, #92]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e46:	f002 fa8f 	bl	8003368 <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d11b      	bne.n	8000e90 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e58:	4812      	ldr	r0, [pc, #72]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e5a:	f002 fae7 	bl	800342c <HAL_TIM_Base_Start_IT>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d111      	bne.n	8000e90 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e6c:	2036      	movs	r0, #54	@ 0x36
 8000e6e:	f000 f9f3 	bl	8001258 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d808      	bhi.n	8000e8a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	2036      	movs	r0, #54	@ 0x36
 8000e7e:	f000 f9cf 	bl	8001220 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <HAL_InitTick+0xf0>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e002      	b.n	8000e90 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3738      	adds	r7, #56	@ 0x38
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	431bde83 	.word	0x431bde83
 8000ea4:	20001af8 	.word	0x20001af8
 8000ea8:	40001000 	.word	0x40001000
 8000eac:	20000008 	.word	0x20000008

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <DMA1_Channel3_IRQHandler+0x10>)
 8000eee:	f000 fae3 	bl	80014b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000025c 	.word	0x2000025c

08000efc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <DMA1_Channel5_IRQHandler+0x10>)
 8000f02:	f000 fad9 	bl	80014b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000218 	.word	0x20000218

08000f10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <USART1_IRQHandler+0x10>)
 8000f16:	f002 fef7 	bl	8003d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000080 	.word	0x20000080

08000f24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <USART2_IRQHandler+0x10>)
 8000f2a:	f002 feed 	bl	8003d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000108 	.word	0x20000108

08000f38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <USART3_IRQHandler+0x10>)
 8000f3e:	f002 fee3 	bl	8003d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000190 	.word	0x20000190

08000f4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <TIM6_DAC_IRQHandler+0x10>)
 8000f52:	f002 fadb 	bl	800350c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20001af8 	.word	0x20001af8

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	@ (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f006 fea4 	bl	8007cdc <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20010000 	.word	0x20010000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	20001b44 	.word	0x20001b44
 8000fc8:	20003678 	.word	0x20003678

08000fcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001028 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f7ff ffea 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	@ (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	@ (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f006 fe63 	bl	8007ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff fb1d 	bl	8000660 <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001028:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001034:	0800871c 	.word	0x0800871c
  ldr r2, =_sbss
 8001038:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800103c:	20003674 	.word	0x20003674

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>
	...

08001044 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	@ (800106c <HAL_Init+0x28>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f8d8 	bl	800120a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	200f      	movs	r0, #15
 800105c:	f7ff feae 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fd52 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000000c 	.word	0x2000000c
 8001094:	20001b48 	.word	0x20001b48

08001098 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;  
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20001b48 	.word	0x20001b48

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	@ (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	@ (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	@ (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	@ 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	@ 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff4c 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001232:	f7ff ff61 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	6978      	ldr	r0, [r7, #20]
 800123e:	f7ff ffb1 	bl	80011a4 <NVIC_EncodePriority>
 8001242:	4602      	mov	r2, r0
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff80 	bl	8001150 <__NVIC_SetPriority>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff54 	bl	8001114 <__NVIC_EnableIRQ>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e037      	b.n	80012fa <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2202      	movs	r2, #2
 800128e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012a0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f9c9 	bl	8001674 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Start_IT+0x20>
 800131e:	2302      	movs	r3, #2
 8001320:	e04a      	b.n	80013b8 <HAL_DMA_Start_IT+0xb6>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001330:	2b01      	cmp	r3, #1
 8001332:	d13a      	bne.n	80013aa <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2202      	movs	r2, #2
 8001338:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 f95c 	bl	8001616 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001362:	2b00      	cmp	r3, #0
 8001364:	d008      	beq.n	8001378 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 020e 	orr.w	r2, r2, #14
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e00f      	b.n	8001398 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 020a 	orr.w	r2, r2, #10
 8001386:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0204 	bic.w	r2, r2, #4
 8001396:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e005      	b.n	80013b6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013b2:	2302      	movs	r3, #2
 80013b4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e02e      	b.n	8001430 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d008      	beq.n	80013ee <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2204      	movs	r2, #4
 80013e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e020      	b.n	8001430 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 020e 	bic.w	r2, r2, #14
 80013fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f202 	lsl.w	r2, r1, r2
 800141c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800144e:	2b02      	cmp	r3, #2
 8001450:	d005      	beq.n	800145e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2204      	movs	r2, #4
 8001456:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e027      	b.n	80014ae <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020e 	bic.w	r2, r2, #14
 800146c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f202 	lsl.w	r2, r1, r2
 800148c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4798      	blx	r3
    }
  }
  return status;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	2204      	movs	r2, #4
 80014d6:	409a      	lsls	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d024      	beq.n	800152a <HAL_DMA_IRQHandler+0x72>
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01f      	beq.n	800152a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0204 	bic.w	r2, r2, #4
 8001506:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001510:	2104      	movs	r1, #4
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d06a      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001528:	e065      	b.n	80015f6 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	2202      	movs	r2, #2
 8001530:	409a      	lsls	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d02c      	beq.n	8001594 <HAL_DMA_IRQHandler+0xdc>
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d027      	beq.n	8001594 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0320 	and.w	r3, r3, #32
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10b      	bne.n	800156a <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 020a 	bic.w	r2, r2, #10
 8001560:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001572:	2102      	movs	r1, #2
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	2b00      	cmp	r3, #0
 8001588:	d035      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001592:	e030      	b.n	80015f6 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	2208      	movs	r2, #8
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d028      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x13e>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d023      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 020e 	bic.w	r2, r2, #14
 80015bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f202 	lsl.w	r2, r1, r2
 80015cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
    }
  }
}
 80015f4:	e7ff      	b.n	80015f6 <HAL_DMA_IRQHandler+0x13e>
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b10      	cmp	r3, #16
 8001642:	d108      	bne.n	8001656 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001654:	e007      	b.n	8001666 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	60da      	str	r2, [r3, #12]
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <DMA_CalcBaseAndBitshift+0x60>)
 8001684:	429a      	cmp	r2, r3
 8001686:	d80f      	bhi.n	80016a8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001690:	4413      	add	r3, r2
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <DMA_CalcBaseAndBitshift+0x68>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	009a      	lsls	r2, r3, #2
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a0f      	ldr	r2, [pc, #60]	@ (80016e0 <DMA_CalcBaseAndBitshift+0x6c>)
 80016a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80016a6:	e00e      	b.n	80016c6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <DMA_CalcBaseAndBitshift+0x70>)
 80016b0:	4413      	add	r3, r2
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <DMA_CalcBaseAndBitshift+0x68>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	009a      	lsls	r2, r3, #2
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a09      	ldr	r2, [pc, #36]	@ (80016e8 <DMA_CalcBaseAndBitshift+0x74>)
 80016c4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40020407 	.word	0x40020407
 80016d8:	bffdfff8 	.word	0xbffdfff8
 80016dc:	cccccccd 	.word	0xcccccccd
 80016e0:	40020000 	.word	0x40020000
 80016e4:	bffdfbf8 	.word	0xbffdfbf8
 80016e8:	40020400 	.word	0x40020400

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fa:	e160      	b.n	80019be <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8152 	beq.w	80019b8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d005      	beq.n	800172c <HAL_GPIO_Init+0x40>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d130      	bne.n	800178e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001762:	2201      	movs	r2, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 0201 	and.w	r2, r3, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b03      	cmp	r3, #3
 8001798:	d017      	beq.n	80017ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d123      	bne.n	800181e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	6939      	ldr	r1, [r7, #16]
 800181a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0203 	and.w	r2, r3, #3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80ac 	beq.w	80019b8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001860:	4b5e      	ldr	r3, [pc, #376]	@ (80019dc <HAL_GPIO_Init+0x2f0>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a5d      	ldr	r2, [pc, #372]	@ (80019dc <HAL_GPIO_Init+0x2f0>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b5b      	ldr	r3, [pc, #364]	@ (80019dc <HAL_GPIO_Init+0x2f0>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001878:	4a59      	ldr	r2, [pc, #356]	@ (80019e0 <HAL_GPIO_Init+0x2f4>)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018a2:	d025      	beq.n	80018f0 <HAL_GPIO_Init+0x204>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4f      	ldr	r2, [pc, #316]	@ (80019e4 <HAL_GPIO_Init+0x2f8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d01f      	beq.n	80018ec <HAL_GPIO_Init+0x200>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a4e      	ldr	r2, [pc, #312]	@ (80019e8 <HAL_GPIO_Init+0x2fc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d019      	beq.n	80018e8 <HAL_GPIO_Init+0x1fc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a4d      	ldr	r2, [pc, #308]	@ (80019ec <HAL_GPIO_Init+0x300>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d013      	beq.n	80018e4 <HAL_GPIO_Init+0x1f8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a4c      	ldr	r2, [pc, #304]	@ (80019f0 <HAL_GPIO_Init+0x304>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00d      	beq.n	80018e0 <HAL_GPIO_Init+0x1f4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a4b      	ldr	r2, [pc, #300]	@ (80019f4 <HAL_GPIO_Init+0x308>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d007      	beq.n	80018dc <HAL_GPIO_Init+0x1f0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a4a      	ldr	r2, [pc, #296]	@ (80019f8 <HAL_GPIO_Init+0x30c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_GPIO_Init+0x1ec>
 80018d4:	2306      	movs	r3, #6
 80018d6:	e00c      	b.n	80018f2 <HAL_GPIO_Init+0x206>
 80018d8:	2307      	movs	r3, #7
 80018da:	e00a      	b.n	80018f2 <HAL_GPIO_Init+0x206>
 80018dc:	2305      	movs	r3, #5
 80018de:	e008      	b.n	80018f2 <HAL_GPIO_Init+0x206>
 80018e0:	2304      	movs	r3, #4
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x206>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x206>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x206>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x206>
 80018f0:	2300      	movs	r3, #0
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001902:	4937      	ldr	r1, [pc, #220]	@ (80019e0 <HAL_GPIO_Init+0x2f4>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001910:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <HAL_GPIO_Init+0x310>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001934:	4a31      	ldr	r2, [pc, #196]	@ (80019fc <HAL_GPIO_Init+0x310>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800193a:	4b30      	ldr	r3, [pc, #192]	@ (80019fc <HAL_GPIO_Init+0x310>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800195e:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <HAL_GPIO_Init+0x310>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_GPIO_Init+0x310>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <HAL_GPIO_Init+0x310>)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800198e:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <HAL_GPIO_Init+0x310>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <HAL_GPIO_Init+0x310>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f ae97 	bne.w	80016fc <HAL_GPIO_Init+0x10>
  }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	48000400 	.word	0x48000400
 80019e8:	48000800 	.word	0x48000800
 80019ec:	48000c00 	.word	0x48000c00
 80019f0:	48001000 	.word	0x48001000
 80019f4:	48001400 	.word	0x48001400
 80019f8:	48001800 	.word	0x48001800
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e001      	b.n	8001a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f001 b80a 	b.w	8002a9a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8161 	beq.w	8001d5e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a9c:	4bae      	ldr	r3, [pc, #696]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d00c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa8:	4bab      	ldr	r3, [pc, #684]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d157      	bne.n	8001b64 <HAL_RCC_OscConfig+0x104>
 8001ab4:	4ba8      	ldr	r3, [pc, #672]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac0:	d150      	bne.n	8001b64 <HAL_RCC_OscConfig+0x104>
 8001ac2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ac6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ad6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ae2:	d802      	bhi.n	8001aea <HAL_RCC_OscConfig+0x8a>
 8001ae4:	4b9c      	ldr	r3, [pc, #624]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0xb6>
 8001aea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001afe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b02:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b06:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b12:	4b91      	ldr	r3, [pc, #580]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b1a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001b1e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001b22:	fa92 f2a2 	rbit	r2, r2
 8001b26:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001b2a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f002 021f 	and.w	r2, r2, #31
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8108 	beq.w	8001d5c <HAL_RCC_OscConfig+0x2fc>
 8001b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 80ff 	bne.w	8001d5c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f000 bf9b 	b.w	8002a9a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x124>
 8001b76:	4b78      	ldr	r3, [pc, #480]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a77      	ldr	r2, [pc, #476]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e036      	b.n	8001bf2 <HAL_RCC_OscConfig+0x192>
 8001b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10c      	bne.n	8001bae <HAL_RCC_OscConfig+0x14e>
 8001b94:	4b70      	ldr	r3, [pc, #448]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6f      	ldr	r2, [pc, #444]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6c      	ldr	r2, [pc, #432]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e021      	b.n	8001bf2 <HAL_RCC_OscConfig+0x192>
 8001bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x17a>
 8001bc0:	4b65      	ldr	r3, [pc, #404]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a64      	ldr	r2, [pc, #400]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001bc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b62      	ldr	r3, [pc, #392]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a61      	ldr	r2, [pc, #388]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x192>
 8001bda:	4b5f      	ldr	r3, [pc, #380]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a5e      	ldr	r2, [pc, #376]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a5b      	ldr	r2, [pc, #364]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d054      	beq.n	8001cac <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fa49 	bl	8001098 <HAL_GetTick>
 8001c06:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fa44 	bl	8001098 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b64      	cmp	r3, #100	@ 0x64
 8001c1a:	d902      	bls.n	8001c22 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	f000 bf3c 	b.w	8002a9a <HAL_RCC_OscConfig+0x103a>
 8001c22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c26:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001c36:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c42:	d802      	bhi.n	8001c4a <HAL_RCC_OscConfig+0x1ea>
 8001c44:	4b44      	ldr	r3, [pc, #272]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	e015      	b.n	8001c76 <HAL_RCC_OscConfig+0x216>
 8001c4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c4e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001c5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c62:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c66:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c72:	4b39      	ldr	r3, [pc, #228]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c7a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001c7e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001c82:	fa92 f2a2 	rbit	r2, r2
 8001c86:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001c8a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c8e:	fab2 f282 	clz	r2, r2
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f042 0220 	orr.w	r2, r2, #32
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f002 021f 	and.w	r2, r2, #31
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0b0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x1ac>
 8001caa:	e058      	b.n	8001d5e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f9f4 	bl	8001098 <HAL_GetTick>
 8001cb0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb6:	f7ff f9ef 	bl	8001098 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	@ 0x64
 8001cc4:	d902      	bls.n	8001ccc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	f000 bee7 	b.w	8002a9a <HAL_RCC_OscConfig+0x103a>
 8001ccc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001ce0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cec:	d802      	bhi.n	8001cf4 <HAL_RCC_OscConfig+0x294>
 8001cee:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	e015      	b.n	8001d20 <HAL_RCC_OscConfig+0x2c0>
 8001cf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d0c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <HAL_RCC_OscConfig+0x2f8>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d24:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001d28:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001d34:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1b0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x256>
 8001d54:	e003      	b.n	8001d5e <HAL_RCC_OscConfig+0x2fe>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 816d 	beq.w	800204e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d74:	4bcd      	ldr	r3, [pc, #820]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d80:	4bca      	ldr	r3, [pc, #808]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d16e      	bne.n	8001e6a <HAL_RCC_OscConfig+0x40a>
 8001d8c:	4bc7      	ldr	r3, [pc, #796]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d98:	d167      	bne.n	8001e6a <HAL_RCC_OscConfig+0x40a>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001dac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001db8:	d802      	bhi.n	8001dc0 <HAL_RCC_OscConfig+0x360>
 8001dba:	4bbc      	ldr	r3, [pc, #752]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_OscConfig+0x388>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001dd8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001de4:	4bb1      	ldr	r3, [pc, #708]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	2202      	movs	r2, #2
 8001dea:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001dee:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001df2:	fa92 f2a2 	rbit	r2, r2
 8001df6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001dfa:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001dfe:	fab2 f282 	clz	r2, r2
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	f042 0220 	orr.w	r2, r2, #32
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	f002 021f 	and.w	r2, r2, #31
 8001e0e:	2101      	movs	r1, #1
 8001e10:	fa01 f202 	lsl.w	r2, r1, r2
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HAL_RCC_OscConfig+0x3d0>
 8001e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f000 be35 	b.w	8002a9a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b9e      	ldr	r3, [pc, #632]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	21f8      	movs	r1, #248	@ 0xf8
 8001e46:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001e4e:	fa91 f1a1 	rbit	r1, r1
 8001e52:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001e56:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e5a:	fab1 f181 	clz	r1, r1
 8001e5e:	b2c9      	uxtb	r1, r1
 8001e60:	408b      	lsls	r3, r1
 8001e62:	4992      	ldr	r1, [pc, #584]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e68:	e0f1      	b.n	800204e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8083 	beq.w	8001f82 <HAL_RCC_OscConfig+0x522>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001e8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f8f6 	bl	8001098 <HAL_GetTick>
 8001eac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7ff f8f1 	bl	8001098 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d902      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	f000 bde9 	b.w	8002a9a <HAL_RCC_OscConfig+0x103a>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001eda:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ee6:	d802      	bhi.n	8001eee <HAL_RCC_OscConfig+0x48e>
 8001ee8:	4b70      	ldr	r3, [pc, #448]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	e013      	b.n	8001f16 <HAL_RCC_OscConfig+0x4b6>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f06:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f12:	4b66      	ldr	r3, [pc, #408]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	2202      	movs	r2, #2
 8001f18:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001f1c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001f20:	fa92 f2a2 	rbit	r2, r2
 8001f24:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001f28:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f2c:	fab2 f282 	clz	r2, r2
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	f042 0220 	orr.w	r2, r2, #32
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f002 021f 	and.w	r2, r2, #31
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0b4      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b58      	ldr	r3, [pc, #352]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	21f8      	movs	r1, #248	@ 0xf8
 8001f5e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001f66:	fa91 f1a1 	rbit	r1, r1
 8001f6a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001f6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f72:	fab1 f181 	clz	r1, r1
 8001f76:	b2c9      	uxtb	r1, r1
 8001f78:	408b      	lsls	r3, r1
 8001f7a:	494c      	ldr	r1, [pc, #304]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
 8001f80:	e065      	b.n	800204e <HAL_RCC_OscConfig+0x5ee>
 8001f82:	2301      	movs	r3, #1
 8001f84:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001f94:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fa2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff f873 	bl	8001098 <HAL_GetTick>
 8001fb2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff f86e 	bl	8001098 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d902      	bls.n	8001fce <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	f000 bd66 	b.w	8002a9a <HAL_RCC_OscConfig+0x103a>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001fe0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fec:	d802      	bhi.n	8001ff4 <HAL_RCC_OscConfig+0x594>
 8001fee:	4b2f      	ldr	r3, [pc, #188]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	e013      	b.n	800201c <HAL_RCC_OscConfig+0x5bc>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002006:	2302      	movs	r3, #2
 8002008:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800200c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002018:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <HAL_RCC_OscConfig+0x64c>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	2202      	movs	r2, #2
 800201e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002022:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002026:	fa92 f2a2 	rbit	r2, r2
 800202a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800202e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002032:	fab2 f282 	clz	r2, r2
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	f042 0220 	orr.w	r2, r2, #32
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f002 021f 	and.w	r2, r2, #31
 8002042:	2101      	movs	r1, #1
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1b4      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002052:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8119 	beq.w	8002296 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002064:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002068:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8082 	beq.w	800217a <HAL_RCC_OscConfig+0x71a>
 8002076:	2301      	movs	r3, #1
 8002078:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002088:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_OscConfig+0x650>)
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	461a      	mov	r2, r3
 800209c:	2301      	movs	r3, #1
 800209e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7fe fffa 	bl	8001098 <HAL_GetTick>
 80020a4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a8:	e00f      	b.n	80020ca <HAL_RCC_OscConfig+0x66a>
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b4:	f7fe fff0 	bl	8001098 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d902      	bls.n	80020ca <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	f000 bce8 	b.w	8002a9a <HAL_RCC_OscConfig+0x103a>
 80020ca:	2302      	movs	r3, #2
 80020cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020ea:	2202      	movs	r2, #2
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002116:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002124:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002128:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	4bb0      	ldr	r3, [pc, #704]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 800212c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800212e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002132:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002136:	2102      	movs	r1, #2
 8002138:	6019      	str	r1, [r3, #0]
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f1a3 	rbit	r1, r3
 8002148:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002150:	6019      	str	r1, [r3, #0]
  return result;
 8002152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002156:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d09d      	beq.n	80020b4 <HAL_RCC_OscConfig+0x654>
 8002178:	e08d      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
 800217a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800217e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	fa93 f2a3 	rbit	r2, r3
 8002194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002198:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800219c:	601a      	str	r2, [r3, #0]
  return result;
 800219e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b8f      	ldr	r3, [pc, #572]	@ (80023f0 <HAL_RCC_OscConfig+0x990>)
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	461a      	mov	r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7fe ff6c 	bl	8001098 <HAL_GetTick>
 80021c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c6:	f7fe ff67 	bl	8001098 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d902      	bls.n	80021dc <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	f000 bc5f 	b.w	8002a9a <HAL_RCC_OscConfig+0x103a>
 80021dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002204:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002208:	2202      	movs	r2, #2
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002210:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002228:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002234:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002242:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002246:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b68      	ldr	r3, [pc, #416]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 800224a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800224c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002250:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002254:	2102      	movs	r1, #2
 8002256:	6019      	str	r1, [r3, #0]
 8002258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f1a3 	rbit	r1, r3
 8002266:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800226e:	6019      	str	r1, [r3, #0]
  return result;
 8002270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002274:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d197      	bne.n	80021c6 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002296:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 819c 	beq.w	80025e4 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b4e      	ldr	r3, [pc, #312]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b4b      	ldr	r3, [pc, #300]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a4a      	ldr	r2, [pc, #296]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	61d3      	str	r3, [r2, #28]
 80022ca:	4b48      	ldr	r3, [pc, #288]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80022d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022e4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	4b41      	ldr	r3, [pc, #260]	@ (80023f4 <HAL_RCC_OscConfig+0x994>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d11a      	bne.n	800232e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f8:	4b3e      	ldr	r3, [pc, #248]	@ (80023f4 <HAL_RCC_OscConfig+0x994>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a3d      	ldr	r2, [pc, #244]	@ (80023f4 <HAL_RCC_OscConfig+0x994>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002302:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002304:	f7fe fec8 	bl	8001098 <HAL_GetTick>
 8002308:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e009      	b.n	8002322 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7fe fec3 	bl	8001098 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	@ 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e3bb      	b.n	8002a9a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b34      	ldr	r3, [pc, #208]	@ (80023f4 <HAL_RCC_OscConfig+0x994>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0ef      	beq.n	800230e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002332:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x8ec>
 800233e:	4b2b      	ldr	r3, [pc, #172]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a2a      	ldr	r2, [pc, #168]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	e035      	b.n	80023b8 <HAL_RCC_OscConfig+0x958>
 800234c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002350:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x916>
 800235c:	4b23      	ldr	r3, [pc, #140]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a22      	ldr	r2, [pc, #136]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	4b20      	ldr	r3, [pc, #128]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a1f      	ldr	r2, [pc, #124]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e020      	b.n	80023b8 <HAL_RCC_OscConfig+0x958>
 8002376:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800237a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b05      	cmp	r3, #5
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x940>
 8002386:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a15      	ldr	r2, [pc, #84]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0x958>
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a11      	ldr	r2, [pc, #68]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a0e      	ldr	r2, [pc, #56]	@ (80023ec <HAL_RCC_OscConfig+0x98c>)
 80023b2:	f023 0304 	bic.w	r3, r3, #4
 80023b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8085 	beq.w	80024d4 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fe65 	bl	8001098 <HAL_GetTick>
 80023ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	e011      	b.n	80023f8 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7fe fe60 	bl	8001098 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d907      	bls.n	80023f8 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e356      	b.n	8002a9a <HAL_RCC_OscConfig+0x103a>
 80023ec:	40021000 	.word	0x40021000
 80023f0:	10908120 	.word	0x10908120
 80023f4:	40007000 	.word	0x40007000
 80023f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002400:	2202      	movs	r2, #2
 8002402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002408:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002416:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002420:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002424:	2202      	movs	r2, #2
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800242c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f2a3 	rbit	r2, r3
 8002436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800243a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800243e:	601a      	str	r2, [r3, #0]
  return result;
 8002440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002444:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002448:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_RCC_OscConfig+0xa00>
 800245a:	4b98      	ldr	r3, [pc, #608]	@ (80026bc <HAL_RCC_OscConfig+0xc5c>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	e013      	b.n	8002488 <HAL_RCC_OscConfig+0xa28>
 8002460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002464:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002468:	2202      	movs	r2, #2
 800246a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002470:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fa93 f2a3 	rbit	r2, r3
 800247a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	4b8d      	ldr	r3, [pc, #564]	@ (80026bc <HAL_RCC_OscConfig+0xc5c>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800248c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002490:	2102      	movs	r1, #2
 8002492:	6011      	str	r1, [r2, #0]
 8002494:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002498:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	fa92 f1a2 	rbit	r1, r2
 80024a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024a6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80024aa:	6011      	str	r1, [r2, #0]
  return result;
 80024ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024b0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	fab2 f282 	clz	r2, r2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f002 021f 	and.w	r2, r2, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f202 	lsl.w	r2, r1, r2
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d080      	beq.n	80023d4 <HAL_RCC_OscConfig+0x974>
 80024d2:	e07d      	b.n	80025d0 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d4:	f7fe fde0 	bl	8001098 <HAL_GetTick>
 80024d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	e00b      	b.n	80024f6 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe fddb 	bl	8001098 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e2d1      	b.n	8002a9a <HAL_RCC_OscConfig+0x103a>
 80024f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80024fe:	2202      	movs	r2, #2
 8002500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002506:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002514:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002522:	2202      	movs	r2, #2
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002538:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800253c:	601a      	str	r2, [r3, #0]
  return result;
 800253e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002542:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002546:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <HAL_RCC_OscConfig+0xafe>
 8002558:	4b58      	ldr	r3, [pc, #352]	@ (80026bc <HAL_RCC_OscConfig+0xc5c>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	e013      	b.n	8002586 <HAL_RCC_OscConfig+0xb26>
 800255e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002562:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002566:	2202      	movs	r2, #2
 8002568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	4b4e      	ldr	r3, [pc, #312]	@ (80026bc <HAL_RCC_OscConfig+0xc5c>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800258a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800258e:	2102      	movs	r1, #2
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002596:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	fa92 f1a2 	rbit	r1, r2
 80025a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025a4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80025a8:	6011      	str	r1, [r2, #0]
  return result;
 80025aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025ae:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	fab2 f282 	clz	r2, r2
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f002 021f 	and.w	r2, r2, #31
 80025c4:	2101      	movs	r1, #1
 80025c6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d186      	bne.n	80024de <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025d0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4b38      	ldr	r3, [pc, #224]	@ (80026bc <HAL_RCC_OscConfig+0xc5c>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	4a37      	ldr	r2, [pc, #220]	@ (80026bc <HAL_RCC_OscConfig+0xc5c>)
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8251 	beq.w	8002a98 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f6:	4b31      	ldr	r3, [pc, #196]	@ (80026bc <HAL_RCC_OscConfig+0xc5c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	f000 820f 	beq.w	8002a22 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002608:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b02      	cmp	r3, #2
 8002612:	f040 8165 	bne.w	80028e0 <HAL_RCC_OscConfig+0xe80>
 8002616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800261e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002628:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	fa93 f2a3 	rbit	r2, r3
 8002632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002636:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800263a:	601a      	str	r2, [r3, #0]
  return result;
 800263c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002640:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002644:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002650:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	461a      	mov	r2, r3
 8002658:	2300      	movs	r3, #0
 800265a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe fd1c 	bl	8001098 <HAL_GetTick>
 8002660:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002664:	e009      	b.n	800267a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe fd17 	bl	8001098 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e20f      	b.n	8002a9a <HAL_RCC_OscConfig+0x103a>
 800267a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002682:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800269e:	601a      	str	r2, [r3, #0]
  return result;
 80026a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80026b2:	d805      	bhi.n	80026c0 <HAL_RCC_OscConfig+0xc60>
 80026b4:	4b01      	ldr	r3, [pc, #4]	@ (80026bc <HAL_RCC_OscConfig+0xc5c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	e02a      	b.n	8002710 <HAL_RCC_OscConfig+0xcb0>
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	fa93 f2a3 	rbit	r2, r3
 80026dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002706:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	4bca      	ldr	r3, [pc, #808]	@ (8002a38 <HAL_RCC_OscConfig+0xfd8>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002714:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002718:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800271c:	6011      	str	r1, [r2, #0]
 800271e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002722:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	fa92 f1a2 	rbit	r1, r2
 800272c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002730:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002734:	6011      	str	r1, [r2, #0]
  return result;
 8002736:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800273a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	fab2 f282 	clz	r2, r2
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f042 0220 	orr.w	r2, r2, #32
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f002 021f 	and.w	r2, r2, #31
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f202 	lsl.w	r2, r1, r2
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d184      	bne.n	8002666 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275c:	4bb6      	ldr	r3, [pc, #728]	@ (8002a38 <HAL_RCC_OscConfig+0xfd8>)
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	f023 020f 	bic.w	r2, r3, #15
 8002764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002768:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	49b1      	ldr	r1, [pc, #708]	@ (8002a38 <HAL_RCC_OscConfig+0xfd8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002776:	4bb0      	ldr	r3, [pc, #704]	@ (8002a38 <HAL_RCC_OscConfig+0xfd8>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800277e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a19      	ldr	r1, [r3, #32]
 800278a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	430b      	orrs	r3, r1
 8002798:	49a7      	ldr	r1, [pc, #668]	@ (8002a38 <HAL_RCC_OscConfig+0xfd8>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
 800279e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027c2:	601a      	str	r2, [r3, #0]
  return result;
 80027c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027cc:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	461a      	mov	r2, r3
 80027e0:	2301      	movs	r3, #1
 80027e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe fc58 	bl	8001098 <HAL_GetTick>
 80027e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ec:	e009      	b.n	8002802 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fc53 	bl	8001098 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e14b      	b.n	8002a9a <HAL_RCC_OscConfig+0x103a>
 8002802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002806:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800280a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800280e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002814:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002822:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002826:	601a      	str	r2, [r3, #0]
  return result;
 8002828:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002830:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b3f      	cmp	r3, #63	@ 0x3f
 800283a:	d802      	bhi.n	8002842 <HAL_RCC_OscConfig+0xde2>
 800283c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a38 <HAL_RCC_OscConfig+0xfd8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	e027      	b.n	8002892 <HAL_RCC_OscConfig+0xe32>
 8002842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002846:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800284a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800284e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002854:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002862:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002870:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800287a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f2a3 	rbit	r2, r3
 8002884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002888:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a38 <HAL_RCC_OscConfig+0xfd8>)
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002896:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800289a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800289e:	6011      	str	r1, [r2, #0]
 80028a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028a4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	fa92 f1a2 	rbit	r1, r2
 80028ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028b2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80028b6:	6011      	str	r1, [r2, #0]
  return result;
 80028b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028bc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f002 021f 	and.w	r2, r2, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d087      	beq.n	80027ee <HAL_RCC_OscConfig+0xd8e>
 80028de:	e0db      	b.n	8002a98 <HAL_RCC_OscConfig+0x1038>
 80028e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002900:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002904:	601a      	str	r2, [r3, #0]
  return result;
 8002906:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800290a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800290e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800291a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	461a      	mov	r2, r3
 8002922:	2300      	movs	r3, #0
 8002924:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe fbb7 	bl	8001098 <HAL_GetTick>
 800292a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	e009      	b.n	8002944 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002930:	f7fe fbb2 	bl	8001098 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e0aa      	b.n	8002a9a <HAL_RCC_OscConfig+0x103a>
 8002944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002948:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800294c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002956:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002964:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002968:	601a      	str	r2, [r3, #0]
  return result;
 800296a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002972:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b3f      	cmp	r3, #63	@ 0x3f
 800297c:	d802      	bhi.n	8002984 <HAL_RCC_OscConfig+0xf24>
 800297e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <HAL_RCC_OscConfig+0xfd8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e027      	b.n	80029d4 <HAL_RCC_OscConfig+0xf74>
 8002984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002988:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800298c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002996:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80029b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029bc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f2a3 	rbit	r2, r3
 80029c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ca:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <HAL_RCC_OscConfig+0xfd8>)
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029d8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029e0:	6011      	str	r1, [r2, #0]
 80029e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029e6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	fa92 f1a2 	rbit	r1, r2
 80029f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029f4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80029f8:	6011      	str	r1, [r2, #0]
  return result;
 80029fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029fe:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f042 0220 	orr.w	r2, r2, #32
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f002 021f 	and.w	r2, r2, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d187      	bne.n	8002930 <HAL_RCC_OscConfig+0xed0>
 8002a20:	e03a      	b.n	8002a98 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d104      	bne.n	8002a3c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e031      	b.n	8002a9a <HAL_RCC_OscConfig+0x103a>
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <HAL_RCC_OscConfig+0x1044>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002a44:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <HAL_RCC_OscConfig+0x1044>)
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a50:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d117      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a68:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b09e      	sub	sp, #120	@ 0x78
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e154      	b.n	8002d6a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b89      	ldr	r3, [pc, #548]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b86      	ldr	r3, [pc, #536]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4984      	ldr	r1, [pc, #528]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b82      	ldr	r3, [pc, #520]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e13c      	b.n	8002d6a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afc:	4b7b      	ldr	r3, [pc, #492]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4978      	ldr	r1, [pc, #480]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80cd 	beq.w	8002cb6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d137      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xec>
 8002b24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b28:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b3c:	d802      	bhi.n	8002b44 <HAL_RCC_ClockConfig+0x9c>
 8002b3e:	4b6b      	ldr	r3, [pc, #428]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e00f      	b.n	8002b64 <HAL_RCC_ClockConfig+0xbc>
 8002b44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b56:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b60:	4b62      	ldr	r3, [pc, #392]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b74:	fab2 f282 	clz	r2, r2
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f042 0220 	orr.w	r2, r2, #32
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f002 021f 	and.w	r2, r2, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d171      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0ea      	b.n	8002d6a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d137      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x164>
 8002b9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ba0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bb4:	d802      	bhi.n	8002bbc <HAL_RCC_ClockConfig+0x114>
 8002bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e00f      	b.n	8002bdc <HAL_RCC_ClockConfig+0x134>
 8002bbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bce:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bd8:	4b44      	ldr	r3, [pc, #272]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002be0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002be2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002be4:	fa92 f2a2 	rbit	r2, r2
 8002be8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002bea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bec:	fab2 f282 	clz	r2, r2
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f042 0220 	orr.w	r2, r2, #32
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	f002 021f 	and.w	r2, r2, #31
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d135      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0ae      	b.n	8002d6a <HAL_RCC_ClockConfig+0x2c2>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c22:	d802      	bhi.n	8002c2a <HAL_RCC_ClockConfig+0x182>
 8002c24:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	e00d      	b.n	8002c46 <HAL_RCC_ClockConfig+0x19e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c36:	2302      	movs	r3, #2
 8002c38:	623b      	str	r3, [r7, #32]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	4b2a      	ldr	r3, [pc, #168]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	2202      	movs	r2, #2
 8002c48:	61ba      	str	r2, [r7, #24]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	fa92 f2a2 	rbit	r2, r2
 8002c50:	617a      	str	r2, [r7, #20]
  return result;
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	fab2 f282 	clz	r2, r2
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	f042 0220 	orr.w	r2, r2, #32
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f002 021f 	and.w	r2, r2, #31
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e07a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c74:	4b1d      	ldr	r3, [pc, #116]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f023 0203 	bic.w	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	491a      	ldr	r1, [pc, #104]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c86:	f7fe fa07 	bl	8001098 <HAL_GetTick>
 8002c8a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8e:	f7fe fa03 	bl	8001098 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e062      	b.n	8002d6a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca4:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 020c 	and.w	r2, r3, #12
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d1eb      	bne.n	8002c8e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d215      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 0207 	bic.w	r2, r3, #7
 8002ccc:	4906      	ldr	r1, [pc, #24]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d006      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e041      	b.n	8002d6a <HAL_RCC_ClockConfig+0x2c2>
 8002ce6:	bf00      	nop
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <HAL_RCC_ClockConfig+0x2cc>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	491a      	ldr	r1, [pc, #104]	@ (8002d74 <HAL_RCC_ClockConfig+0x2cc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <HAL_RCC_ClockConfig+0x2cc>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4912      	ldr	r1, [pc, #72]	@ (8002d74 <HAL_RCC_ClockConfig+0x2cc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d2e:	f000 f829 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d32:	4601      	mov	r1, r0
 8002d34:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <HAL_RCC_ClockConfig+0x2cc>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d3c:	22f0      	movs	r2, #240	@ 0xf0
 8002d3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	fa92 f2a2 	rbit	r2, r2
 8002d46:	60fa      	str	r2, [r7, #12]
  return result;
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	fab2 f282 	clz	r2, r2
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	40d3      	lsrs	r3, r2
 8002d52:	4a09      	ldr	r2, [pc, #36]	@ (8002d78 <HAL_RCC_ClockConfig+0x2d0>)
 8002d54:	5cd3      	ldrb	r3, [r2, r3]
 8002d56:	fa21 f303 	lsr.w	r3, r1, r3
 8002d5a:	4a08      	ldr	r2, [pc, #32]	@ (8002d7c <HAL_RCC_ClockConfig+0x2d4>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d5e:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <HAL_RCC_ClockConfig+0x2d8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe f82a 	bl	8000dbc <HAL_InitTick>
  
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3778      	adds	r7, #120	@ 0x78
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
 8002d78:	080086a0 	.word	0x080086a0
 8002d7c:	20000004 	.word	0x20000004
 8002d80:	20000008 	.word	0x20000008

08002d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d002      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x30>
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x36>
 8002db2:	e029      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002db6:	613b      	str	r3, [r7, #16]
      break;
 8002db8:	e029      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	0c9b      	lsrs	r3, r3, #18
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dc4:	5cd3      	ldrb	r3, [r2, r3]
 8002dc6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002dc8:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	4a15      	ldr	r2, [pc, #84]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002de0:	4a0f      	ldr	r2, [pc, #60]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e007      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002df2:	4a0b      	ldr	r2, [pc, #44]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	613b      	str	r3, [r7, #16]
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e0a:	613b      	str	r3, [r7, #16]
      break;
 8002e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0e:	693b      	ldr	r3, [r7, #16]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	007a1200 	.word	0x007a1200
 8002e24:	080086b8 	.word	0x080086b8
 8002e28:	080086c8 	.word	0x080086c8

08002e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e30:	4b03      	ldr	r3, [pc, #12]	@ (8002e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000004 	.word	0x20000004

08002e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e4a:	f7ff ffef 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e4e:	4601      	mov	r1, r0
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e58:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	603a      	str	r2, [r7, #0]
  return result;
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	40d3      	lsrs	r3, r2
 8002e70:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	080086b0 	.word	0x080086b0

08002e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e8e:	f7ff ffcd 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e92:	4601      	mov	r1, r0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002e9c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ea0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	603a      	str	r2, [r7, #0]
  return result;
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	40d3      	lsrs	r3, r2
 8002eb4:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	080086b0 	.word	0x080086b0

08002ecc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	220f      	movs	r2, #15
 8002eda:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0203 	and.w	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f00:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	08db      	lsrs	r3, r3, #3
 8002f06:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <HAL_RCC_GetClockConfig+0x60>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0207 	and.w	r2, r3, #7
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	601a      	str	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40022000 	.word	0x40022000

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b092      	sub	sp, #72	@ 0x48
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80d2 	beq.w	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f54:	4b4d      	ldr	r3, [pc, #308]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10e      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b4a      	ldr	r3, [pc, #296]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4a49      	ldr	r2, [pc, #292]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	61d3      	str	r3, [r2, #28]
 8002f6c:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7e:	4b44      	ldr	r3, [pc, #272]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d118      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8a:	4b41      	ldr	r3, [pc, #260]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a40      	ldr	r2, [pc, #256]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f96:	f7fe f87f 	bl	8001098 <HAL_GetTick>
 8002f9a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7fe f87b 	bl	8001098 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b64      	cmp	r3, #100	@ 0x64
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e1d4      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	4b37      	ldr	r3, [pc, #220]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fbc:	4b33      	ldr	r3, [pc, #204]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8082 	beq.w	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d07a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	461a      	mov	r2, r3
 8003006:	2301      	movs	r3, #1
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800300e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	4b1c      	ldr	r3, [pc, #112]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	461a      	mov	r2, r3
 800302a:	2300      	movs	r3, #0
 800302c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800302e:	4a17      	ldr	r2, [pc, #92]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003032:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d049      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe f82b 	bl	8001098 <HAL_GetTick>
 8003042:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe f827 	bl	8001098 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e17e      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800305c:	2302      	movs	r3, #2
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	2302      	movs	r3, #2
 800306a:	623b      	str	r3, [r7, #32]
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	61fb      	str	r3, [r7, #28]
  return result;
 8003074:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003086:	4b01      	ldr	r3, [pc, #4]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	e00d      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
 8003094:	10908100 	.word	0x10908100
 8003098:	2302      	movs	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	2202      	movs	r2, #2
 80030aa:	613a      	str	r2, [r7, #16]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	fa92 f2a2 	rbit	r2, r2
 80030b2:	60fa      	str	r2, [r7, #12]
  return result;
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	fab2 f282 	clz	r2, r2
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	f002 021f 	and.w	r2, r2, #31
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f202 	lsl.w	r2, r1, r2
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0b9      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	498c      	ldr	r1, [pc, #560]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b88      	ldr	r3, [pc, #544]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	4a87      	ldr	r2, [pc, #540]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003104:	4b82      	ldr	r3, [pc, #520]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	497f      	ldr	r1, [pc, #508]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003112:	4313      	orrs	r3, r2
 8003114:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003122:	4b7b      	ldr	r3, [pc, #492]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4978      	ldr	r1, [pc, #480]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003130:	4313      	orrs	r3, r2
 8003132:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003140:	4b73      	ldr	r3, [pc, #460]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	4970      	ldr	r1, [pc, #448]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314e:	4313      	orrs	r3, r2
 8003150:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800315e:	4b6c      	ldr	r3, [pc, #432]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f023 0210 	bic.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4969      	ldr	r1, [pc, #420]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316c:	4313      	orrs	r3, r2
 800316e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800317c:	4b64      	ldr	r3, [pc, #400]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003188:	4961      	ldr	r1, [pc, #388]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800319a:	4b5d      	ldr	r3, [pc, #372]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	f023 0220 	bic.w	r2, r3, #32
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	495a      	ldr	r1, [pc, #360]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b8:	4b55      	ldr	r3, [pc, #340]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031bc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	4952      	ldr	r1, [pc, #328]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	494b      	ldr	r1, [pc, #300]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031f4:	4b46      	ldr	r3, [pc, #280]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4943      	ldr	r1, [pc, #268]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003202:	4313      	orrs	r3, r2
 8003204:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003212:	4b3f      	ldr	r3, [pc, #252]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	493c      	ldr	r1, [pc, #240]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003230:	4b37      	ldr	r3, [pc, #220]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323c:	4934      	ldr	r1, [pc, #208]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800324e:	4b30      	ldr	r3, [pc, #192]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	492d      	ldr	r1, [pc, #180]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800326c:	4b28      	ldr	r3, [pc, #160]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003278:	4925      	ldr	r1, [pc, #148]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800327a:	4313      	orrs	r3, r2
 800327c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800328a:	4b21      	ldr	r3, [pc, #132]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	491e      	ldr	r1, [pc, #120]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80032a8:	4b19      	ldr	r3, [pc, #100]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b4:	4916      	ldr	r1, [pc, #88]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80032c6:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d2:	490f      	ldr	r1, [pc, #60]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80032e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	4907      	ldr	r1, [pc, #28]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003302:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	e002      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003316:	4913      	ldr	r1, [pc, #76]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003318:	4313      	orrs	r3, r2
 800331a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003328:	4b0e      	ldr	r3, [pc, #56]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003334:	490b      	ldr	r1, [pc, #44]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003336:	4313      	orrs	r3, r2
 8003338:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003346:	4b07      	ldr	r3, [pc, #28]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003352:	4904      	ldr	r1, [pc, #16]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003354:	4313      	orrs	r3, r2
 8003356:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3748      	adds	r7, #72	@ 0x48
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e049      	b.n	800340e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f841 	bl	8003416 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 f9da 	bl	8003760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d001      	beq.n	8003444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04f      	b.n	80034e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a23      	ldr	r2, [pc, #140]	@ (80034f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01d      	beq.n	80034a2 <HAL_TIM_Base_Start_IT+0x76>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346e:	d018      	beq.n	80034a2 <HAL_TIM_Base_Start_IT+0x76>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1f      	ldr	r2, [pc, #124]	@ (80034f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_TIM_Base_Start_IT+0x76>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1e      	ldr	r2, [pc, #120]	@ (80034f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_TIM_Base_Start_IT+0x76>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1c      	ldr	r2, [pc, #112]	@ (80034fc <HAL_TIM_Base_Start_IT+0xd0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_TIM_Base_Start_IT+0x76>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1b      	ldr	r2, [pc, #108]	@ (8003500 <HAL_TIM_Base_Start_IT+0xd4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_TIM_Base_Start_IT+0x76>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	@ (8003504 <HAL_TIM_Base_Start_IT+0xd8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d115      	bne.n	80034ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	4b17      	ldr	r3, [pc, #92]	@ (8003508 <HAL_TIM_Base_Start_IT+0xdc>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d015      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0xb4>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ba:	d011      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	e008      	b.n	80034e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e000      	b.n	80034e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800
 80034fc:	40013400 	.word	0x40013400
 8003500:	40014000 	.word	0x40014000
 8003504:	40015000 	.word	0x40015000
 8003508:	00010007 	.word	0x00010007

0800350c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d020      	beq.n	8003570 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01b      	beq.n	8003570 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0202 	mvn.w	r2, #2
 8003540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8e4 	bl	8003724 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8d6 	bl	8003710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8e7 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d020      	beq.n	80035bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01b      	beq.n	80035bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0204 	mvn.w	r2, #4
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8be 	bl	8003724 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f8b0 	bl	8003710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f8c1 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d020      	beq.n	8003608 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0208 	mvn.w	r2, #8
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2204      	movs	r2, #4
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f898 	bl	8003724 <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f88a 	bl	8003710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f89b 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d020      	beq.n	8003654 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01b      	beq.n	8003654 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0210 	mvn.w	r2, #16
 8003624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2208      	movs	r2, #8
 800362a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f872 	bl	8003724 <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f864 	bl	8003710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f875 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0201 	mvn.w	r2, #1
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fa30 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f916 	bl	80038c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f90e 	bl	80038dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f834 	bl	800374c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0220 	mvn.w	r2, #32
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8d6 	bl	80038b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a48      	ldr	r2, [pc, #288]	@ (8003894 <TIM_Base_SetConfig+0x134>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377e:	d00f      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a45      	ldr	r2, [pc, #276]	@ (8003898 <TIM_Base_SetConfig+0x138>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00b      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a44      	ldr	r2, [pc, #272]	@ (800389c <TIM_Base_SetConfig+0x13c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a43      	ldr	r2, [pc, #268]	@ (80038a0 <TIM_Base_SetConfig+0x140>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a42      	ldr	r2, [pc, #264]	@ (80038a4 <TIM_Base_SetConfig+0x144>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d108      	bne.n	80037b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a37      	ldr	r2, [pc, #220]	@ (8003894 <TIM_Base_SetConfig+0x134>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01f      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c0:	d01b      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a34      	ldr	r2, [pc, #208]	@ (8003898 <TIM_Base_SetConfig+0x138>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d017      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a33      	ldr	r2, [pc, #204]	@ (800389c <TIM_Base_SetConfig+0x13c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a32      	ldr	r2, [pc, #200]	@ (80038a0 <TIM_Base_SetConfig+0x140>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00f      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a32      	ldr	r2, [pc, #200]	@ (80038a8 <TIM_Base_SetConfig+0x148>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a31      	ldr	r2, [pc, #196]	@ (80038ac <TIM_Base_SetConfig+0x14c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a30      	ldr	r2, [pc, #192]	@ (80038b0 <TIM_Base_SetConfig+0x150>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a2b      	ldr	r2, [pc, #172]	@ (80038a4 <TIM_Base_SetConfig+0x144>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d108      	bne.n	800380c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <TIM_Base_SetConfig+0x134>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <TIM_Base_SetConfig+0x100>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a19      	ldr	r2, [pc, #100]	@ (80038a0 <TIM_Base_SetConfig+0x140>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00f      	beq.n	8003860 <TIM_Base_SetConfig+0x100>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a19      	ldr	r2, [pc, #100]	@ (80038a8 <TIM_Base_SetConfig+0x148>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00b      	beq.n	8003860 <TIM_Base_SetConfig+0x100>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a18      	ldr	r2, [pc, #96]	@ (80038ac <TIM_Base_SetConfig+0x14c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <TIM_Base_SetConfig+0x100>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a17      	ldr	r2, [pc, #92]	@ (80038b0 <TIM_Base_SetConfig+0x150>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_Base_SetConfig+0x100>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a12      	ldr	r2, [pc, #72]	@ (80038a4 <TIM_Base_SetConfig+0x144>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f023 0201 	bic.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	611a      	str	r2, [r3, #16]
  }
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40015000 	.word	0x40015000
 80038a8:	40014000 	.word	0x40014000
 80038ac:	40014400 	.word	0x40014400
 80038b0:	40014800 	.word	0x40014800

080038b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e040      	b.n	8003984 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd f920 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	@ 0x24
 800391c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fec0 	bl	80046bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fce9 	bl	8004314 <UART_SetConfig>
 8003942:	4603      	mov	r3, r0
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e01b      	b.n	8003984 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800395a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800396a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 ff3f 	bl	8004800 <UART_CheckIdleState>
 8003982:	4603      	mov	r3, r0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	@ 0x28
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d177      	bne.n	8003a94 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_UART_Transmit+0x24>
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e070      	b.n	8003a96 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2221      	movs	r2, #33	@ 0x21
 80039c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c2:	f7fd fb69 	bl	8001098 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e0:	d108      	bne.n	80039f4 <HAL_UART_Transmit+0x68>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	e003      	b.n	80039fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039fc:	e02f      	b.n	8003a5e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2180      	movs	r1, #128	@ 0x80
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 ffa1 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e03b      	b.n	8003a96 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a30:	b292      	uxth	r2, r2
 8003a32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	3302      	adds	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e007      	b.n	8003a4c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1c9      	bne.n	80039fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2140      	movs	r1, #64	@ 0x40
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 ff6b 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e005      	b.n	8003a96 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b08b      	sub	sp, #44	@ 0x2c
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d147      	bne.n	8003b46 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_UART_Transmit_IT+0x22>
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e040      	b.n	8003b48 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2221      	movs	r2, #33	@ 0x21
 8003aee:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af8:	d107      	bne.n	8003b0a <HAL_UART_Transmit_IT+0x6a>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a13      	ldr	r2, [pc, #76]	@ (8003b54 <HAL_UART_Transmit_IT+0xb4>)
 8003b06:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003b08:	e002      	b.n	8003b10 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a12      	ldr	r2, [pc, #72]	@ (8003b58 <HAL_UART_Transmit_IT+0xb8>)
 8003b0e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	69f9      	ldr	r1, [r7, #28]
 8003b34:	6a3a      	ldr	r2, [r7, #32]
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e6      	bne.n	8003b10 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	372c      	adds	r7, #44	@ 0x2c
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	08004f45 	.word	0x08004f45
 8003b58:	08004e8f 	.word	0x08004e8f

08003b5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	@ 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d132      	bne.n	8003bda <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_UART_Receive_DMA+0x24>
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e02b      	b.n	8003bdc <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d018      	beq.n	8003bca <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	623b      	str	r3, [r7, #32]
 8003bb8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	69f9      	ldr	r1, [r7, #28]
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e6      	bne.n	8003b98 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 ff2b 	bl	8004a2c <UART_Start_Receive_DMA>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	e000      	b.n	8003bdc <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	@ 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b090      	sub	sp, #64	@ 0x40
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bf8:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c04:	2b80      	cmp	r3, #128	@ 0x80
 8003c06:	d139      	bne.n	8003c7c <HAL_UART_DMAStop+0x98>
 8003c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0a:	2b21      	cmp	r3, #33	@ 0x21
 8003c0c:	d136      	bne.n	8003c7c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3308      	adds	r3, #8
 8003c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e5      	bne.n	8003c0e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd fbb6 	bl	80013c0 <HAL_DMA_Abort>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fd fccd 	bl	80015fe <HAL_DMA_GetError>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d105      	bne.n	8003c76 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2210      	movs	r2, #16
 8003c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e044      	b.n	8003d00 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 ff78 	bl	8004b6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c86:	2b40      	cmp	r3, #64	@ 0x40
 8003c88:	d139      	bne.n	8003cfe <HAL_UART_DMAStop+0x11a>
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8c:	2b22      	cmp	r3, #34	@ 0x22
 8003c8e:	d136      	bne.n	8003cfe <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3308      	adds	r3, #8
 8003c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3308      	adds	r3, #8
 8003cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb0:	61ba      	str	r2, [r7, #24]
 8003cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6979      	ldr	r1, [r7, #20]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e5      	bne.n	8003c90 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fd fb75 	bl	80013c0 <HAL_DMA_Abort>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd fc8c 	bl	80015fe <HAL_DMA_GetError>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d105      	bne.n	8003cf8 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2210      	movs	r2, #16
 8003cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e003      	b.n	8003d00 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 ff5d 	bl	8004bb8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3740      	adds	r7, #64	@ 0x40
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003d32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003d36:	4013      	ands	r3, r2
 8003d38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d115      	bne.n	8003d70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00f      	beq.n	8003d70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 82ab 	beq.w	80042bc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
      }
      return;
 8003d6e:	e2a5      	b.n	80042bc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8117 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d8a:	4b85      	ldr	r3, [pc, #532]	@ (8003fa0 <HAL_UART_IRQHandler+0x298>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 810a 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d011      	beq.n	8003dc4 <HAL_UART_IRQHandler+0xbc>
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2201      	movs	r2, #1
 8003db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d011      	beq.n	8003df4 <HAL_UART_IRQHandler+0xec>
 8003dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00b      	beq.n	8003df4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2202      	movs	r2, #2
 8003de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dea:	f043 0204 	orr.w	r2, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d011      	beq.n	8003e24 <HAL_UART_IRQHandler+0x11c>
 8003e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2204      	movs	r2, #4
 8003e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e1a:	f043 0202 	orr.w	r2, r3, #2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d017      	beq.n	8003e60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e56:	f043 0208 	orr.w	r2, r3, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d012      	beq.n	8003e92 <HAL_UART_IRQHandler+0x18a>
 8003e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00c      	beq.n	8003e92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8211 	beq.w	80042c0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b40      	cmp	r3, #64	@ 0x40
 8003edc:	d005      	beq.n	8003eea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ee2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d04f      	beq.n	8003f8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fe64 	bl	8004bb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efa:	2b40      	cmp	r3, #64	@ 0x40
 8003efc:	d141      	bne.n	8003f82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3308      	adds	r3, #8
 8003f04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3308      	adds	r3, #8
 8003f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1d9      	bne.n	8003efe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d013      	beq.n	8003f7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f56:	4a13      	ldr	r2, [pc, #76]	@ (8003fa4 <HAL_UART_IRQHandler+0x29c>)
 8003f58:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd fa6c 	bl	800143c <HAL_DMA_Abort_IT>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d017      	beq.n	8003f9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f74:	4610      	mov	r0, r2
 8003f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	e00f      	b.n	8003f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f9b4 	bl	80042e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	e00b      	b.n	8003f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f9b0 	bl	80042e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f88:	e007      	b.n	8003f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f9ac 	bl	80042e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003f98:	e192      	b.n	80042c0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9a:	bf00      	nop
    return;
 8003f9c:	e190      	b.n	80042c0 <HAL_UART_IRQHandler+0x5b8>
 8003f9e:	bf00      	nop
 8003fa0:	04000120 	.word	0x04000120
 8003fa4:	08004e63 	.word	0x08004e63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	f040 814b 	bne.w	8004248 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8144 	beq.w	8004248 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 813d 	beq.w	8004248 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	2b40      	cmp	r3, #64	@ 0x40
 8003fe2:	f040 80b5 	bne.w	8004150 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ff2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8164 	beq.w	80042c4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004006:	429a      	cmp	r2, r3
 8004008:	f080 815c 	bcs.w	80042c4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004012:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b20      	cmp	r3, #32
 800401e:	f000 8086 	beq.w	800412e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004036:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800403a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800403e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800404c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004050:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004058:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1da      	bne.n	8004022 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800407c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004090:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004094:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004098:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e1      	bne.n	800406c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3308      	adds	r3, #8
 80040c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e3      	bne.n	80040a8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040fe:	f023 0310 	bic.w	r3, r3, #16
 8004102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004110:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004112:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004116:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800411e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e4      	bne.n	80040ee <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004128:	4618      	mov	r0, r3
 800412a:	f7fd f949 	bl	80013c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004140:	b29b      	uxth	r3, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	b29b      	uxth	r3, r3
 8004146:	4619      	mov	r1, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f8d7 	bl	80042fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800414e:	e0b9      	b.n	80042c4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800415c:	b29b      	uxth	r3, r3
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80ab 	beq.w	80042c8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 80a6 	beq.w	80042c8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800418a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004190:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800419e:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e4      	bne.n	800417c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	623b      	str	r3, [r7, #32]
   return(result);
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e3      	bne.n	80041b2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60fb      	str	r3, [r7, #12]
   return(result);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	617b      	str	r3, [r7, #20]
   return(result);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e4      	bne.n	80041fe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800423a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f85b 	bl	80042fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004246:	e03f      	b.n	80042c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <HAL_UART_IRQHandler+0x56a>
 8004254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004258:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004268:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fef4 	bl	8005058 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004270:	e02d      	b.n	80042ce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00e      	beq.n	800429c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800427e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01c      	beq.n	80042cc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
    }
    return;
 800429a:	e017      	b.n	80042cc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d012      	beq.n	80042ce <HAL_UART_IRQHandler+0x5c6>
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00c      	beq.n	80042ce <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fea5 	bl	8005004 <UART_EndTransmit_IT>
    return;
 80042ba:	e008      	b.n	80042ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80042bc:	bf00      	nop
 80042be:	e006      	b.n	80042ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80042c0:	bf00      	nop
 80042c2:	e004      	b.n	80042ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80042c4:	bf00      	nop
 80042c6:	e002      	b.n	80042ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80042c8:	bf00      	nop
 80042ca:	e000      	b.n	80042ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80042cc:	bf00      	nop
  }

}
 80042ce:	37e8      	adds	r7, #232	@ 0xe8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b92      	ldr	r3, [pc, #584]	@ (8004588 <UART_SetConfig+0x274>)
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	6979      	ldr	r1, [r7, #20]
 8004348:	430b      	orrs	r3, r1
 800434a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a80      	ldr	r2, [pc, #512]	@ (800458c <UART_SetConfig+0x278>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d120      	bne.n	80043d2 <UART_SetConfig+0xbe>
 8004390:	4b7f      	ldr	r3, [pc, #508]	@ (8004590 <UART_SetConfig+0x27c>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	2b03      	cmp	r3, #3
 800439a:	d817      	bhi.n	80043cc <UART_SetConfig+0xb8>
 800439c:	a201      	add	r2, pc, #4	@ (adr r2, 80043a4 <UART_SetConfig+0x90>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043b5 	.word	0x080043b5
 80043a8:	080043c1 	.word	0x080043c1
 80043ac:	080043c7 	.word	0x080043c7
 80043b0:	080043bb 	.word	0x080043bb
 80043b4:	2301      	movs	r3, #1
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e0b5      	b.n	8004526 <UART_SetConfig+0x212>
 80043ba:	2302      	movs	r3, #2
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e0b2      	b.n	8004526 <UART_SetConfig+0x212>
 80043c0:	2304      	movs	r3, #4
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e0af      	b.n	8004526 <UART_SetConfig+0x212>
 80043c6:	2308      	movs	r3, #8
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e0ac      	b.n	8004526 <UART_SetConfig+0x212>
 80043cc:	2310      	movs	r3, #16
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e0a9      	b.n	8004526 <UART_SetConfig+0x212>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004594 <UART_SetConfig+0x280>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d124      	bne.n	8004426 <UART_SetConfig+0x112>
 80043dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004590 <UART_SetConfig+0x27c>)
 80043de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043e8:	d011      	beq.n	800440e <UART_SetConfig+0xfa>
 80043ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043ee:	d817      	bhi.n	8004420 <UART_SetConfig+0x10c>
 80043f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043f4:	d011      	beq.n	800441a <UART_SetConfig+0x106>
 80043f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043fa:	d811      	bhi.n	8004420 <UART_SetConfig+0x10c>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <UART_SetConfig+0xf4>
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004404:	d006      	beq.n	8004414 <UART_SetConfig+0x100>
 8004406:	e00b      	b.n	8004420 <UART_SetConfig+0x10c>
 8004408:	2300      	movs	r3, #0
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e08b      	b.n	8004526 <UART_SetConfig+0x212>
 800440e:	2302      	movs	r3, #2
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	e088      	b.n	8004526 <UART_SetConfig+0x212>
 8004414:	2304      	movs	r3, #4
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e085      	b.n	8004526 <UART_SetConfig+0x212>
 800441a:	2308      	movs	r3, #8
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e082      	b.n	8004526 <UART_SetConfig+0x212>
 8004420:	2310      	movs	r3, #16
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e07f      	b.n	8004526 <UART_SetConfig+0x212>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a5b      	ldr	r2, [pc, #364]	@ (8004598 <UART_SetConfig+0x284>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d124      	bne.n	800447a <UART_SetConfig+0x166>
 8004430:	4b57      	ldr	r3, [pc, #348]	@ (8004590 <UART_SetConfig+0x27c>)
 8004432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004434:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004438:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800443c:	d011      	beq.n	8004462 <UART_SetConfig+0x14e>
 800443e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004442:	d817      	bhi.n	8004474 <UART_SetConfig+0x160>
 8004444:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004448:	d011      	beq.n	800446e <UART_SetConfig+0x15a>
 800444a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800444e:	d811      	bhi.n	8004474 <UART_SetConfig+0x160>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <UART_SetConfig+0x148>
 8004454:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004458:	d006      	beq.n	8004468 <UART_SetConfig+0x154>
 800445a:	e00b      	b.n	8004474 <UART_SetConfig+0x160>
 800445c:	2300      	movs	r3, #0
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e061      	b.n	8004526 <UART_SetConfig+0x212>
 8004462:	2302      	movs	r3, #2
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e05e      	b.n	8004526 <UART_SetConfig+0x212>
 8004468:	2304      	movs	r3, #4
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e05b      	b.n	8004526 <UART_SetConfig+0x212>
 800446e:	2308      	movs	r3, #8
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e058      	b.n	8004526 <UART_SetConfig+0x212>
 8004474:	2310      	movs	r3, #16
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e055      	b.n	8004526 <UART_SetConfig+0x212>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a47      	ldr	r2, [pc, #284]	@ (800459c <UART_SetConfig+0x288>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d124      	bne.n	80044ce <UART_SetConfig+0x1ba>
 8004484:	4b42      	ldr	r3, [pc, #264]	@ (8004590 <UART_SetConfig+0x27c>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800448c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004490:	d011      	beq.n	80044b6 <UART_SetConfig+0x1a2>
 8004492:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004496:	d817      	bhi.n	80044c8 <UART_SetConfig+0x1b4>
 8004498:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800449c:	d011      	beq.n	80044c2 <UART_SetConfig+0x1ae>
 800449e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044a2:	d811      	bhi.n	80044c8 <UART_SetConfig+0x1b4>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <UART_SetConfig+0x19c>
 80044a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ac:	d006      	beq.n	80044bc <UART_SetConfig+0x1a8>
 80044ae:	e00b      	b.n	80044c8 <UART_SetConfig+0x1b4>
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e037      	b.n	8004526 <UART_SetConfig+0x212>
 80044b6:	2302      	movs	r3, #2
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e034      	b.n	8004526 <UART_SetConfig+0x212>
 80044bc:	2304      	movs	r3, #4
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e031      	b.n	8004526 <UART_SetConfig+0x212>
 80044c2:	2308      	movs	r3, #8
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e02e      	b.n	8004526 <UART_SetConfig+0x212>
 80044c8:	2310      	movs	r3, #16
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e02b      	b.n	8004526 <UART_SetConfig+0x212>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a33      	ldr	r2, [pc, #204]	@ (80045a0 <UART_SetConfig+0x28c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d124      	bne.n	8004522 <UART_SetConfig+0x20e>
 80044d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004590 <UART_SetConfig+0x27c>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80044e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044e4:	d011      	beq.n	800450a <UART_SetConfig+0x1f6>
 80044e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044ea:	d817      	bhi.n	800451c <UART_SetConfig+0x208>
 80044ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044f0:	d011      	beq.n	8004516 <UART_SetConfig+0x202>
 80044f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044f6:	d811      	bhi.n	800451c <UART_SetConfig+0x208>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <UART_SetConfig+0x1f0>
 80044fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004500:	d006      	beq.n	8004510 <UART_SetConfig+0x1fc>
 8004502:	e00b      	b.n	800451c <UART_SetConfig+0x208>
 8004504:	2300      	movs	r3, #0
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e00d      	b.n	8004526 <UART_SetConfig+0x212>
 800450a:	2302      	movs	r3, #2
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e00a      	b.n	8004526 <UART_SetConfig+0x212>
 8004510:	2304      	movs	r3, #4
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e007      	b.n	8004526 <UART_SetConfig+0x212>
 8004516:	2308      	movs	r3, #8
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e004      	b.n	8004526 <UART_SetConfig+0x212>
 800451c:	2310      	movs	r3, #16
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e001      	b.n	8004526 <UART_SetConfig+0x212>
 8004522:	2310      	movs	r3, #16
 8004524:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800452e:	d16b      	bne.n	8004608 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004530:	7ffb      	ldrb	r3, [r7, #31]
 8004532:	2b08      	cmp	r3, #8
 8004534:	d838      	bhi.n	80045a8 <UART_SetConfig+0x294>
 8004536:	a201      	add	r2, pc, #4	@ (adr r2, 800453c <UART_SetConfig+0x228>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	08004561 	.word	0x08004561
 8004540:	08004569 	.word	0x08004569
 8004544:	08004571 	.word	0x08004571
 8004548:	080045a9 	.word	0x080045a9
 800454c:	08004577 	.word	0x08004577
 8004550:	080045a9 	.word	0x080045a9
 8004554:	080045a9 	.word	0x080045a9
 8004558:	080045a9 	.word	0x080045a9
 800455c:	0800457f 	.word	0x0800457f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004560:	f7fe fc70 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 8004564:	61b8      	str	r0, [r7, #24]
        break;
 8004566:	e024      	b.n	80045b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004568:	f7fe fc8e 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 800456c:	61b8      	str	r0, [r7, #24]
        break;
 800456e:	e020      	b.n	80045b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004570:	4b0c      	ldr	r3, [pc, #48]	@ (80045a4 <UART_SetConfig+0x290>)
 8004572:	61bb      	str	r3, [r7, #24]
        break;
 8004574:	e01d      	b.n	80045b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004576:	f7fe fc05 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 800457a:	61b8      	str	r0, [r7, #24]
        break;
 800457c:	e019      	b.n	80045b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004582:	61bb      	str	r3, [r7, #24]
        break;
 8004584:	e015      	b.n	80045b2 <UART_SetConfig+0x29e>
 8004586:	bf00      	nop
 8004588:	efff69f3 	.word	0xefff69f3
 800458c:	40013800 	.word	0x40013800
 8004590:	40021000 	.word	0x40021000
 8004594:	40004400 	.word	0x40004400
 8004598:	40004800 	.word	0x40004800
 800459c:	40004c00 	.word	0x40004c00
 80045a0:	40005000 	.word	0x40005000
 80045a4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	77bb      	strb	r3, [r7, #30]
        break;
 80045b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d073      	beq.n	80046a0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	005a      	lsls	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	441a      	add	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b0f      	cmp	r3, #15
 80045d2:	d916      	bls.n	8004602 <UART_SetConfig+0x2ee>
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045da:	d212      	bcs.n	8004602 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f023 030f 	bic.w	r3, r3, #15
 80045e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	89fb      	ldrh	r3, [r7, #14]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	89fa      	ldrh	r2, [r7, #14]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	e04e      	b.n	80046a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	77bb      	strb	r3, [r7, #30]
 8004606:	e04b      	b.n	80046a0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004608:	7ffb      	ldrb	r3, [r7, #31]
 800460a:	2b08      	cmp	r3, #8
 800460c:	d827      	bhi.n	800465e <UART_SetConfig+0x34a>
 800460e:	a201      	add	r2, pc, #4	@ (adr r2, 8004614 <UART_SetConfig+0x300>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004639 	.word	0x08004639
 8004618:	08004641 	.word	0x08004641
 800461c:	08004649 	.word	0x08004649
 8004620:	0800465f 	.word	0x0800465f
 8004624:	0800464f 	.word	0x0800464f
 8004628:	0800465f 	.word	0x0800465f
 800462c:	0800465f 	.word	0x0800465f
 8004630:	0800465f 	.word	0x0800465f
 8004634:	08004657 	.word	0x08004657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004638:	f7fe fc04 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 800463c:	61b8      	str	r0, [r7, #24]
        break;
 800463e:	e013      	b.n	8004668 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004640:	f7fe fc22 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 8004644:	61b8      	str	r0, [r7, #24]
        break;
 8004646:	e00f      	b.n	8004668 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004648:	4b1b      	ldr	r3, [pc, #108]	@ (80046b8 <UART_SetConfig+0x3a4>)
 800464a:	61bb      	str	r3, [r7, #24]
        break;
 800464c:	e00c      	b.n	8004668 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464e:	f7fe fb99 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8004652:	61b8      	str	r0, [r7, #24]
        break;
 8004654:	e008      	b.n	8004668 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465a:	61bb      	str	r3, [r7, #24]
        break;
 800465c:	e004      	b.n	8004668 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	77bb      	strb	r3, [r7, #30]
        break;
 8004666:	bf00      	nop
    }

    if (pclk != 0U)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d018      	beq.n	80046a0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	085a      	lsrs	r2, r3, #1
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	441a      	add	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b0f      	cmp	r3, #15
 8004686:	d909      	bls.n	800469c <UART_SetConfig+0x388>
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800468e:	d205      	bcs.n	800469c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	e001      	b.n	80046a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	007a1200 	.word	0x007a1200

080046bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ba:	d10a      	bne.n	80047d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b098      	sub	sp, #96	@ 0x60
 8004804:	af02      	add	r7, sp, #8
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004810:	f7fc fc42 	bl	8001098 <HAL_GetTick>
 8004814:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d12e      	bne.n	8004882 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004824:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800482c:	2200      	movs	r2, #0
 800482e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f88c 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d021      	beq.n	8004882 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800484c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004852:	653b      	str	r3, [r7, #80]	@ 0x50
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800485c:	647b      	str	r3, [r7, #68]	@ 0x44
 800485e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800486a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e062      	b.n	8004948 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d149      	bne.n	8004924 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f856 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d03c      	beq.n	8004924 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	623b      	str	r3, [r7, #32]
   return(result);
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048fc:	61fa      	str	r2, [r7, #28]
 80048fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	617b      	str	r3, [r7, #20]
   return(result);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e011      	b.n	8004948 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3758      	adds	r7, #88	@ 0x58
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004960:	e04f      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004968:	d04b      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496a:	f7fc fb95 	bl	8001098 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	429a      	cmp	r2, r3
 8004978:	d302      	bcc.n	8004980 <UART_WaitOnFlagUntilTimeout+0x30>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e04e      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d037      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b80      	cmp	r3, #128	@ 0x80
 8004996:	d034      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b40      	cmp	r3, #64	@ 0x40
 800499c:	d031      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d110      	bne.n	80049ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2208      	movs	r2, #8
 80049b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f8ff 	bl	8004bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2208      	movs	r2, #8
 80049be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e029      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049dc:	d111      	bne.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f8e5 	bl	8004bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e00f      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d0a0      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b096      	sub	sp, #88	@ 0x58
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	88fa      	ldrh	r2, [r7, #6]
 8004a44:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2222      	movs	r2, #34	@ 0x22
 8004a54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d028      	beq.n	8004ab2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a64:	4a3e      	ldr	r2, [pc, #248]	@ (8004b60 <UART_Start_Receive_DMA+0x134>)
 8004a66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6c:	4a3d      	ldr	r2, [pc, #244]	@ (8004b64 <UART_Start_Receive_DMA+0x138>)
 8004a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a74:	4a3c      	ldr	r2, [pc, #240]	@ (8004b68 <UART_Start_Receive_DMA+0x13c>)
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3324      	adds	r3, #36	@ 0x24
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a90:	461a      	mov	r2, r3
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	f7fc fc35 	bl	8001302 <HAL_DMA_Start_IT>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e051      	b.n	8004b56 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d018      	beq.n	8004aec <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ace:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ada:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e6      	bne.n	8004aba <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b40:	623a      	str	r2, [r7, #32]
 8004b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	69f9      	ldr	r1, [r7, #28]
 8004b46:	6a3a      	ldr	r2, [r7, #32]
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e5      	bne.n	8004b20 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3758      	adds	r7, #88	@ 0x58
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	08004c81 	.word	0x08004c81
 8004b64:	08004da7 	.word	0x08004da7
 8004b68:	08004de5 	.word	0x08004de5

08004b6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	@ 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6979      	ldr	r1, [r7, #20]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e6      	bne.n	8004b74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004bac:	bf00      	nop
 8004bae:	3724      	adds	r7, #36	@ 0x24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b095      	sub	sp, #84	@ 0x54
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bde:	643b      	str	r3, [r7, #64]	@ 0x40
 8004be0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004be4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e6      	bne.n	8004bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e5      	bne.n	8004bf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d118      	bne.n	8004c60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6979      	ldr	r1, [r7, #20]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e6      	bne.n	8004c2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c74:	bf00      	nop
 8004c76:	3754      	adds	r7, #84	@ 0x54
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b09c      	sub	sp, #112	@ 0x70
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d071      	beq.n	8004d7a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cbe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e6      	bne.n	8004c9e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004cf0:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cf2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e5      	bne.n	8004cd0 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	623b      	str	r3, [r7, #32]
   return(result);
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3308      	adds	r3, #8
 8004d22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d24:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e5      	bne.n	8004d04 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d118      	bne.n	8004d7a <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f023 0310 	bic.w	r3, r3, #16
 8004d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	69b9      	ldr	r1, [r7, #24]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	617b      	str	r3, [r7, #20]
   return(result);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e6      	bne.n	8004d48 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d107      	bne.n	8004d98 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d92:	f7ff fab3 	bl	80042fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d96:	e002      	b.n	8004d9e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004d98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d9a:	f7fb fbef 	bl	800057c <HAL_UART_RxCpltCallback>
}
 8004d9e:	bf00      	nop
 8004da0:	3770      	adds	r7, #112	@ 0x70
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d109      	bne.n	8004dd6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff fa94 	bl	80042fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dd4:	e002      	b.n	8004ddc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff fa7c 	bl	80042d4 <HAL_UART_RxHalfCpltCallback>
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004df6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0a:	2b80      	cmp	r3, #128	@ 0x80
 8004e0c:	d109      	bne.n	8004e22 <UART_DMAError+0x3e>
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b21      	cmp	r3, #33	@ 0x21
 8004e12:	d106      	bne.n	8004e22 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004e1c:	6978      	ldr	r0, [r7, #20]
 8004e1e:	f7ff fea5 	bl	8004b6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2c:	2b40      	cmp	r3, #64	@ 0x40
 8004e2e:	d109      	bne.n	8004e44 <UART_DMAError+0x60>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b22      	cmp	r3, #34	@ 0x22
 8004e34:	d106      	bne.n	8004e44 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004e3e:	6978      	ldr	r0, [r7, #20]
 8004e40:	f7ff feba 	bl	8004bb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e4a:	f043 0210 	orr.w	r2, r3, #16
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e54:	6978      	ldr	r0, [r7, #20]
 8004e56:	f7ff fa47 	bl	80042e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e5a:	bf00      	nop
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff fa31 	bl	80042e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b08f      	sub	sp, #60	@ 0x3c
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e9a:	2b21      	cmp	r3, #33	@ 0x21
 8004e9c:	d14c      	bne.n	8004f38 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d132      	bne.n	8004f10 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e6      	bne.n	8004eaa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6979      	ldr	r1, [r7, #20]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	613b      	str	r3, [r7, #16]
   return(result);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e6      	bne.n	8004edc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004f0e:	e013      	b.n	8004f38 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004f38:	bf00      	nop
 8004f3a:	373c      	adds	r7, #60	@ 0x3c
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b091      	sub	sp, #68	@ 0x44
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f50:	2b21      	cmp	r3, #33	@ 0x21
 8004f52:	d151      	bne.n	8004ff8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d132      	bne.n	8004fc6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e6      	bne.n	8004f60 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	69b9      	ldr	r1, [r7, #24]
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e6      	bne.n	8004f92 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004fc4:	e018      	b.n	8004ff8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fce:	881a      	ldrh	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd8:	b292      	uxth	r2, r2
 8004fda:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe0:	1c9a      	adds	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004ff8:	bf00      	nop
 8004ffa:	3744      	adds	r7, #68	@ 0x44
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	60bb      	str	r3, [r7, #8]
   return(result);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	613b      	str	r3, [r7, #16]
   return(result);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e6      	bne.n	800500c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fb fafe 	bl	800064c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005050:	bf00      	nop
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005072:	f3ef 8305 	mrs	r3, IPSR
 8005076:	60bb      	str	r3, [r7, #8]
  return(result);
 8005078:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10f      	bne.n	800509e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507e:	f3ef 8310 	mrs	r3, PRIMASK
 8005082:	607b      	str	r3, [r7, #4]
  return(result);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <osKernelInitialize+0x32>
 800508a:	4b11      	ldr	r3, [pc, #68]	@ (80050d0 <osKernelInitialize+0x64>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d109      	bne.n	80050a6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005092:	f3ef 8311 	mrs	r3, BASEPRI
 8005096:	603b      	str	r3, [r7, #0]
  return(result);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800509e:	f06f 0305 	mvn.w	r3, #5
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e00c      	b.n	80050c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050a6:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <osKernelInitialize+0x64>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d105      	bne.n	80050ba <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80050ae:	4b08      	ldr	r3, [pc, #32]	@ (80050d0 <osKernelInitialize+0x64>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e002      	b.n	80050c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80050c0:	68fb      	ldr	r3, [r7, #12]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20001b4c 	.word	0x20001b4c

080050d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050da:	f3ef 8305 	mrs	r3, IPSR
 80050de:	60bb      	str	r3, [r7, #8]
  return(result);
 80050e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10f      	bne.n	8005106 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	607b      	str	r3, [r7, #4]
  return(result);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <osKernelStart+0x32>
 80050f2:	4b11      	ldr	r3, [pc, #68]	@ (8005138 <osKernelStart+0x64>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d109      	bne.n	800510e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050fa:	f3ef 8311 	mrs	r3, BASEPRI
 80050fe:	603b      	str	r3, [r7, #0]
  return(result);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005106:	f06f 0305 	mvn.w	r3, #5
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e00e      	b.n	800512c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800510e:	4b0a      	ldr	r3, [pc, #40]	@ (8005138 <osKernelStart+0x64>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d107      	bne.n	8005126 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005116:	4b08      	ldr	r3, [pc, #32]	@ (8005138 <osKernelStart+0x64>)
 8005118:	2202      	movs	r2, #2
 800511a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800511c:	f001 f8b0 	bl	8006280 <vTaskStartScheduler>
      stat = osOK;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e002      	b.n	800512c <osKernelStart+0x58>
    } else {
      stat = osError;
 8005126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800512a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800512c:	68fb      	ldr	r3, [r7, #12]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20001b4c 	.word	0x20001b4c

0800513c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b092      	sub	sp, #72	@ 0x48
 8005140:	af04      	add	r7, sp, #16
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800514c:	f3ef 8305 	mrs	r3, IPSR
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 8094 	bne.w	8005282 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515a:	f3ef 8310 	mrs	r3, PRIMASK
 800515e:	623b      	str	r3, [r7, #32]
  return(result);
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f040 808d 	bne.w	8005282 <osThreadNew+0x146>
 8005168:	4b48      	ldr	r3, [pc, #288]	@ (800528c <osThreadNew+0x150>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d106      	bne.n	800517e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005170:	f3ef 8311 	mrs	r3, BASEPRI
 8005174:	61fb      	str	r3, [r7, #28]
  return(result);
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f040 8082 	bne.w	8005282 <osThreadNew+0x146>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d07e      	beq.n	8005282 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005184:	2380      	movs	r3, #128	@ 0x80
 8005186:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005188:	2318      	movs	r3, #24
 800518a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800518c:	2300      	movs	r3, #0
 800518e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005190:	f107 031b 	add.w	r3, r7, #27
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8005196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800519a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d045      	beq.n	800522e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <osThreadNew+0x74>
        name = attr->name;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <osThreadNew+0x9a>
 80051c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c6:	2b38      	cmp	r3, #56	@ 0x38
 80051c8:	d805      	bhi.n	80051d6 <osThreadNew+0x9a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <osThreadNew+0x9e>
        return (NULL);
 80051d6:	2300      	movs	r3, #0
 80051d8:	e054      	b.n	8005284 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	089b      	lsrs	r3, r3, #2
 80051e8:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00e      	beq.n	8005210 <osThreadNew+0xd4>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	2ba7      	cmp	r3, #167	@ 0xa7
 80051f8:	d90a      	bls.n	8005210 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d006      	beq.n	8005210 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <osThreadNew+0xd4>
        mem = 1;
 800520a:	2301      	movs	r3, #1
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800520e:	e010      	b.n	8005232 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10c      	bne.n	8005232 <osThreadNew+0xf6>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d108      	bne.n	8005232 <osThreadNew+0xf6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <osThreadNew+0xf6>
          mem = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800522c:	e001      	b.n	8005232 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	2b01      	cmp	r3, #1
 8005236:	d110      	bne.n	800525a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005240:	9202      	str	r2, [sp, #8]
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800524c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fe2c 	bl	8005eac <xTaskCreateStatic>
 8005254:	4603      	mov	r3, r0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e013      	b.n	8005282 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d110      	bne.n	8005282 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	b29a      	uxth	r2, r3
 8005264:	f107 0314 	add.w	r3, r7, #20
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fe79 	bl	8005f6a <xTaskCreate>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d001      	beq.n	8005282 <osThreadNew+0x146>
          hTask = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005282:	697b      	ldr	r3, [r7, #20]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3738      	adds	r7, #56	@ 0x38
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20001b4c 	.word	0x20001b4c

08005290 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005298:	f3ef 8305 	mrs	r3, IPSR
 800529c:	613b      	str	r3, [r7, #16]
  return(result);
 800529e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a4:	f3ef 8310 	mrs	r3, PRIMASK
 80052a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <osDelay+0x34>
 80052b0:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <osDelay+0x58>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d109      	bne.n	80052cc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052b8:	f3ef 8311 	mrs	r3, BASEPRI
 80052bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <osDelay+0x3c>
    stat = osErrorISR;
 80052c4:	f06f 0305 	mvn.w	r3, #5
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e007      	b.n	80052dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 ff9c 	bl	8006214 <vTaskDelay>
    }
  }

  return (stat);
 80052dc:	697b      	ldr	r3, [r7, #20]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20001b4c 	.word	0x20001b4c

080052ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a07      	ldr	r2, [pc, #28]	@ (8005318 <vApplicationGetIdleTaskMemory+0x2c>)
 80052fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a06      	ldr	r2, [pc, #24]	@ (800531c <vApplicationGetIdleTaskMemory+0x30>)
 8005302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2280      	movs	r2, #128	@ 0x80
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20001b50 	.word	0x20001b50
 800531c:	20001bf8 	.word	0x20001bf8

08005320 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a07      	ldr	r2, [pc, #28]	@ (800534c <vApplicationGetTimerTaskMemory+0x2c>)
 8005330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a06      	ldr	r2, [pc, #24]	@ (8005350 <vApplicationGetTimerTaskMemory+0x30>)
 8005336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800533e:	601a      	str	r2, [r3, #0]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	20001df8 	.word	0x20001df8
 8005350:	20001ea0 	.word	0x20001ea0

08005354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f103 0208 	add.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800536c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f103 0208 	add.w	r2, r3, #8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 0208 	add.w	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800540c:	d103      	bne.n	8005416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e00c      	b.n	8005430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3308      	adds	r3, #8
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e002      	b.n	8005424 <vListInsert+0x2e>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	d2f6      	bcs.n	800541e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6892      	ldr	r2, [r2, #8]
 800547e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6852      	ldr	r2, [r2, #4]
 8005488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d103      	bne.n	800549c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	1e5a      	subs	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054e8:	f002 f86e 	bl	80075c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f4:	68f9      	ldr	r1, [r7, #12]
 80054f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	441a      	add	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	3b01      	subs	r3, #1
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	441a      	add	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	22ff      	movs	r2, #255	@ 0xff
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	22ff      	movs	r2, #255	@ 0xff
 8005534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d114      	bne.n	8005568 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01a      	beq.n	800557c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3310      	adds	r3, #16
 800554a:	4618      	mov	r0, r3
 800554c:	f001 f93c 	bl	80067c8 <xTaskRemoveFromEventList>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d012      	beq.n	800557c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005556:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <xQueueGenericReset+0xd0>)
 8005558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	e009      	b.n	800557c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3310      	adds	r3, #16
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fef1 	bl	8005354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3324      	adds	r3, #36	@ 0x24
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff feec 	bl	8005354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800557c:	f002 f856 	bl	800762c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005580:	2301      	movs	r3, #1
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	@ 0x38
 8005594:	af02      	add	r7, sp, #8
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	e7fd      	b.n	80055b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <xQueueGenericCreateStatic+0x56>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <xQueueGenericCreateStatic+0x5a>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <xQueueGenericCreateStatic+0x5c>
 80055ea:	2300      	movs	r3, #0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10b      	bne.n	8005608 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	623b      	str	r3, [r7, #32]
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <xQueueGenericCreateStatic+0x84>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <xQueueGenericCreateStatic+0x88>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <xQueueGenericCreateStatic+0x8a>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	61fb      	str	r3, [r7, #28]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005636:	2350      	movs	r3, #80	@ 0x50
 8005638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b50      	cmp	r3, #80	@ 0x50
 800563e:	d00b      	beq.n	8005658 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	61bb      	str	r3, [r7, #24]
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800565c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800566a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800566e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f805 	bl	8005688 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800567e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005680:	4618      	mov	r0, r3
 8005682:	3730      	adds	r7, #48	@ 0x30
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d103      	bne.n	80056a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e002      	b.n	80056aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056b6:	2101      	movs	r1, #1
 80056b8:	69b8      	ldr	r0, [r7, #24]
 80056ba:	f7ff feff 	bl	80054bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08e      	sub	sp, #56	@ 0x38
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <xQueueGenericSend+0x34>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <xQueueGenericSend+0x42>
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <xQueueGenericSend+0x46>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <xQueueGenericSend+0x48>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <xQueueGenericSend+0x64>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800572e:	bf00      	nop
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d103      	bne.n	8005742 <xQueueGenericSend+0x72>
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <xQueueGenericSend+0x76>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <xQueueGenericSend+0x78>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <xQueueGenericSend+0x94>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	623b      	str	r3, [r7, #32]
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	e7fd      	b.n	8005760 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005764:	f001 f9fc 	bl	8006b60 <xTaskGetSchedulerState>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <xQueueGenericSend+0xa4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <xQueueGenericSend+0xa8>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <xQueueGenericSend+0xaa>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <xQueueGenericSend+0xc6>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	61fb      	str	r3, [r7, #28]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005796:	f001 ff17 	bl	80075c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800579a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <xQueueGenericSend+0xdc>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d129      	bne.n	8005800 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057b2:	f000 fa0d 	bl	8005bd0 <prvCopyDataToQueue>
 80057b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d010      	beq.n	80057e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	3324      	adds	r3, #36	@ 0x24
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 ffff 	bl	80067c8 <xTaskRemoveFromEventList>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d013      	beq.n	80057f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057d0:	4b3f      	ldr	r3, [pc, #252]	@ (80058d0 <xQueueGenericSend+0x200>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	e00a      	b.n	80057f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057e8:	4b39      	ldr	r3, [pc, #228]	@ (80058d0 <xQueueGenericSend+0x200>)
 80057ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057f8:	f001 ff18 	bl	800762c <vPortExitCritical>
				return pdPASS;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e063      	b.n	80058c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005806:	f001 ff11 	bl	800762c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800580a:	2300      	movs	r3, #0
 800580c:	e05c      	b.n	80058c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005814:	f107 0314 	add.w	r3, r7, #20
 8005818:	4618      	mov	r0, r3
 800581a:	f001 f839 	bl	8006890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800581e:	2301      	movs	r3, #1
 8005820:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005822:	f001 ff03 	bl	800762c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005826:	f000 fd9b 	bl	8006360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800582a:	f001 fecd 	bl	80075c8 <vPortEnterCritical>
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005834:	b25b      	sxtb	r3, r3
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800583a:	d103      	bne.n	8005844 <xQueueGenericSend+0x174>
 800583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800584a:	b25b      	sxtb	r3, r3
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005850:	d103      	bne.n	800585a <xQueueGenericSend+0x18a>
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800585a:	f001 fee7 	bl	800762c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800585e:	1d3a      	adds	r2, r7, #4
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f001 f828 	bl	80068bc <xTaskCheckForTimeOut>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d124      	bne.n	80058bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005872:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005874:	f000 faa4 	bl	8005dc0 <prvIsQueueFull>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	3310      	adds	r3, #16
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f000 ff4c 	bl	8006724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800588c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800588e:	f000 fa2f 	bl	8005cf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005892:	f000 fd73 	bl	800637c <xTaskResumeAll>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	f47f af7c 	bne.w	8005796 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800589e:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <xQueueGenericSend+0x200>)
 80058a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	e772      	b.n	8005796 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058b2:	f000 fa1d 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058b6:	f000 fd61 	bl	800637c <xTaskResumeAll>
 80058ba:	e76c      	b.n	8005796 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058be:	f000 fa17 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058c2:	f000 fd5b 	bl	800637c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058c6:	2300      	movs	r3, #0
		}
	}
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3738      	adds	r7, #56	@ 0x38
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08e      	sub	sp, #56	@ 0x38
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058fe:	bf00      	nop
 8005900:	bf00      	nop
 8005902:	e7fd      	b.n	8005900 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <xQueueGenericSendFromISR+0x3e>
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <xQueueGenericSendFromISR+0x42>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <xQueueGenericSendFromISR+0x44>
 8005916:	2300      	movs	r3, #0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	623b      	str	r3, [r7, #32]
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d103      	bne.n	8005942 <xQueueGenericSendFromISR+0x6e>
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <xQueueGenericSendFromISR+0x72>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <xQueueGenericSendFromISR+0x74>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	61fb      	str	r3, [r7, #28]
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005964:	f001 ff10 	bl	8007788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005968:	f3ef 8211 	mrs	r2, BASEPRI
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	61ba      	str	r2, [r7, #24]
 800597e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005980:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005982:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598c:	429a      	cmp	r2, r3
 800598e:	d302      	bcc.n	8005996 <xQueueGenericSendFromISR+0xc2>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d12c      	bne.n	80059f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800599c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059a6:	f000 f913 	bl	8005bd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059b2:	d112      	bne.n	80059da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d016      	beq.n	80059ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	3324      	adds	r3, #36	@ 0x24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 ff01 	bl	80067c8 <xTaskRemoveFromEventList>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00e      	beq.n	80059ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	e007      	b.n	80059ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059de:	3301      	adds	r3, #1
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	b25a      	sxtb	r2, r3
 80059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059ea:	2301      	movs	r3, #1
 80059ec:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80059ee:	e001      	b.n	80059f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3738      	adds	r7, #56	@ 0x38
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08c      	sub	sp, #48	@ 0x30
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <xQueueReceive+0x32>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	623b      	str	r3, [r7, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	e7fd      	b.n	8005a3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <xQueueReceive+0x40>
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <xQueueReceive+0x44>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <xQueueReceive+0x46>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <xQueueReceive+0x62>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	61fb      	str	r3, [r7, #28]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a6e:	f001 f877 	bl	8006b60 <xTaskGetSchedulerState>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <xQueueReceive+0x72>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <xQueueReceive+0x76>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <xQueueReceive+0x78>
 8005a82:	2300      	movs	r3, #0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <xQueueReceive+0x94>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	61bb      	str	r3, [r7, #24]
}
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
 8005a9e:	e7fd      	b.n	8005a9c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aa0:	f001 fd92 	bl	80075c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01f      	beq.n	8005af0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab4:	f000 f8f6 	bl	8005ca4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	1e5a      	subs	r2, r3, #1
 8005abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00f      	beq.n	8005ae8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aca:	3310      	adds	r3, #16
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fe7b 	bl	80067c8 <xTaskRemoveFromEventList>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8005bcc <xQueueReceive+0x1c0>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ae8:	f001 fda0 	bl	800762c <vPortExitCritical>
				return pdPASS;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e069      	b.n	8005bc4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005af6:	f001 fd99 	bl	800762c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e062      	b.n	8005bc4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b04:	f107 0310 	add.w	r3, r7, #16
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fec1 	bl	8006890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b12:	f001 fd8b 	bl	800762c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b16:	f000 fc23 	bl	8006360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b1a:	f001 fd55 	bl	80075c8 <vPortEnterCritical>
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b24:	b25b      	sxtb	r3, r3
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b2a:	d103      	bne.n	8005b34 <xQueueReceive+0x128>
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b3a:	b25b      	sxtb	r3, r3
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b40:	d103      	bne.n	8005b4a <xQueueReceive+0x13e>
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b4a:	f001 fd6f 	bl	800762c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b4e:	1d3a      	adds	r2, r7, #4
 8005b50:	f107 0310 	add.w	r3, r7, #16
 8005b54:	4611      	mov	r1, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 feb0 	bl	80068bc <xTaskCheckForTimeOut>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d123      	bne.n	8005baa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b64:	f000 f916 	bl	8005d94 <prvIsQueueEmpty>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b70:	3324      	adds	r3, #36	@ 0x24
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4611      	mov	r1, r2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fdd4 	bl	8006724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b7e:	f000 f8b7 	bl	8005cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b82:	f000 fbfb 	bl	800637c <xTaskResumeAll>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d189      	bne.n	8005aa0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bcc <xQueueReceive+0x1c0>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	e780      	b.n	8005aa0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ba0:	f000 f8a6 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ba4:	f000 fbea 	bl	800637c <xTaskResumeAll>
 8005ba8:	e77a      	b.n	8005aa0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bac:	f000 f8a0 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bb0:	f000 fbe4 	bl	800637c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bb6:	f000 f8ed 	bl	8005d94 <prvIsQueueEmpty>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f43f af6f 	beq.w	8005aa0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3730      	adds	r7, #48	@ 0x30
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	e000ed04 	.word	0xe000ed04

08005bd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d14d      	bne.n	8005c92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 ffce 	bl	8006b9c <xTaskPriorityDisinherit>
 8005c00:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	605a      	str	r2, [r3, #4]
 8005c08:	e043      	b.n	8005c92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d119      	bne.n	8005c44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6898      	ldr	r0, [r3, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	f002 f88a 	bl	8007d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	441a      	add	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d32b      	bcc.n	8005c92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	609a      	str	r2, [r3, #8]
 8005c42:	e026      	b.n	8005c92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68d8      	ldr	r0, [r3, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	f002 f870 	bl	8007d34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	425b      	negs	r3, r3
 8005c5e:	441a      	add	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d207      	bcs.n	8005c80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	425b      	negs	r3, r3
 8005c7a:	441a      	add	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d105      	bne.n	8005c92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c9a:	697b      	ldr	r3, [r7, #20]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d018      	beq.n	8005ce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	441a      	add	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d303      	bcc.n	8005cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68d9      	ldr	r1, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6838      	ldr	r0, [r7, #0]
 8005ce4:	f002 f826 	bl	8007d34 <memcpy>
	}
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cf8:	f001 fc66 	bl	80075c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d04:	e011      	b.n	8005d2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d012      	beq.n	8005d34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3324      	adds	r3, #36	@ 0x24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fd58 	bl	80067c8 <xTaskRemoveFromEventList>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d1e:	f000 fe31 	bl	8006984 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	dce9      	bgt.n	8005d06 <prvUnlockQueue+0x16>
 8005d32:	e000      	b.n	8005d36 <prvUnlockQueue+0x46>
					break;
 8005d34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	22ff      	movs	r2, #255	@ 0xff
 8005d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d3e:	f001 fc75 	bl	800762c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d42:	f001 fc41 	bl	80075c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d4e:	e011      	b.n	8005d74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3310      	adds	r3, #16
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fd33 	bl	80067c8 <xTaskRemoveFromEventList>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d68:	f000 fe0c 	bl	8006984 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dce9      	bgt.n	8005d50 <prvUnlockQueue+0x60>
 8005d7c:	e000      	b.n	8005d80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	22ff      	movs	r2, #255	@ 0xff
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d88:	f001 fc50 	bl	800762c <vPortExitCritical>
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d9c:	f001 fc14 	bl	80075c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e001      	b.n	8005db2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db2:	f001 fc3b 	bl	800762c <vPortExitCritical>

	return xReturn;
 8005db6:	68fb      	ldr	r3, [r7, #12]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dc8:	f001 fbfe 	bl	80075c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d102      	bne.n	8005dde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e001      	b.n	8005de2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005de2:	f001 fc23 	bl	800762c <vPortExitCritical>

	return xReturn;
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e014      	b.n	8005e2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e00:	4a0f      	ldr	r2, [pc, #60]	@ (8005e40 <vQueueAddToRegistry+0x50>)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10b      	bne.n	8005e24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e0c:	490c      	ldr	r1, [pc, #48]	@ (8005e40 <vQueueAddToRegistry+0x50>)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e16:	4a0a      	ldr	r2, [pc, #40]	@ (8005e40 <vQueueAddToRegistry+0x50>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e22:	e006      	b.n	8005e32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b07      	cmp	r3, #7
 8005e2e:	d9e7      	bls.n	8005e00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	200022a0 	.word	0x200022a0

08005e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e54:	f001 fbb8 	bl	80075c8 <vPortEnterCritical>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e5e:	b25b      	sxtb	r3, r3
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e64:	d103      	bne.n	8005e6e <vQueueWaitForMessageRestricted+0x2a>
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e74:	b25b      	sxtb	r3, r3
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e7a:	d103      	bne.n	8005e84 <vQueueWaitForMessageRestricted+0x40>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e84:	f001 fbd2 	bl	800762c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	3324      	adds	r3, #36	@ 0x24
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fc69 	bl	8006770 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e9e:	6978      	ldr	r0, [r7, #20]
 8005ea0:	f7ff ff26 	bl	8005cf0 <prvUnlockQueue>
	}
 8005ea4:	bf00      	nop
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08e      	sub	sp, #56	@ 0x38
 8005eb0:	af04      	add	r7, sp, #16
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	623b      	str	r3, [r7, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10b      	bne.n	8005ef6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	61fb      	str	r3, [r7, #28]
}
 8005ef0:	bf00      	nop
 8005ef2:	bf00      	nop
 8005ef4:	e7fd      	b.n	8005ef2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ef6:	23a8      	movs	r3, #168	@ 0xa8
 8005ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2ba8      	cmp	r3, #168	@ 0xa8
 8005efe:	d00b      	beq.n	8005f18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	61bb      	str	r3, [r7, #24]
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	e7fd      	b.n	8005f14 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01e      	beq.n	8005f5c <xTaskCreateStatic+0xb0>
 8005f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f26:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f2c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f36:	2300      	movs	r3, #0
 8005f38:	9303      	str	r3, [sp, #12]
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	9302      	str	r3, [sp, #8]
 8005f3e:	f107 0314 	add.w	r3, r7, #20
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 f850 	bl	8005ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f56:	f000 f8ed 	bl	8006134 <prvAddNewTaskToReadyList>
 8005f5a:	e001      	b.n	8005f60 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f60:	697b      	ldr	r3, [r7, #20]
	}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3728      	adds	r7, #40	@ 0x28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b08c      	sub	sp, #48	@ 0x30
 8005f6e:	af04      	add	r7, sp, #16
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fc44 	bl	800780c <pvPortMalloc>
 8005f84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00e      	beq.n	8005faa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f8c:	20a8      	movs	r0, #168	@ 0xa8
 8005f8e:	f001 fc3d 	bl	800780c <pvPortMalloc>
 8005f92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fa0:	e005      	b.n	8005fae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fa2:	6978      	ldr	r0, [r7, #20]
 8005fa4:	f001 fcfa 	bl	800799c <vPortFree>
 8005fa8:	e001      	b.n	8005fae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d017      	beq.n	8005fe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fbc:	88fa      	ldrh	r2, [r7, #6]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	9303      	str	r3, [sp, #12]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	9302      	str	r3, [sp, #8]
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	9301      	str	r3, [sp, #4]
 8005fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f80e 	bl	8005ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fd8:	69f8      	ldr	r0, [r7, #28]
 8005fda:	f000 f8ab 	bl	8006134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	e002      	b.n	8005fea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fea:	69bb      	ldr	r3, [r7, #24]
	}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	461a      	mov	r2, r3
 800600c:	21a5      	movs	r1, #165	@ 0xa5
 800600e:	f001 fdff 	bl	8007c10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800601c:	3b01      	subs	r3, #1
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	617b      	str	r3, [r7, #20]
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	e7fd      	b.n	800604a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	e012      	b.n	800607a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	7819      	ldrb	r1, [r3, #0]
 800605c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	3334      	adds	r3, #52	@ 0x34
 8006064:	460a      	mov	r2, r1
 8006066:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d006      	beq.n	8006082 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	3301      	adds	r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	2b0f      	cmp	r3, #15
 800607e:	d9e9      	bls.n	8006054 <prvInitialiseNewTask+0x60>
 8006080:	e000      	b.n	8006084 <prvInitialiseNewTask+0x90>
		{
			break;
 8006082:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800608c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608e:	2b37      	cmp	r3, #55	@ 0x37
 8006090:	d901      	bls.n	8006096 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006092:	2337      	movs	r3, #55	@ 0x37
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800609a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800609c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	2200      	movs	r2, #0
 80060a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	3304      	adds	r3, #4
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff f971 	bl	8005394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	3318      	adds	r3, #24
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff f96c 	bl	8005394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	3354      	adds	r3, #84	@ 0x54
 80060e6:	224c      	movs	r2, #76	@ 0x4c
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fd90 	bl	8007c10 <memset>
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006128 <prvInitialiseNewTask+0x134>)
 80060f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	4a0c      	ldr	r2, [pc, #48]	@ (800612c <prvInitialiseNewTask+0x138>)
 80060fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80060fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006130 <prvInitialiseNewTask+0x13c>)
 8006100:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	68f9      	ldr	r1, [r7, #12]
 8006106:	69b8      	ldr	r0, [r7, #24]
 8006108:	f001 f92c 	bl	8007364 <pxPortInitialiseStack>
 800610c:	4602      	mov	r2, r0
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800611c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800611e:	bf00      	nop
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	2000352c 	.word	0x2000352c
 800612c:	20003594 	.word	0x20003594
 8006130:	200035fc 	.word	0x200035fc

08006134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800613c:	f001 fa44 	bl	80075c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006140:	4b2d      	ldr	r3, [pc, #180]	@ (80061f8 <prvAddNewTaskToReadyList+0xc4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	4a2c      	ldr	r2, [pc, #176]	@ (80061f8 <prvAddNewTaskToReadyList+0xc4>)
 8006148:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800614a:	4b2c      	ldr	r3, [pc, #176]	@ (80061fc <prvAddNewTaskToReadyList+0xc8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006152:	4a2a      	ldr	r2, [pc, #168]	@ (80061fc <prvAddNewTaskToReadyList+0xc8>)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006158:	4b27      	ldr	r3, [pc, #156]	@ (80061f8 <prvAddNewTaskToReadyList+0xc4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d110      	bne.n	8006182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006160:	f000 fc34 	bl	80069cc <prvInitialiseTaskLists>
 8006164:	e00d      	b.n	8006182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006166:	4b26      	ldr	r3, [pc, #152]	@ (8006200 <prvAddNewTaskToReadyList+0xcc>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d109      	bne.n	8006182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800616e:	4b23      	ldr	r3, [pc, #140]	@ (80061fc <prvAddNewTaskToReadyList+0xc8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	429a      	cmp	r2, r3
 800617a:	d802      	bhi.n	8006182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800617c:	4a1f      	ldr	r2, [pc, #124]	@ (80061fc <prvAddNewTaskToReadyList+0xc8>)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006182:	4b20      	ldr	r3, [pc, #128]	@ (8006204 <prvAddNewTaskToReadyList+0xd0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3301      	adds	r3, #1
 8006188:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <prvAddNewTaskToReadyList+0xd0>)
 800618a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800618c:	4b1d      	ldr	r3, [pc, #116]	@ (8006204 <prvAddNewTaskToReadyList+0xd0>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006198:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <prvAddNewTaskToReadyList+0xd4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d903      	bls.n	80061a8 <prvAddNewTaskToReadyList+0x74>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	4a18      	ldr	r2, [pc, #96]	@ (8006208 <prvAddNewTaskToReadyList+0xd4>)
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4a15      	ldr	r2, [pc, #84]	@ (800620c <prvAddNewTaskToReadyList+0xd8>)
 80061b6:	441a      	add	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	f7ff f8f5 	bl	80053ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061c4:	f001 fa32 	bl	800762c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006200 <prvAddNewTaskToReadyList+0xcc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00e      	beq.n	80061ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061d0:	4b0a      	ldr	r3, [pc, #40]	@ (80061fc <prvAddNewTaskToReadyList+0xc8>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	429a      	cmp	r2, r3
 80061dc:	d207      	bcs.n	80061ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061de:	4b0c      	ldr	r3, [pc, #48]	@ (8006210 <prvAddNewTaskToReadyList+0xdc>)
 80061e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200027b4 	.word	0x200027b4
 80061fc:	200022e0 	.word	0x200022e0
 8006200:	200027c0 	.word	0x200027c0
 8006204:	200027d0 	.word	0x200027d0
 8006208:	200027bc 	.word	0x200027bc
 800620c:	200022e4 	.word	0x200022e4
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d018      	beq.n	8006258 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006226:	4b14      	ldr	r3, [pc, #80]	@ (8006278 <vTaskDelay+0x64>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <vTaskDelay+0x32>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60bb      	str	r3, [r7, #8]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006246:	f000 f88b 	bl	8006360 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800624a:	2100      	movs	r1, #0
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fd15 	bl	8006c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006252:	f000 f893 	bl	800637c <xTaskResumeAll>
 8006256:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d107      	bne.n	800626e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800625e:	4b07      	ldr	r3, [pc, #28]	@ (800627c <vTaskDelay+0x68>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	200027dc 	.word	0x200027dc
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	@ 0x28
 8006284:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800628e:	463a      	mov	r2, r7
 8006290:	1d39      	adds	r1, r7, #4
 8006292:	f107 0308 	add.w	r3, r7, #8
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff f828 	bl	80052ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	9202      	str	r2, [sp, #8]
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	2300      	movs	r3, #0
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	460a      	mov	r2, r1
 80062ae:	4924      	ldr	r1, [pc, #144]	@ (8006340 <vTaskStartScheduler+0xc0>)
 80062b0:	4824      	ldr	r0, [pc, #144]	@ (8006344 <vTaskStartScheduler+0xc4>)
 80062b2:	f7ff fdfb 	bl	8005eac <xTaskCreateStatic>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4a23      	ldr	r2, [pc, #140]	@ (8006348 <vTaskStartScheduler+0xc8>)
 80062ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062bc:	4b22      	ldr	r3, [pc, #136]	@ (8006348 <vTaskStartScheduler+0xc8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e001      	b.n	80062ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d102      	bne.n	80062da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062d4:	f000 fd26 	bl	8006d24 <xTimerCreateTimerTask>
 80062d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d11b      	bne.n	8006318 <vTaskStartScheduler+0x98>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062f4:	4b15      	ldr	r3, [pc, #84]	@ (800634c <vTaskStartScheduler+0xcc>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3354      	adds	r3, #84	@ 0x54
 80062fa:	4a15      	ldr	r2, [pc, #84]	@ (8006350 <vTaskStartScheduler+0xd0>)
 80062fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062fe:	4b15      	ldr	r3, [pc, #84]	@ (8006354 <vTaskStartScheduler+0xd4>)
 8006300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006304:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006306:	4b14      	ldr	r3, [pc, #80]	@ (8006358 <vTaskStartScheduler+0xd8>)
 8006308:	2201      	movs	r2, #1
 800630a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800630c:	4b13      	ldr	r3, [pc, #76]	@ (800635c <vTaskStartScheduler+0xdc>)
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006312:	f001 f8b5 	bl	8007480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006316:	e00f      	b.n	8006338 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800631e:	d10b      	bne.n	8006338 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	60fb      	str	r3, [r7, #12]
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <vTaskStartScheduler+0xb4>
}
 8006338:	bf00      	nop
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	08008640 	.word	0x08008640
 8006344:	0800699d 	.word	0x0800699d
 8006348:	200027d8 	.word	0x200027d8
 800634c:	200022e0 	.word	0x200022e0
 8006350:	20000014 	.word	0x20000014
 8006354:	200027d4 	.word	0x200027d4
 8006358:	200027c0 	.word	0x200027c0
 800635c:	200027b8 	.word	0x200027b8

08006360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006364:	4b04      	ldr	r3, [pc, #16]	@ (8006378 <vTaskSuspendAll+0x18>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	4a03      	ldr	r2, [pc, #12]	@ (8006378 <vTaskSuspendAll+0x18>)
 800636c:	6013      	str	r3, [r2, #0]
}
 800636e:	bf00      	nop
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	200027dc 	.word	0x200027dc

0800637c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800638a:	4b42      	ldr	r3, [pc, #264]	@ (8006494 <xTaskResumeAll+0x118>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <xTaskResumeAll+0x2e>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	603b      	str	r3, [r7, #0]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063aa:	f001 f90d 	bl	80075c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063ae:	4b39      	ldr	r3, [pc, #228]	@ (8006494 <xTaskResumeAll+0x118>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	4a37      	ldr	r2, [pc, #220]	@ (8006494 <xTaskResumeAll+0x118>)
 80063b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063b8:	4b36      	ldr	r3, [pc, #216]	@ (8006494 <xTaskResumeAll+0x118>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d162      	bne.n	8006486 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063c0:	4b35      	ldr	r3, [pc, #212]	@ (8006498 <xTaskResumeAll+0x11c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d05e      	beq.n	8006486 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063c8:	e02f      	b.n	800642a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063ca:	4b34      	ldr	r3, [pc, #208]	@ (800649c <xTaskResumeAll+0x120>)
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3318      	adds	r3, #24
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff f846 	bl	8005468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3304      	adds	r3, #4
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff f841 	bl	8005468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ea:	4b2d      	ldr	r3, [pc, #180]	@ (80064a0 <xTaskResumeAll+0x124>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d903      	bls.n	80063fa <xTaskResumeAll+0x7e>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f6:	4a2a      	ldr	r2, [pc, #168]	@ (80064a0 <xTaskResumeAll+0x124>)
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4a27      	ldr	r2, [pc, #156]	@ (80064a4 <xTaskResumeAll+0x128>)
 8006408:	441a      	add	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3304      	adds	r3, #4
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f7fe ffcc 	bl	80053ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641a:	4b23      	ldr	r3, [pc, #140]	@ (80064a8 <xTaskResumeAll+0x12c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006424:	4b21      	ldr	r3, [pc, #132]	@ (80064ac <xTaskResumeAll+0x130>)
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800642a:	4b1c      	ldr	r3, [pc, #112]	@ (800649c <xTaskResumeAll+0x120>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1cb      	bne.n	80063ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006438:	f000 fb6c 	bl	8006b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800643c:	4b1c      	ldr	r3, [pc, #112]	@ (80064b0 <xTaskResumeAll+0x134>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d010      	beq.n	800646a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006448:	f000 f846 	bl	80064d8 <xTaskIncrementTick>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006452:	4b16      	ldr	r3, [pc, #88]	@ (80064ac <xTaskResumeAll+0x130>)
 8006454:	2201      	movs	r2, #1
 8006456:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3b01      	subs	r3, #1
 800645c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1f1      	bne.n	8006448 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006464:	4b12      	ldr	r3, [pc, #72]	@ (80064b0 <xTaskResumeAll+0x134>)
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800646a:	4b10      	ldr	r3, [pc, #64]	@ (80064ac <xTaskResumeAll+0x130>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006472:	2301      	movs	r3, #1
 8006474:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006476:	4b0f      	ldr	r3, [pc, #60]	@ (80064b4 <xTaskResumeAll+0x138>)
 8006478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006486:	f001 f8d1 	bl	800762c <vPortExitCritical>

	return xAlreadyYielded;
 800648a:	68bb      	ldr	r3, [r7, #8]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	200027dc 	.word	0x200027dc
 8006498:	200027b4 	.word	0x200027b4
 800649c:	20002774 	.word	0x20002774
 80064a0:	200027bc 	.word	0x200027bc
 80064a4:	200022e4 	.word	0x200022e4
 80064a8:	200022e0 	.word	0x200022e0
 80064ac:	200027c8 	.word	0x200027c8
 80064b0:	200027c4 	.word	0x200027c4
 80064b4:	e000ed04 	.word	0xe000ed04

080064b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064be:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <xTaskGetTickCount+0x1c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064c4:	687b      	ldr	r3, [r7, #4]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	200027b8 	.word	0x200027b8

080064d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e2:	4b52      	ldr	r3, [pc, #328]	@ (800662c <xTaskIncrementTick+0x154>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f040 808f 	bne.w	800660a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064ec:	4b50      	ldr	r3, [pc, #320]	@ (8006630 <xTaskIncrementTick+0x158>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064f4:	4a4e      	ldr	r2, [pc, #312]	@ (8006630 <xTaskIncrementTick+0x158>)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d121      	bne.n	8006544 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006500:	4b4c      	ldr	r3, [pc, #304]	@ (8006634 <xTaskIncrementTick+0x15c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <xTaskIncrementTick+0x4a>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	603b      	str	r3, [r7, #0]
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	e7fd      	b.n	800651e <xTaskIncrementTick+0x46>
 8006522:	4b44      	ldr	r3, [pc, #272]	@ (8006634 <xTaskIncrementTick+0x15c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	4b43      	ldr	r3, [pc, #268]	@ (8006638 <xTaskIncrementTick+0x160>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a41      	ldr	r2, [pc, #260]	@ (8006634 <xTaskIncrementTick+0x15c>)
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4a41      	ldr	r2, [pc, #260]	@ (8006638 <xTaskIncrementTick+0x160>)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	4b41      	ldr	r3, [pc, #260]	@ (800663c <xTaskIncrementTick+0x164>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	4a3f      	ldr	r2, [pc, #252]	@ (800663c <xTaskIncrementTick+0x164>)
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	f000 fae8 	bl	8006b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006544:	4b3e      	ldr	r3, [pc, #248]	@ (8006640 <xTaskIncrementTick+0x168>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	d34e      	bcc.n	80065ec <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800654e:	4b39      	ldr	r3, [pc, #228]	@ (8006634 <xTaskIncrementTick+0x15c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <xTaskIncrementTick+0x84>
 8006558:	2301      	movs	r3, #1
 800655a:	e000      	b.n	800655e <xTaskIncrementTick+0x86>
 800655c:	2300      	movs	r3, #0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006562:	4b37      	ldr	r3, [pc, #220]	@ (8006640 <xTaskIncrementTick+0x168>)
 8006564:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006568:	601a      	str	r2, [r3, #0]
					break;
 800656a:	e03f      	b.n	80065ec <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800656c:	4b31      	ldr	r3, [pc, #196]	@ (8006634 <xTaskIncrementTick+0x15c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	429a      	cmp	r2, r3
 8006582:	d203      	bcs.n	800658c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006584:	4a2e      	ldr	r2, [pc, #184]	@ (8006640 <xTaskIncrementTick+0x168>)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6013      	str	r3, [r2, #0]
						break;
 800658a:	e02f      	b.n	80065ec <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	3304      	adds	r3, #4
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe ff69 	bl	8005468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	3318      	adds	r3, #24
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe ff60 	bl	8005468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ac:	4b25      	ldr	r3, [pc, #148]	@ (8006644 <xTaskIncrementTick+0x16c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d903      	bls.n	80065bc <xTaskIncrementTick+0xe4>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	4a22      	ldr	r2, [pc, #136]	@ (8006644 <xTaskIncrementTick+0x16c>)
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006648 <xTaskIncrementTick+0x170>)
 80065ca:	441a      	add	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f7fe feeb 	bl	80053ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065dc:	4b1b      	ldr	r3, [pc, #108]	@ (800664c <xTaskIncrementTick+0x174>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d3b3      	bcc.n	800654e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80065e6:	2301      	movs	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ea:	e7b0      	b.n	800654e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065ec:	4b17      	ldr	r3, [pc, #92]	@ (800664c <xTaskIncrementTick+0x174>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f2:	4915      	ldr	r1, [pc, #84]	@ (8006648 <xTaskIncrementTick+0x170>)
 80065f4:	4613      	mov	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d907      	bls.n	8006614 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e004      	b.n	8006614 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800660a:	4b11      	ldr	r3, [pc, #68]	@ (8006650 <xTaskIncrementTick+0x178>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3301      	adds	r3, #1
 8006610:	4a0f      	ldr	r2, [pc, #60]	@ (8006650 <xTaskIncrementTick+0x178>)
 8006612:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006614:	4b0f      	ldr	r3, [pc, #60]	@ (8006654 <xTaskIncrementTick+0x17c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006620:	697b      	ldr	r3, [r7, #20]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200027dc 	.word	0x200027dc
 8006630:	200027b8 	.word	0x200027b8
 8006634:	2000276c 	.word	0x2000276c
 8006638:	20002770 	.word	0x20002770
 800663c:	200027cc 	.word	0x200027cc
 8006640:	200027d4 	.word	0x200027d4
 8006644:	200027bc 	.word	0x200027bc
 8006648:	200022e4 	.word	0x200022e4
 800664c:	200022e0 	.word	0x200022e0
 8006650:	200027c4 	.word	0x200027c4
 8006654:	200027c8 	.word	0x200027c8

08006658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800665e:	4b2b      	ldr	r3, [pc, #172]	@ (800670c <vTaskSwitchContext+0xb4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006666:	4b2a      	ldr	r3, [pc, #168]	@ (8006710 <vTaskSwitchContext+0xb8>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800666c:	e047      	b.n	80066fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800666e:	4b28      	ldr	r3, [pc, #160]	@ (8006710 <vTaskSwitchContext+0xb8>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006674:	4b27      	ldr	r3, [pc, #156]	@ (8006714 <vTaskSwitchContext+0xbc>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	e011      	b.n	80066a0 <vTaskSwitchContext+0x48>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <vTaskSwitchContext+0x42>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	607b      	str	r3, [r7, #4]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <vTaskSwitchContext+0x3e>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3b01      	subs	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	491d      	ldr	r1, [pc, #116]	@ (8006718 <vTaskSwitchContext+0xc0>)
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0e3      	beq.n	800667c <vTaskSwitchContext+0x24>
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4a16      	ldr	r2, [pc, #88]	@ (8006718 <vTaskSwitchContext+0xc0>)
 80066c0:	4413      	add	r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3308      	adds	r3, #8
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d104      	bne.n	80066e4 <vTaskSwitchContext+0x8c>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	4a0c      	ldr	r2, [pc, #48]	@ (800671c <vTaskSwitchContext+0xc4>)
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	4a09      	ldr	r2, [pc, #36]	@ (8006714 <vTaskSwitchContext+0xbc>)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066f4:	4b09      	ldr	r3, [pc, #36]	@ (800671c <vTaskSwitchContext+0xc4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3354      	adds	r3, #84	@ 0x54
 80066fa:	4a09      	ldr	r2, [pc, #36]	@ (8006720 <vTaskSwitchContext+0xc8>)
 80066fc:	6013      	str	r3, [r2, #0]
}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	200027dc 	.word	0x200027dc
 8006710:	200027c8 	.word	0x200027c8
 8006714:	200027bc 	.word	0x200027bc
 8006718:	200022e4 	.word	0x200022e4
 800671c:	200022e0 	.word	0x200022e0
 8006720:	20000014 	.word	0x20000014

08006724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60fb      	str	r3, [r7, #12]
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800674c:	4b07      	ldr	r3, [pc, #28]	@ (800676c <vTaskPlaceOnEventList+0x48>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3318      	adds	r3, #24
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fe fe4e 	bl	80053f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800675a:	2101      	movs	r1, #1
 800675c:	6838      	ldr	r0, [r7, #0]
 800675e:	f000 fa8d 	bl	8006c7c <prvAddCurrentTaskToDelayedList>
}
 8006762:	bf00      	nop
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	200022e0 	.word	0x200022e0

08006770 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10b      	bne.n	800679a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	617b      	str	r3, [r7, #20]
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop
 8006798:	e7fd      	b.n	8006796 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800679a:	4b0a      	ldr	r3, [pc, #40]	@ (80067c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3318      	adds	r3, #24
 80067a0:	4619      	mov	r1, r3
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7fe fe03 	bl	80053ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80067ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	68b8      	ldr	r0, [r7, #8]
 80067b8:	f000 fa60 	bl	8006c7c <prvAddCurrentTaskToDelayedList>
	}
 80067bc:	bf00      	nop
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	200022e0 	.word	0x200022e0

080067c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	60fb      	str	r3, [r7, #12]
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	e7fd      	b.n	80067f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	3318      	adds	r3, #24
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fe34 	bl	8005468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006800:	4b1d      	ldr	r3, [pc, #116]	@ (8006878 <xTaskRemoveFromEventList+0xb0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d11d      	bne.n	8006844 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3304      	adds	r3, #4
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe fe2b 	bl	8005468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006816:	4b19      	ldr	r3, [pc, #100]	@ (800687c <xTaskRemoveFromEventList+0xb4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d903      	bls.n	8006826 <xTaskRemoveFromEventList+0x5e>
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006822:	4a16      	ldr	r2, [pc, #88]	@ (800687c <xTaskRemoveFromEventList+0xb4>)
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4a13      	ldr	r2, [pc, #76]	@ (8006880 <xTaskRemoveFromEventList+0xb8>)
 8006834:	441a      	add	r2, r3
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	3304      	adds	r3, #4
 800683a:	4619      	mov	r1, r3
 800683c:	4610      	mov	r0, r2
 800683e:	f7fe fdb6 	bl	80053ae <vListInsertEnd>
 8006842:	e005      	b.n	8006850 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	3318      	adds	r3, #24
 8006848:	4619      	mov	r1, r3
 800684a:	480e      	ldr	r0, [pc, #56]	@ (8006884 <xTaskRemoveFromEventList+0xbc>)
 800684c:	f7fe fdaf 	bl	80053ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006854:	4b0c      	ldr	r3, [pc, #48]	@ (8006888 <xTaskRemoveFromEventList+0xc0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	429a      	cmp	r2, r3
 800685c:	d905      	bls.n	800686a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800685e:	2301      	movs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006862:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <xTaskRemoveFromEventList+0xc4>)
 8006864:	2201      	movs	r2, #1
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	e001      	b.n	800686e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800686e:	697b      	ldr	r3, [r7, #20]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	200027dc 	.word	0x200027dc
 800687c:	200027bc 	.word	0x200027bc
 8006880:	200022e4 	.word	0x200022e4
 8006884:	20002774 	.word	0x20002774
 8006888:	200022e0 	.word	0x200022e0
 800688c:	200027c8 	.word	0x200027c8

08006890 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006898:	4b06      	ldr	r3, [pc, #24]	@ (80068b4 <vTaskInternalSetTimeOutState+0x24>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068a0:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <vTaskInternalSetTimeOutState+0x28>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	605a      	str	r2, [r3, #4]
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	200027cc 	.word	0x200027cc
 80068b8:	200027b8 	.word	0x200027b8

080068bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	613b      	str	r3, [r7, #16]
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	60fb      	str	r3, [r7, #12]
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	e7fd      	b.n	80068fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006902:	f000 fe61 	bl	80075c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006906:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <xTaskCheckForTimeOut+0xc0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800691e:	d102      	bne.n	8006926 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006920:	2300      	movs	r3, #0
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e023      	b.n	800696e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b15      	ldr	r3, [pc, #84]	@ (8006980 <xTaskCheckForTimeOut+0xc4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d007      	beq.n	8006942 <xTaskCheckForTimeOut+0x86>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	429a      	cmp	r2, r3
 800693a:	d302      	bcc.n	8006942 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	e015      	b.n	800696e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	429a      	cmp	r2, r3
 800694a:	d20b      	bcs.n	8006964 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	1ad2      	subs	r2, r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ff99 	bl	8006890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
 8006962:	e004      	b.n	800696e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800696a:	2301      	movs	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800696e:	f000 fe5d 	bl	800762c <vPortExitCritical>

	return xReturn;
 8006972:	69fb      	ldr	r3, [r7, #28]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	200027b8 	.word	0x200027b8
 8006980:	200027cc 	.word	0x200027cc

08006984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006988:	4b03      	ldr	r3, [pc, #12]	@ (8006998 <vTaskMissedYield+0x14>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]
}
 800698e:	bf00      	nop
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	200027c8 	.word	0x200027c8

0800699c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069a4:	f000 f852 	bl	8006a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069a8:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <prvIdleTask+0x28>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d9f9      	bls.n	80069a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069b0:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <prvIdleTask+0x2c>)
 80069b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069c0:	e7f0      	b.n	80069a4 <prvIdleTask+0x8>
 80069c2:	bf00      	nop
 80069c4:	200022e4 	.word	0x200022e4
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069d2:	2300      	movs	r3, #0
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	e00c      	b.n	80069f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4a12      	ldr	r2, [pc, #72]	@ (8006a2c <prvInitialiseTaskLists+0x60>)
 80069e4:	4413      	add	r3, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe fcb4 	bl	8005354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3301      	adds	r3, #1
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b37      	cmp	r3, #55	@ 0x37
 80069f6:	d9ef      	bls.n	80069d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069f8:	480d      	ldr	r0, [pc, #52]	@ (8006a30 <prvInitialiseTaskLists+0x64>)
 80069fa:	f7fe fcab 	bl	8005354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069fe:	480d      	ldr	r0, [pc, #52]	@ (8006a34 <prvInitialiseTaskLists+0x68>)
 8006a00:	f7fe fca8 	bl	8005354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a04:	480c      	ldr	r0, [pc, #48]	@ (8006a38 <prvInitialiseTaskLists+0x6c>)
 8006a06:	f7fe fca5 	bl	8005354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a0a:	480c      	ldr	r0, [pc, #48]	@ (8006a3c <prvInitialiseTaskLists+0x70>)
 8006a0c:	f7fe fca2 	bl	8005354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a10:	480b      	ldr	r0, [pc, #44]	@ (8006a40 <prvInitialiseTaskLists+0x74>)
 8006a12:	f7fe fc9f 	bl	8005354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a16:	4b0b      	ldr	r3, [pc, #44]	@ (8006a44 <prvInitialiseTaskLists+0x78>)
 8006a18:	4a05      	ldr	r2, [pc, #20]	@ (8006a30 <prvInitialiseTaskLists+0x64>)
 8006a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a48 <prvInitialiseTaskLists+0x7c>)
 8006a1e:	4a05      	ldr	r2, [pc, #20]	@ (8006a34 <prvInitialiseTaskLists+0x68>)
 8006a20:	601a      	str	r2, [r3, #0]
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	200022e4 	.word	0x200022e4
 8006a30:	20002744 	.word	0x20002744
 8006a34:	20002758 	.word	0x20002758
 8006a38:	20002774 	.word	0x20002774
 8006a3c:	20002788 	.word	0x20002788
 8006a40:	200027a0 	.word	0x200027a0
 8006a44:	2000276c 	.word	0x2000276c
 8006a48:	20002770 	.word	0x20002770

08006a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a52:	e019      	b.n	8006a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a54:	f000 fdb8 	bl	80075c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a58:	4b10      	ldr	r3, [pc, #64]	@ (8006a9c <prvCheckTasksWaitingTermination+0x50>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fe fcff 	bl	8005468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa0 <prvCheckTasksWaitingTermination+0x54>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	4a0b      	ldr	r2, [pc, #44]	@ (8006aa0 <prvCheckTasksWaitingTermination+0x54>)
 8006a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a74:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa4 <prvCheckTasksWaitingTermination+0x58>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa4 <prvCheckTasksWaitingTermination+0x58>)
 8006a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a7e:	f000 fdd5 	bl	800762c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f810 	bl	8006aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a88:	4b06      	ldr	r3, [pc, #24]	@ (8006aa4 <prvCheckTasksWaitingTermination+0x58>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e1      	bne.n	8006a54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20002788 	.word	0x20002788
 8006aa0:	200027b4 	.word	0x200027b4
 8006aa4:	2000279c 	.word	0x2000279c

08006aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3354      	adds	r3, #84	@ 0x54
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 f8b3 	bl	8007c20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d108      	bne.n	8006ad6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 ff67 	bl	800799c <vPortFree>
				vPortFree( pxTCB );
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 ff64 	bl	800799c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ad4:	e019      	b.n	8006b0a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d103      	bne.n	8006ae8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 ff5b 	bl	800799c <vPortFree>
	}
 8006ae6:	e010      	b.n	8006b0a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d00b      	beq.n	8006b0a <prvDeleteTCB+0x62>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	60fb      	str	r3, [r7, #12]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <prvDeleteTCB+0x5e>
	}
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b58 <prvResetNextTaskUnblockTime+0x44>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <prvResetNextTaskUnblockTime+0x14>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <prvResetNextTaskUnblockTime+0x16>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d004      	beq.n	8006b38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b5c <prvResetNextTaskUnblockTime+0x48>)
 8006b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b36:	e008      	b.n	8006b4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b38:	4b07      	ldr	r3, [pc, #28]	@ (8006b58 <prvResetNextTaskUnblockTime+0x44>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	4a05      	ldr	r2, [pc, #20]	@ (8006b5c <prvResetNextTaskUnblockTime+0x48>)
 8006b48:	6013      	str	r3, [r2, #0]
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	2000276c 	.word	0x2000276c
 8006b5c:	200027d4 	.word	0x200027d4

08006b60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b66:	4b0b      	ldr	r3, [pc, #44]	@ (8006b94 <xTaskGetSchedulerState+0x34>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	e008      	b.n	8006b86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b74:	4b08      	ldr	r3, [pc, #32]	@ (8006b98 <xTaskGetSchedulerState+0x38>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	607b      	str	r3, [r7, #4]
 8006b80:	e001      	b.n	8006b86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b82:	2300      	movs	r3, #0
 8006b84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b86:	687b      	ldr	r3, [r7, #4]
	}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	200027c0 	.word	0x200027c0
 8006b98:	200027dc 	.word	0x200027dc

08006b9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d058      	beq.n	8006c64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8006c70 <xTaskPriorityDisinherit+0xd4>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d00b      	beq.n	8006bd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	60fb      	str	r3, [r7, #12]
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	e7fd      	b.n	8006bd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10b      	bne.n	8006bf4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	60bb      	str	r3, [r7, #8]
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	e7fd      	b.n	8006bf0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf8:	1e5a      	subs	r2, r3, #1
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d02c      	beq.n	8006c64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d128      	bne.n	8006c64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fc26 	bl	8005468 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c34:	4b0f      	ldr	r3, [pc, #60]	@ (8006c74 <xTaskPriorityDisinherit+0xd8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d903      	bls.n	8006c44 <xTaskPriorityDisinherit+0xa8>
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c40:	4a0c      	ldr	r2, [pc, #48]	@ (8006c74 <xTaskPriorityDisinherit+0xd8>)
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4a09      	ldr	r2, [pc, #36]	@ (8006c78 <xTaskPriorityDisinherit+0xdc>)
 8006c52:	441a      	add	r2, r3
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f7fe fba7 	bl	80053ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c60:	2301      	movs	r3, #1
 8006c62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c64:	697b      	ldr	r3, [r7, #20]
	}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200022e0 	.word	0x200022e0
 8006c74:	200027bc 	.word	0x200027bc
 8006c78:	200022e4 	.word	0x200022e4

08006c7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c86:	4b21      	ldr	r3, [pc, #132]	@ (8006d0c <prvAddCurrentTaskToDelayedList+0x90>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c8c:	4b20      	ldr	r3, [pc, #128]	@ (8006d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe fbe8 	bl	8005468 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c9e:	d10a      	bne.n	8006cb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4619      	mov	r1, r3
 8006cae:	4819      	ldr	r0, [pc, #100]	@ (8006d14 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cb0:	f7fe fb7d 	bl	80053ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cb4:	e026      	b.n	8006d04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4413      	add	r3, r2
 8006cbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cbe:	4b14      	ldr	r3, [pc, #80]	@ (8006d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d209      	bcs.n	8006ce2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cce:	4b12      	ldr	r3, [pc, #72]	@ (8006d18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f7fe fb8b 	bl	80053f6 <vListInsert>
}
 8006ce0:	e010      	b.n	8006d04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f7fe fb81 	bl	80053f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d202      	bcs.n	8006d04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cfe:	4a08      	ldr	r2, [pc, #32]	@ (8006d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	6013      	str	r3, [r2, #0]
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	200027b8 	.word	0x200027b8
 8006d10:	200022e0 	.word	0x200022e0
 8006d14:	200027a0 	.word	0x200027a0
 8006d18:	20002770 	.word	0x20002770
 8006d1c:	2000276c 	.word	0x2000276c
 8006d20:	200027d4 	.word	0x200027d4

08006d24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	@ 0x28
 8006d28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d2e:	f000 fad9 	bl	80072e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d32:	4b1d      	ldr	r3, [pc, #116]	@ (8006da8 <xTimerCreateTimerTask+0x84>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d021      	beq.n	8006d7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d42:	1d3a      	adds	r2, r7, #4
 8006d44:	f107 0108 	add.w	r1, r7, #8
 8006d48:	f107 030c 	add.w	r3, r7, #12
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fe fae7 	bl	8005320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	9202      	str	r2, [sp, #8]
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	2300      	movs	r3, #0
 8006d62:	460a      	mov	r2, r1
 8006d64:	4911      	ldr	r1, [pc, #68]	@ (8006dac <xTimerCreateTimerTask+0x88>)
 8006d66:	4812      	ldr	r0, [pc, #72]	@ (8006db0 <xTimerCreateTimerTask+0x8c>)
 8006d68:	f7ff f8a0 	bl	8005eac <xTaskCreateStatic>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4a11      	ldr	r2, [pc, #68]	@ (8006db4 <xTimerCreateTimerTask+0x90>)
 8006d70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d72:	4b10      	ldr	r3, [pc, #64]	@ (8006db4 <xTimerCreateTimerTask+0x90>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	613b      	str	r3, [r7, #16]
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d9c:	697b      	ldr	r3, [r7, #20]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20002810 	.word	0x20002810
 8006dac:	08008648 	.word	0x08008648
 8006db0:	08006ed9 	.word	0x08006ed9
 8006db4:	20002814 	.word	0x20002814

08006db8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08a      	sub	sp, #40	@ 0x28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	623b      	str	r3, [r7, #32]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006de8:	4b19      	ldr	r3, [pc, #100]	@ (8006e50 <xTimerGenericCommand+0x98>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d02a      	beq.n	8006e46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	dc18      	bgt.n	8006e34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e02:	f7ff fead 	bl	8006b60 <xTaskGetSchedulerState>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d109      	bne.n	8006e20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e0c:	4b10      	ldr	r3, [pc, #64]	@ (8006e50 <xTimerGenericCommand+0x98>)
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	f107 0110 	add.w	r1, r7, #16
 8006e14:	2300      	movs	r3, #0
 8006e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e18:	f7fe fc5a 	bl	80056d0 <xQueueGenericSend>
 8006e1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e1e:	e012      	b.n	8006e46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e20:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <xTimerGenericCommand+0x98>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	f107 0110 	add.w	r1, r7, #16
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f7fe fc50 	bl	80056d0 <xQueueGenericSend>
 8006e30:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e32:	e008      	b.n	8006e46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e34:	4b06      	ldr	r3, [pc, #24]	@ (8006e50 <xTimerGenericCommand+0x98>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	f107 0110 	add.w	r1, r7, #16
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	f7fe fd48 	bl	80058d4 <xQueueGenericSendFromISR>
 8006e44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3728      	adds	r7, #40	@ 0x28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20002810 	.word	0x20002810

08006e54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af02      	add	r7, sp, #8
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed4 <prvProcessExpiredTimer+0x80>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe fafb 	bl	8005468 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d123      	bne.n	8006ec2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	18d1      	adds	r1, r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	6978      	ldr	r0, [r7, #20]
 8006e88:	f000 f8cc 	bl	8007024 <prvInsertTimerInActiveList>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d017      	beq.n	8006ec2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e92:	2300      	movs	r3, #0
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	2300      	movs	r3, #0
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	6978      	ldr	r0, [r7, #20]
 8006e9e:	f7ff ff8b 	bl	8006db8 <xTimerGenericCommand>
 8006ea2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	60fb      	str	r3, [r7, #12]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec6:	6978      	ldr	r0, [r7, #20]
 8006ec8:	4798      	blx	r3
}
 8006eca:	bf00      	nop
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20002808 	.word	0x20002808

08006ed8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ee0:	f107 0308 	add.w	r3, r7, #8
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f859 	bl	8006f9c <prvGetNextExpireTime>
 8006eea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f805 	bl	8006f00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ef6:	f000 f8d7 	bl	80070a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006efa:	bf00      	nop
 8006efc:	e7f0      	b.n	8006ee0 <prvTimerTask+0x8>
	...

08006f00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f0a:	f7ff fa29 	bl	8006360 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f0e:	f107 0308 	add.w	r3, r7, #8
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f866 	bl	8006fe4 <prvSampleTimeNow>
 8006f18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d130      	bne.n	8006f82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <prvProcessTimerOrBlockTask+0x3c>
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d806      	bhi.n	8006f3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f2e:	f7ff fa25 	bl	800637c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ff8d 	bl	8006e54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f3a:	e024      	b.n	8006f86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d008      	beq.n	8006f54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f42:	4b13      	ldr	r3, [pc, #76]	@ (8006f90 <prvProcessTimerOrBlockTask+0x90>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f54:	4b0f      	ldr	r3, [pc, #60]	@ (8006f94 <prvProcessTimerOrBlockTask+0x94>)
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	4619      	mov	r1, r3
 8006f62:	f7fe ff6f 	bl	8005e44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f66:	f7ff fa09 	bl	800637c <xTaskResumeAll>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f70:	4b09      	ldr	r3, [pc, #36]	@ (8006f98 <prvProcessTimerOrBlockTask+0x98>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
}
 8006f80:	e001      	b.n	8006f86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f82:	f7ff f9fb 	bl	800637c <xTaskResumeAll>
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	2000280c 	.word	0x2000280c
 8006f94:	20002810 	.word	0x20002810
 8006f98:	e000ed04 	.word	0xe000ed04

08006f9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe0 <prvGetNextExpireTime+0x44>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bf0c      	ite	eq
 8006fae:	2301      	moveq	r3, #1
 8006fb0:	2300      	movne	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d105      	bne.n	8006fce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fc2:	4b07      	ldr	r3, [pc, #28]	@ (8006fe0 <prvGetNextExpireTime+0x44>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e001      	b.n	8006fd2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	20002808 	.word	0x20002808

08006fe4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fec:	f7ff fa64 	bl	80064b8 <xTaskGetTickCount>
 8006ff0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <prvSampleTimeNow+0x3c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d205      	bcs.n	8007008 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ffc:	f000 f910 	bl	8007220 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	e002      	b.n	800700e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800700e:	4a04      	ldr	r2, [pc, #16]	@ (8007020 <prvSampleTimeNow+0x3c>)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007014:	68fb      	ldr	r3, [r7, #12]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20002818 	.word	0x20002818

08007024 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	429a      	cmp	r2, r3
 8007048:	d812      	bhi.n	8007070 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	429a      	cmp	r2, r3
 8007056:	d302      	bcc.n	800705e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007058:	2301      	movs	r3, #1
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e01b      	b.n	8007096 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800705e:	4b10      	ldr	r3, [pc, #64]	@ (80070a0 <prvInsertTimerInActiveList+0x7c>)
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3304      	adds	r3, #4
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f7fe f9c4 	bl	80053f6 <vListInsert>
 800706e:	e012      	b.n	8007096 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d206      	bcs.n	8007086 <prvInsertTimerInActiveList+0x62>
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d302      	bcc.n	8007086 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007080:	2301      	movs	r3, #1
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	e007      	b.n	8007096 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007086:	4b07      	ldr	r3, [pc, #28]	@ (80070a4 <prvInsertTimerInActiveList+0x80>)
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3304      	adds	r3, #4
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f7fe f9b0 	bl	80053f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007096:	697b      	ldr	r3, [r7, #20]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	2000280c 	.word	0x2000280c
 80070a4:	20002808 	.word	0x20002808

080070a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08e      	sub	sp, #56	@ 0x38
 80070ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ae:	e0a5      	b.n	80071fc <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	da19      	bge.n	80070ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	3304      	adds	r3, #4
 80070ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10b      	bne.n	80070da <prvProcessReceivedCommands+0x32>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	61fb      	str	r3, [r7, #28]
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070e0:	6850      	ldr	r0, [r2, #4]
 80070e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070e4:	6892      	ldr	r2, [r2, #8]
 80070e6:	4611      	mov	r1, r2
 80070e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f2c0 8085 	blt.w	80071fc <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	3304      	adds	r3, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe f9b0 	bl	8005468 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007108:	463b      	mov	r3, r7
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff ff6a 	bl	8006fe4 <prvSampleTimeNow>
 8007110:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b09      	cmp	r3, #9
 8007116:	d86c      	bhi.n	80071f2 <prvProcessReceivedCommands+0x14a>
 8007118:	a201      	add	r2, pc, #4	@ (adr r2, 8007120 <prvProcessReceivedCommands+0x78>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007149 	.word	0x08007149
 8007124:	08007149 	.word	0x08007149
 8007128:	08007149 	.word	0x08007149
 800712c:	080071f3 	.word	0x080071f3
 8007130:	080071a7 	.word	0x080071a7
 8007134:	080071e1 	.word	0x080071e1
 8007138:	08007149 	.word	0x08007149
 800713c:	08007149 	.word	0x08007149
 8007140:	080071f3 	.word	0x080071f3
 8007144:	080071a7 	.word	0x080071a7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	18d1      	adds	r1, r2, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007156:	f7ff ff65 	bl	8007024 <prvInsertTimerInActiveList>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d04a      	beq.n	80071f6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007166:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d142      	bne.n	80071f6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	441a      	add	r2, r3
 8007178:	2300      	movs	r3, #0
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	2300      	movs	r3, #0
 800717e:	2100      	movs	r1, #0
 8007180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007182:	f7ff fe19 	bl	8006db8 <xTimerGenericCommand>
 8007186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d133      	bne.n	80071f6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	61bb      	str	r3, [r7, #24]
}
 80071a0:	bf00      	nop
 80071a2:	bf00      	nop
 80071a4:	e7fd      	b.n	80071a2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <prvProcessReceivedCommands+0x124>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	617b      	str	r3, [r7, #20]
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	e7fd      	b.n	80071c8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	699a      	ldr	r2, [r3, #24]
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	18d1      	adds	r1, r2, r3
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071da:	f7ff ff23 	bl	8007024 <prvInsertTimerInActiveList>
					break;
 80071de:	e00d      	b.n	80071fc <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d107      	bne.n	80071fa <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80071ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ec:	f000 fbd6 	bl	800799c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071f0:	e003      	b.n	80071fa <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80071f2:	bf00      	nop
 80071f4:	e002      	b.n	80071fc <prvProcessReceivedCommands+0x154>
					break;
 80071f6:	bf00      	nop
 80071f8:	e000      	b.n	80071fc <prvProcessReceivedCommands+0x154>
					break;
 80071fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071fc:	4b07      	ldr	r3, [pc, #28]	@ (800721c <prvProcessReceivedCommands+0x174>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	1d39      	adds	r1, r7, #4
 8007202:	2200      	movs	r2, #0
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fc01 	bl	8005a0c <xQueueReceive>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	f47f af4f 	bne.w	80070b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	3730      	adds	r7, #48	@ 0x30
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20002810 	.word	0x20002810

08007220 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007226:	e046      	b.n	80072b6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007228:	4b2c      	ldr	r3, [pc, #176]	@ (80072dc <prvSwitchTimerLists+0xbc>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007232:	4b2a      	ldr	r3, [pc, #168]	@ (80072dc <prvSwitchTimerLists+0xbc>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3304      	adds	r3, #4
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe f911 	bl	8005468 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d12f      	bne.n	80072b6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4413      	add	r3, r2
 800725e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	429a      	cmp	r2, r3
 8007266:	d90e      	bls.n	8007286 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007274:	4b19      	ldr	r3, [pc, #100]	@ (80072dc <prvSwitchTimerLists+0xbc>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f7fe f8b9 	bl	80053f6 <vListInsert>
 8007284:	e017      	b.n	80072b6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007286:	2300      	movs	r3, #0
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2300      	movs	r3, #0
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	2100      	movs	r1, #0
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7ff fd91 	bl	8006db8 <xTimerGenericCommand>
 8007296:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10b      	bne.n	80072b6 <prvSwitchTimerLists+0x96>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	603b      	str	r3, [r7, #0]
}
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	e7fd      	b.n	80072b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072b6:	4b09      	ldr	r3, [pc, #36]	@ (80072dc <prvSwitchTimerLists+0xbc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1b3      	bne.n	8007228 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072c0:	4b06      	ldr	r3, [pc, #24]	@ (80072dc <prvSwitchTimerLists+0xbc>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072c6:	4b06      	ldr	r3, [pc, #24]	@ (80072e0 <prvSwitchTimerLists+0xc0>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a04      	ldr	r2, [pc, #16]	@ (80072dc <prvSwitchTimerLists+0xbc>)
 80072cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072ce:	4a04      	ldr	r2, [pc, #16]	@ (80072e0 <prvSwitchTimerLists+0xc0>)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	6013      	str	r3, [r2, #0]
}
 80072d4:	bf00      	nop
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20002808 	.word	0x20002808
 80072e0:	2000280c 	.word	0x2000280c

080072e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072ea:	f000 f96d 	bl	80075c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072ee:	4b15      	ldr	r3, [pc, #84]	@ (8007344 <prvCheckForValidListAndQueue+0x60>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d120      	bne.n	8007338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072f6:	4814      	ldr	r0, [pc, #80]	@ (8007348 <prvCheckForValidListAndQueue+0x64>)
 80072f8:	f7fe f82c 	bl	8005354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072fc:	4813      	ldr	r0, [pc, #76]	@ (800734c <prvCheckForValidListAndQueue+0x68>)
 80072fe:	f7fe f829 	bl	8005354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007302:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <prvCheckForValidListAndQueue+0x6c>)
 8007304:	4a10      	ldr	r2, [pc, #64]	@ (8007348 <prvCheckForValidListAndQueue+0x64>)
 8007306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007308:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <prvCheckForValidListAndQueue+0x70>)
 800730a:	4a10      	ldr	r2, [pc, #64]	@ (800734c <prvCheckForValidListAndQueue+0x68>)
 800730c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800730e:	2300      	movs	r3, #0
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4b11      	ldr	r3, [pc, #68]	@ (8007358 <prvCheckForValidListAndQueue+0x74>)
 8007314:	4a11      	ldr	r2, [pc, #68]	@ (800735c <prvCheckForValidListAndQueue+0x78>)
 8007316:	2110      	movs	r1, #16
 8007318:	200a      	movs	r0, #10
 800731a:	f7fe f939 	bl	8005590 <xQueueGenericCreateStatic>
 800731e:	4603      	mov	r3, r0
 8007320:	4a08      	ldr	r2, [pc, #32]	@ (8007344 <prvCheckForValidListAndQueue+0x60>)
 8007322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007324:	4b07      	ldr	r3, [pc, #28]	@ (8007344 <prvCheckForValidListAndQueue+0x60>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800732c:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <prvCheckForValidListAndQueue+0x60>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	490b      	ldr	r1, [pc, #44]	@ (8007360 <prvCheckForValidListAndQueue+0x7c>)
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fd5c 	bl	8005df0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007338:	f000 f978 	bl	800762c <vPortExitCritical>
}
 800733c:	bf00      	nop
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20002810 	.word	0x20002810
 8007348:	200027e0 	.word	0x200027e0
 800734c:	200027f4 	.word	0x200027f4
 8007350:	20002808 	.word	0x20002808
 8007354:	2000280c 	.word	0x2000280c
 8007358:	200028bc 	.word	0x200028bc
 800735c:	2000281c 	.word	0x2000281c
 8007360:	08008650 	.word	0x08008650

08007364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3b04      	subs	r3, #4
 8007374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800737c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3b04      	subs	r3, #4
 8007382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f023 0201 	bic.w	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3b04      	subs	r3, #4
 8007392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007394:	4a0c      	ldr	r2, [pc, #48]	@ (80073c8 <pxPortInitialiseStack+0x64>)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3b14      	subs	r3, #20
 800739e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3b04      	subs	r3, #4
 80073aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f06f 0202 	mvn.w	r2, #2
 80073b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3b20      	subs	r3, #32
 80073b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073ba:	68fb      	ldr	r3, [r7, #12]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	080073cd 	.word	0x080073cd

080073cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073d6:	4b13      	ldr	r3, [pc, #76]	@ (8007424 <prvTaskExitError+0x58>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073de:	d00b      	beq.n	80073f8 <prvTaskExitError+0x2c>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	60fb      	str	r3, [r7, #12]
}
 80073f2:	bf00      	nop
 80073f4:	bf00      	nop
 80073f6:	e7fd      	b.n	80073f4 <prvTaskExitError+0x28>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	60bb      	str	r3, [r7, #8]
}
 800740a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800740c:	bf00      	nop
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0fc      	beq.n	800740e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000010 	.word	0x20000010
	...

08007430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007430:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <pxCurrentTCBConst2>)
 8007432:	6819      	ldr	r1, [r3, #0]
 8007434:	6808      	ldr	r0, [r1, #0]
 8007436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743a:	f380 8809 	msr	PSP, r0
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f04f 0000 	mov.w	r0, #0
 8007446:	f380 8811 	msr	BASEPRI, r0
 800744a:	4770      	bx	lr
 800744c:	f3af 8000 	nop.w

08007450 <pxCurrentTCBConst2>:
 8007450:	200022e0 	.word	0x200022e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop

08007458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007458:	4808      	ldr	r0, [pc, #32]	@ (800747c <prvPortStartFirstTask+0x24>)
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	6800      	ldr	r0, [r0, #0]
 800745e:	f380 8808 	msr	MSP, r0
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f380 8814 	msr	CONTROL, r0
 800746a:	b662      	cpsie	i
 800746c:	b661      	cpsie	f
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	df00      	svc	0
 8007478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800747a:	bf00      	nop
 800747c:	e000ed08 	.word	0xe000ed08

08007480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007486:	4b47      	ldr	r3, [pc, #284]	@ (80075a4 <xPortStartScheduler+0x124>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a47      	ldr	r2, [pc, #284]	@ (80075a8 <xPortStartScheduler+0x128>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d10b      	bne.n	80074a8 <xPortStartScheduler+0x28>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60fb      	str	r3, [r7, #12]
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	e7fd      	b.n	80074a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074a8:	4b3e      	ldr	r3, [pc, #248]	@ (80075a4 <xPortStartScheduler+0x124>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a3f      	ldr	r2, [pc, #252]	@ (80075ac <xPortStartScheduler+0x12c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d10b      	bne.n	80074ca <xPortStartScheduler+0x4a>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	613b      	str	r3, [r7, #16]
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074ca:	4b39      	ldr	r3, [pc, #228]	@ (80075b0 <xPortStartScheduler+0x130>)
 80074cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	22ff      	movs	r2, #255	@ 0xff
 80074da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	4b31      	ldr	r3, [pc, #196]	@ (80075b4 <xPortStartScheduler+0x134>)
 80074f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074f2:	4b31      	ldr	r3, [pc, #196]	@ (80075b8 <xPortStartScheduler+0x138>)
 80074f4:	2207      	movs	r2, #7
 80074f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074f8:	e009      	b.n	800750e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80074fa:	4b2f      	ldr	r3, [pc, #188]	@ (80075b8 <xPortStartScheduler+0x138>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3b01      	subs	r3, #1
 8007500:	4a2d      	ldr	r2, [pc, #180]	@ (80075b8 <xPortStartScheduler+0x138>)
 8007502:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	b2db      	uxtb	r3, r3
 800750c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007516:	2b80      	cmp	r3, #128	@ 0x80
 8007518:	d0ef      	beq.n	80074fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800751a:	4b27      	ldr	r3, [pc, #156]	@ (80075b8 <xPortStartScheduler+0x138>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f1c3 0307 	rsb	r3, r3, #7
 8007522:	2b04      	cmp	r3, #4
 8007524:	d00b      	beq.n	800753e <xPortStartScheduler+0xbe>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60bb      	str	r3, [r7, #8]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800753e:	4b1e      	ldr	r3, [pc, #120]	@ (80075b8 <xPortStartScheduler+0x138>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	4a1c      	ldr	r2, [pc, #112]	@ (80075b8 <xPortStartScheduler+0x138>)
 8007546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007548:	4b1b      	ldr	r3, [pc, #108]	@ (80075b8 <xPortStartScheduler+0x138>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007550:	4a19      	ldr	r2, [pc, #100]	@ (80075b8 <xPortStartScheduler+0x138>)
 8007552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	b2da      	uxtb	r2, r3
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800755c:	4b17      	ldr	r3, [pc, #92]	@ (80075bc <xPortStartScheduler+0x13c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a16      	ldr	r2, [pc, #88]	@ (80075bc <xPortStartScheduler+0x13c>)
 8007562:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007568:	4b14      	ldr	r3, [pc, #80]	@ (80075bc <xPortStartScheduler+0x13c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a13      	ldr	r2, [pc, #76]	@ (80075bc <xPortStartScheduler+0x13c>)
 800756e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007574:	f000 f8da 	bl	800772c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007578:	4b11      	ldr	r3, [pc, #68]	@ (80075c0 <xPortStartScheduler+0x140>)
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800757e:	f000 f8f9 	bl	8007774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007582:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <xPortStartScheduler+0x144>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a0f      	ldr	r2, [pc, #60]	@ (80075c4 <xPortStartScheduler+0x144>)
 8007588:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800758c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800758e:	f7ff ff63 	bl	8007458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007592:	f7ff f861 	bl	8006658 <vTaskSwitchContext>
	prvTaskExitError();
 8007596:	f7ff ff19 	bl	80073cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	e000ed00 	.word	0xe000ed00
 80075a8:	410fc271 	.word	0x410fc271
 80075ac:	410fc270 	.word	0x410fc270
 80075b0:	e000e400 	.word	0xe000e400
 80075b4:	2000290c 	.word	0x2000290c
 80075b8:	20002910 	.word	0x20002910
 80075bc:	e000ed20 	.word	0xe000ed20
 80075c0:	20000010 	.word	0x20000010
 80075c4:	e000ef34 	.word	0xe000ef34

080075c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	607b      	str	r3, [r7, #4]
}
 80075e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075e2:	4b10      	ldr	r3, [pc, #64]	@ (8007624 <vPortEnterCritical+0x5c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3301      	adds	r3, #1
 80075e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007624 <vPortEnterCritical+0x5c>)
 80075ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <vPortEnterCritical+0x5c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d110      	bne.n	8007616 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007628 <vPortEnterCritical+0x60>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <vPortEnterCritical+0x4e>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	603b      	str	r3, [r7, #0]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <vPortEnterCritical+0x4a>
	}
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20000010 	.word	0x20000010
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007632:	4b12      	ldr	r3, [pc, #72]	@ (800767c <vPortExitCritical+0x50>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <vPortExitCritical+0x26>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	607b      	str	r3, [r7, #4]
}
 800764c:	bf00      	nop
 800764e:	bf00      	nop
 8007650:	e7fd      	b.n	800764e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007652:	4b0a      	ldr	r3, [pc, #40]	@ (800767c <vPortExitCritical+0x50>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3b01      	subs	r3, #1
 8007658:	4a08      	ldr	r2, [pc, #32]	@ (800767c <vPortExitCritical+0x50>)
 800765a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800765c:	4b07      	ldr	r3, [pc, #28]	@ (800767c <vPortExitCritical+0x50>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d105      	bne.n	8007670 <vPortExitCritical+0x44>
 8007664:	2300      	movs	r3, #0
 8007666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f383 8811 	msr	BASEPRI, r3
}
 800766e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	20000010 	.word	0x20000010

08007680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007680:	f3ef 8009 	mrs	r0, PSP
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	4b15      	ldr	r3, [pc, #84]	@ (80076e0 <pxCurrentTCBConst>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	f01e 0f10 	tst.w	lr, #16
 8007690:	bf08      	it	eq
 8007692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	6010      	str	r0, [r2, #0]
 800769c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076a4:	f380 8811 	msr	BASEPRI, r0
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f7fe ffd2 	bl	8006658 <vTaskSwitchContext>
 80076b4:	f04f 0000 	mov.w	r0, #0
 80076b8:	f380 8811 	msr	BASEPRI, r0
 80076bc:	bc09      	pop	{r0, r3}
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	6808      	ldr	r0, [r1, #0]
 80076c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c6:	f01e 0f10 	tst.w	lr, #16
 80076ca:	bf08      	it	eq
 80076cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076d0:	f380 8809 	msr	PSP, r0
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	f3af 8000 	nop.w

080076e0 <pxCurrentTCBConst>:
 80076e0:	200022e0 	.word	0x200022e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop

080076e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	607b      	str	r3, [r7, #4]
}
 8007700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007702:	f7fe fee9 	bl	80064d8 <xTaskIncrementTick>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800770c:	4b06      	ldr	r3, [pc, #24]	@ (8007728 <SysTick_Handler+0x40>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	2300      	movs	r3, #0
 8007716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f383 8811 	msr	BASEPRI, r3
}
 800771e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007730:	4b0b      	ldr	r3, [pc, #44]	@ (8007760 <vPortSetupTimerInterrupt+0x34>)
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007736:	4b0b      	ldr	r3, [pc, #44]	@ (8007764 <vPortSetupTimerInterrupt+0x38>)
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800773c:	4b0a      	ldr	r3, [pc, #40]	@ (8007768 <vPortSetupTimerInterrupt+0x3c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0a      	ldr	r2, [pc, #40]	@ (800776c <vPortSetupTimerInterrupt+0x40>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	099b      	lsrs	r3, r3, #6
 8007748:	4a09      	ldr	r2, [pc, #36]	@ (8007770 <vPortSetupTimerInterrupt+0x44>)
 800774a:	3b01      	subs	r3, #1
 800774c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800774e:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <vPortSetupTimerInterrupt+0x34>)
 8007750:	2207      	movs	r2, #7
 8007752:	601a      	str	r2, [r3, #0]
}
 8007754:	bf00      	nop
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000e010 	.word	0xe000e010
 8007764:	e000e018 	.word	0xe000e018
 8007768:	20000004 	.word	0x20000004
 800776c:	10624dd3 	.word	0x10624dd3
 8007770:	e000e014 	.word	0xe000e014

08007774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007774:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007784 <vPortEnableVFP+0x10>
 8007778:	6801      	ldr	r1, [r0, #0]
 800777a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800777e:	6001      	str	r1, [r0, #0]
 8007780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007782:	bf00      	nop
 8007784:	e000ed88 	.word	0xe000ed88

08007788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800778e:	f3ef 8305 	mrs	r3, IPSR
 8007792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b0f      	cmp	r3, #15
 8007798:	d915      	bls.n	80077c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800779a:	4a18      	ldr	r2, [pc, #96]	@ (80077fc <vPortValidateInterruptPriority+0x74>)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077a4:	4b16      	ldr	r3, [pc, #88]	@ (8007800 <vPortValidateInterruptPriority+0x78>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	7afa      	ldrb	r2, [r7, #11]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d20b      	bcs.n	80077c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007804 <vPortValidateInterruptPriority+0x7c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007808 <vPortValidateInterruptPriority+0x80>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d90b      	bls.n	80077ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	603b      	str	r3, [r7, #0]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <vPortValidateInterruptPriority+0x62>
	}
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	e000e3f0 	.word	0xe000e3f0
 8007800:	2000290c 	.word	0x2000290c
 8007804:	e000ed0c 	.word	0xe000ed0c
 8007808:	20002910 	.word	0x20002910

0800780c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	@ 0x28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007814:	2300      	movs	r3, #0
 8007816:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007818:	f7fe fda2 	bl	8006360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800781c:	4b5a      	ldr	r3, [pc, #360]	@ (8007988 <pvPortMalloc+0x17c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007824:	f000 f916 	bl	8007a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007828:	4b58      	ldr	r3, [pc, #352]	@ (800798c <pvPortMalloc+0x180>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4013      	ands	r3, r2
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 8090 	bne.w	8007956 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01e      	beq.n	800787a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800783c:	2208      	movs	r2, #8
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b00      	cmp	r3, #0
 800784c:	d015      	beq.n	800787a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f023 0307 	bic.w	r3, r3, #7
 8007854:	3308      	adds	r3, #8
 8007856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00b      	beq.n	800787a <pvPortMalloc+0x6e>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	617b      	str	r3, [r7, #20]
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	e7fd      	b.n	8007876 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d06a      	beq.n	8007956 <pvPortMalloc+0x14a>
 8007880:	4b43      	ldr	r3, [pc, #268]	@ (8007990 <pvPortMalloc+0x184>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	429a      	cmp	r2, r3
 8007888:	d865      	bhi.n	8007956 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800788a:	4b42      	ldr	r3, [pc, #264]	@ (8007994 <pvPortMalloc+0x188>)
 800788c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800788e:	4b41      	ldr	r3, [pc, #260]	@ (8007994 <pvPortMalloc+0x188>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007894:	e004      	b.n	80078a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d903      	bls.n	80078b2 <pvPortMalloc+0xa6>
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1f1      	bne.n	8007896 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078b2:	4b35      	ldr	r3, [pc, #212]	@ (8007988 <pvPortMalloc+0x17c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d04c      	beq.n	8007956 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2208      	movs	r2, #8
 80078c2:	4413      	add	r3, r2
 80078c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	1ad2      	subs	r2, r2, r3
 80078d6:	2308      	movs	r3, #8
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	429a      	cmp	r2, r3
 80078dc:	d920      	bls.n	8007920 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4413      	add	r3, r2
 80078e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <pvPortMalloc+0xfc>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	613b      	str	r3, [r7, #16]
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	e7fd      	b.n	8007904 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	1ad2      	subs	r2, r2, r3
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800791a:	69b8      	ldr	r0, [r7, #24]
 800791c:	f000 f8fc 	bl	8007b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007920:	4b1b      	ldr	r3, [pc, #108]	@ (8007990 <pvPortMalloc+0x184>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	4a19      	ldr	r2, [pc, #100]	@ (8007990 <pvPortMalloc+0x184>)
 800792c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800792e:	4b18      	ldr	r3, [pc, #96]	@ (8007990 <pvPortMalloc+0x184>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4b19      	ldr	r3, [pc, #100]	@ (8007998 <pvPortMalloc+0x18c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d203      	bcs.n	8007942 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800793a:	4b15      	ldr	r3, [pc, #84]	@ (8007990 <pvPortMalloc+0x184>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a16      	ldr	r2, [pc, #88]	@ (8007998 <pvPortMalloc+0x18c>)
 8007940:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	4b11      	ldr	r3, [pc, #68]	@ (800798c <pvPortMalloc+0x180>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	431a      	orrs	r2, r3
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007956:	f7fe fd11 	bl	800637c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00b      	beq.n	800797c <pvPortMalloc+0x170>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	60fb      	str	r3, [r7, #12]
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <pvPortMalloc+0x16c>
	return pvReturn;
 800797c:	69fb      	ldr	r3, [r7, #28]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3728      	adds	r7, #40	@ 0x28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	2000351c 	.word	0x2000351c
 800798c:	20003528 	.word	0x20003528
 8007990:	20003520 	.word	0x20003520
 8007994:	20003514 	.word	0x20003514
 8007998:	20003524 	.word	0x20003524

0800799c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d04a      	beq.n	8007a44 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079ae:	2308      	movs	r3, #8
 80079b0:	425b      	negs	r3, r3
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4413      	add	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	4b22      	ldr	r3, [pc, #136]	@ (8007a4c <vPortFree+0xb0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4013      	ands	r3, r2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10b      	bne.n	80079e2 <vPortFree+0x46>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	60fb      	str	r3, [r7, #12]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <vPortFree+0x66>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	60bb      	str	r3, [r7, #8]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	4b11      	ldr	r3, [pc, #68]	@ (8007a4c <vPortFree+0xb0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d019      	beq.n	8007a44 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d115      	bne.n	8007a44 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a4c <vPortFree+0xb0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	401a      	ands	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a28:	f7fe fc9a 	bl	8006360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	4b07      	ldr	r3, [pc, #28]	@ (8007a50 <vPortFree+0xb4>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4413      	add	r3, r2
 8007a36:	4a06      	ldr	r2, [pc, #24]	@ (8007a50 <vPortFree+0xb4>)
 8007a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a3a:	6938      	ldr	r0, [r7, #16]
 8007a3c:	f000 f86c 	bl	8007b18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a40:	f7fe fc9c 	bl	800637c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a44:	bf00      	nop
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20003528 	.word	0x20003528
 8007a50:	20003520 	.word	0x20003520

08007a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a60:	4b27      	ldr	r3, [pc, #156]	@ (8007b00 <prvHeapInit+0xac>)
 8007a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00c      	beq.n	8007a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3307      	adds	r3, #7
 8007a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0307 	bic.w	r3, r3, #7
 8007a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	4a1f      	ldr	r2, [pc, #124]	@ (8007b00 <prvHeapInit+0xac>)
 8007a84:	4413      	add	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b04 <prvHeapInit+0xb0>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a92:	4b1c      	ldr	r3, [pc, #112]	@ (8007b04 <prvHeapInit+0xb0>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1a9b      	subs	r3, r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0307 	bic.w	r3, r3, #7
 8007aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a15      	ldr	r2, [pc, #84]	@ (8007b08 <prvHeapInit+0xb4>)
 8007ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ab6:	4b14      	ldr	r3, [pc, #80]	@ (8007b08 <prvHeapInit+0xb4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2200      	movs	r2, #0
 8007abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007abe:	4b12      	ldr	r3, [pc, #72]	@ (8007b08 <prvHeapInit+0xb4>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	1ad2      	subs	r2, r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b08 <prvHeapInit+0xb4>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8007b0c <prvHeapInit+0xb8>)
 8007ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	4a09      	ldr	r2, [pc, #36]	@ (8007b10 <prvHeapInit+0xbc>)
 8007aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007aec:	4b09      	ldr	r3, [pc, #36]	@ (8007b14 <prvHeapInit+0xc0>)
 8007aee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007af2:	601a      	str	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	20002914 	.word	0x20002914
 8007b04:	20003514 	.word	0x20003514
 8007b08:	2000351c 	.word	0x2000351c
 8007b0c:	20003524 	.word	0x20003524
 8007b10:	20003520 	.word	0x20003520
 8007b14:	20003528 	.word	0x20003528

08007b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b20:	4b28      	ldr	r3, [pc, #160]	@ (8007bc4 <prvInsertBlockIntoFreeList+0xac>)
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e002      	b.n	8007b2c <prvInsertBlockIntoFreeList+0x14>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d8f7      	bhi.n	8007b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	4413      	add	r3, r2
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d108      	bne.n	8007b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	441a      	add	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	441a      	add	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d118      	bne.n	8007ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b15      	ldr	r3, [pc, #84]	@ (8007bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d00d      	beq.n	8007b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	e008      	b.n	8007ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b96:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e003      	b.n	8007ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d002      	beq.n	8007bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20003514 	.word	0x20003514
 8007bc8:	2000351c 	.word	0x2000351c

08007bcc <siprintf>:
 8007bcc:	b40e      	push	{r1, r2, r3}
 8007bce:	b510      	push	{r4, lr}
 8007bd0:	b09d      	sub	sp, #116	@ 0x74
 8007bd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007bd4:	9002      	str	r0, [sp, #8]
 8007bd6:	9006      	str	r0, [sp, #24]
 8007bd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007bdc:	480a      	ldr	r0, [pc, #40]	@ (8007c08 <siprintf+0x3c>)
 8007bde:	9107      	str	r1, [sp, #28]
 8007be0:	9104      	str	r1, [sp, #16]
 8007be2:	490a      	ldr	r1, [pc, #40]	@ (8007c0c <siprintf+0x40>)
 8007be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be8:	9105      	str	r1, [sp, #20]
 8007bea:	2400      	movs	r4, #0
 8007bec:	a902      	add	r1, sp, #8
 8007bee:	6800      	ldr	r0, [r0, #0]
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007bf4:	f000 fa00 	bl	8007ff8 <_svfiprintf_r>
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	701c      	strb	r4, [r3, #0]
 8007bfc:	b01d      	add	sp, #116	@ 0x74
 8007bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c02:	b003      	add	sp, #12
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	20000014 	.word	0x20000014
 8007c0c:	ffff0208 	.word	0xffff0208

08007c10 <memset>:
 8007c10:	4402      	add	r2, r0
 8007c12:	4603      	mov	r3, r0
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d100      	bne.n	8007c1a <memset+0xa>
 8007c18:	4770      	bx	lr
 8007c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c1e:	e7f9      	b.n	8007c14 <memset+0x4>

08007c20 <_reclaim_reent>:
 8007c20:	4b2d      	ldr	r3, [pc, #180]	@ (8007cd8 <_reclaim_reent+0xb8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4283      	cmp	r3, r0
 8007c26:	b570      	push	{r4, r5, r6, lr}
 8007c28:	4604      	mov	r4, r0
 8007c2a:	d053      	beq.n	8007cd4 <_reclaim_reent+0xb4>
 8007c2c:	69c3      	ldr	r3, [r0, #28]
 8007c2e:	b31b      	cbz	r3, 8007c78 <_reclaim_reent+0x58>
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	b163      	cbz	r3, 8007c4e <_reclaim_reent+0x2e>
 8007c34:	2500      	movs	r5, #0
 8007c36:	69e3      	ldr	r3, [r4, #28]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	5959      	ldr	r1, [r3, r5]
 8007c3c:	b9b1      	cbnz	r1, 8007c6c <_reclaim_reent+0x4c>
 8007c3e:	3504      	adds	r5, #4
 8007c40:	2d80      	cmp	r5, #128	@ 0x80
 8007c42:	d1f8      	bne.n	8007c36 <_reclaim_reent+0x16>
 8007c44:	69e3      	ldr	r3, [r4, #28]
 8007c46:	4620      	mov	r0, r4
 8007c48:	68d9      	ldr	r1, [r3, #12]
 8007c4a:	f000 f881 	bl	8007d50 <_free_r>
 8007c4e:	69e3      	ldr	r3, [r4, #28]
 8007c50:	6819      	ldr	r1, [r3, #0]
 8007c52:	b111      	cbz	r1, 8007c5a <_reclaim_reent+0x3a>
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 f87b 	bl	8007d50 <_free_r>
 8007c5a:	69e3      	ldr	r3, [r4, #28]
 8007c5c:	689d      	ldr	r5, [r3, #8]
 8007c5e:	b15d      	cbz	r5, 8007c78 <_reclaim_reent+0x58>
 8007c60:	4629      	mov	r1, r5
 8007c62:	4620      	mov	r0, r4
 8007c64:	682d      	ldr	r5, [r5, #0]
 8007c66:	f000 f873 	bl	8007d50 <_free_r>
 8007c6a:	e7f8      	b.n	8007c5e <_reclaim_reent+0x3e>
 8007c6c:	680e      	ldr	r6, [r1, #0]
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 f86e 	bl	8007d50 <_free_r>
 8007c74:	4631      	mov	r1, r6
 8007c76:	e7e1      	b.n	8007c3c <_reclaim_reent+0x1c>
 8007c78:	6961      	ldr	r1, [r4, #20]
 8007c7a:	b111      	cbz	r1, 8007c82 <_reclaim_reent+0x62>
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 f867 	bl	8007d50 <_free_r>
 8007c82:	69e1      	ldr	r1, [r4, #28]
 8007c84:	b111      	cbz	r1, 8007c8c <_reclaim_reent+0x6c>
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 f862 	bl	8007d50 <_free_r>
 8007c8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c8e:	b111      	cbz	r1, 8007c96 <_reclaim_reent+0x76>
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 f85d 	bl	8007d50 <_free_r>
 8007c96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c98:	b111      	cbz	r1, 8007ca0 <_reclaim_reent+0x80>
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f000 f858 	bl	8007d50 <_free_r>
 8007ca0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007ca2:	b111      	cbz	r1, 8007caa <_reclaim_reent+0x8a>
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 f853 	bl	8007d50 <_free_r>
 8007caa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007cac:	b111      	cbz	r1, 8007cb4 <_reclaim_reent+0x94>
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 f84e 	bl	8007d50 <_free_r>
 8007cb4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007cb6:	b111      	cbz	r1, 8007cbe <_reclaim_reent+0x9e>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 f849 	bl	8007d50 <_free_r>
 8007cbe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007cc0:	b111      	cbz	r1, 8007cc8 <_reclaim_reent+0xa8>
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 f844 	bl	8007d50 <_free_r>
 8007cc8:	6a23      	ldr	r3, [r4, #32]
 8007cca:	b11b      	cbz	r3, 8007cd4 <_reclaim_reent+0xb4>
 8007ccc:	4620      	mov	r0, r4
 8007cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cd2:	4718      	bx	r3
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000014 	.word	0x20000014

08007cdc <__errno>:
 8007cdc:	4b01      	ldr	r3, [pc, #4]	@ (8007ce4 <__errno+0x8>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20000014 	.word	0x20000014

08007ce8 <__libc_init_array>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	4d0d      	ldr	r5, [pc, #52]	@ (8007d20 <__libc_init_array+0x38>)
 8007cec:	4c0d      	ldr	r4, [pc, #52]	@ (8007d24 <__libc_init_array+0x3c>)
 8007cee:	1b64      	subs	r4, r4, r5
 8007cf0:	10a4      	asrs	r4, r4, #2
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	42a6      	cmp	r6, r4
 8007cf6:	d109      	bne.n	8007d0c <__libc_init_array+0x24>
 8007cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8007d28 <__libc_init_array+0x40>)
 8007cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8007d2c <__libc_init_array+0x44>)
 8007cfc:	f000 fc64 	bl	80085c8 <_init>
 8007d00:	1b64      	subs	r4, r4, r5
 8007d02:	10a4      	asrs	r4, r4, #2
 8007d04:	2600      	movs	r6, #0
 8007d06:	42a6      	cmp	r6, r4
 8007d08:	d105      	bne.n	8007d16 <__libc_init_array+0x2e>
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d10:	4798      	blx	r3
 8007d12:	3601      	adds	r6, #1
 8007d14:	e7ee      	b.n	8007cf4 <__libc_init_array+0xc>
 8007d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1a:	4798      	blx	r3
 8007d1c:	3601      	adds	r6, #1
 8007d1e:	e7f2      	b.n	8007d06 <__libc_init_array+0x1e>
 8007d20:	08008714 	.word	0x08008714
 8007d24:	08008714 	.word	0x08008714
 8007d28:	08008714 	.word	0x08008714
 8007d2c:	08008718 	.word	0x08008718

08007d30 <__retarget_lock_acquire_recursive>:
 8007d30:	4770      	bx	lr

08007d32 <__retarget_lock_release_recursive>:
 8007d32:	4770      	bx	lr

08007d34 <memcpy>:
 8007d34:	440a      	add	r2, r1
 8007d36:	4291      	cmp	r1, r2
 8007d38:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d3c:	d100      	bne.n	8007d40 <memcpy+0xc>
 8007d3e:	4770      	bx	lr
 8007d40:	b510      	push	{r4, lr}
 8007d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4a:	4291      	cmp	r1, r2
 8007d4c:	d1f9      	bne.n	8007d42 <memcpy+0xe>
 8007d4e:	bd10      	pop	{r4, pc}

08007d50 <_free_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4605      	mov	r5, r0
 8007d54:	2900      	cmp	r1, #0
 8007d56:	d041      	beq.n	8007ddc <_free_r+0x8c>
 8007d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d5c:	1f0c      	subs	r4, r1, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfb8      	it	lt
 8007d62:	18e4      	addlt	r4, r4, r3
 8007d64:	f000 f8e0 	bl	8007f28 <__malloc_lock>
 8007d68:	4a1d      	ldr	r2, [pc, #116]	@ (8007de0 <_free_r+0x90>)
 8007d6a:	6813      	ldr	r3, [r2, #0]
 8007d6c:	b933      	cbnz	r3, 8007d7c <_free_r+0x2c>
 8007d6e:	6063      	str	r3, [r4, #4]
 8007d70:	6014      	str	r4, [r2, #0]
 8007d72:	4628      	mov	r0, r5
 8007d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d78:	f000 b8dc 	b.w	8007f34 <__malloc_unlock>
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	d908      	bls.n	8007d92 <_free_r+0x42>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	1821      	adds	r1, r4, r0
 8007d84:	428b      	cmp	r3, r1
 8007d86:	bf01      	itttt	eq
 8007d88:	6819      	ldreq	r1, [r3, #0]
 8007d8a:	685b      	ldreq	r3, [r3, #4]
 8007d8c:	1809      	addeq	r1, r1, r0
 8007d8e:	6021      	streq	r1, [r4, #0]
 8007d90:	e7ed      	b.n	8007d6e <_free_r+0x1e>
 8007d92:	461a      	mov	r2, r3
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	b10b      	cbz	r3, 8007d9c <_free_r+0x4c>
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	d9fa      	bls.n	8007d92 <_free_r+0x42>
 8007d9c:	6811      	ldr	r1, [r2, #0]
 8007d9e:	1850      	adds	r0, r2, r1
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d10b      	bne.n	8007dbc <_free_r+0x6c>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	4401      	add	r1, r0
 8007da8:	1850      	adds	r0, r2, r1
 8007daa:	4283      	cmp	r3, r0
 8007dac:	6011      	str	r1, [r2, #0]
 8007dae:	d1e0      	bne.n	8007d72 <_free_r+0x22>
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	6053      	str	r3, [r2, #4]
 8007db6:	4408      	add	r0, r1
 8007db8:	6010      	str	r0, [r2, #0]
 8007dba:	e7da      	b.n	8007d72 <_free_r+0x22>
 8007dbc:	d902      	bls.n	8007dc4 <_free_r+0x74>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	602b      	str	r3, [r5, #0]
 8007dc2:	e7d6      	b.n	8007d72 <_free_r+0x22>
 8007dc4:	6820      	ldr	r0, [r4, #0]
 8007dc6:	1821      	adds	r1, r4, r0
 8007dc8:	428b      	cmp	r3, r1
 8007dca:	bf04      	itt	eq
 8007dcc:	6819      	ldreq	r1, [r3, #0]
 8007dce:	685b      	ldreq	r3, [r3, #4]
 8007dd0:	6063      	str	r3, [r4, #4]
 8007dd2:	bf04      	itt	eq
 8007dd4:	1809      	addeq	r1, r1, r0
 8007dd6:	6021      	streq	r1, [r4, #0]
 8007dd8:	6054      	str	r4, [r2, #4]
 8007dda:	e7ca      	b.n	8007d72 <_free_r+0x22>
 8007ddc:	bd38      	pop	{r3, r4, r5, pc}
 8007dde:	bf00      	nop
 8007de0:	20003670 	.word	0x20003670

08007de4 <sbrk_aligned>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e24 <sbrk_aligned+0x40>)
 8007de8:	460c      	mov	r4, r1
 8007dea:	6831      	ldr	r1, [r6, #0]
 8007dec:	4605      	mov	r5, r0
 8007dee:	b911      	cbnz	r1, 8007df6 <sbrk_aligned+0x12>
 8007df0:	f000 fba4 	bl	800853c <_sbrk_r>
 8007df4:	6030      	str	r0, [r6, #0]
 8007df6:	4621      	mov	r1, r4
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f000 fb9f 	bl	800853c <_sbrk_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d103      	bne.n	8007e0a <sbrk_aligned+0x26>
 8007e02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007e06:	4620      	mov	r0, r4
 8007e08:	bd70      	pop	{r4, r5, r6, pc}
 8007e0a:	1cc4      	adds	r4, r0, #3
 8007e0c:	f024 0403 	bic.w	r4, r4, #3
 8007e10:	42a0      	cmp	r0, r4
 8007e12:	d0f8      	beq.n	8007e06 <sbrk_aligned+0x22>
 8007e14:	1a21      	subs	r1, r4, r0
 8007e16:	4628      	mov	r0, r5
 8007e18:	f000 fb90 	bl	800853c <_sbrk_r>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d1f2      	bne.n	8007e06 <sbrk_aligned+0x22>
 8007e20:	e7ef      	b.n	8007e02 <sbrk_aligned+0x1e>
 8007e22:	bf00      	nop
 8007e24:	2000366c 	.word	0x2000366c

08007e28 <_malloc_r>:
 8007e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e2c:	1ccd      	adds	r5, r1, #3
 8007e2e:	f025 0503 	bic.w	r5, r5, #3
 8007e32:	3508      	adds	r5, #8
 8007e34:	2d0c      	cmp	r5, #12
 8007e36:	bf38      	it	cc
 8007e38:	250c      	movcc	r5, #12
 8007e3a:	2d00      	cmp	r5, #0
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	db01      	blt.n	8007e44 <_malloc_r+0x1c>
 8007e40:	42a9      	cmp	r1, r5
 8007e42:	d904      	bls.n	8007e4e <_malloc_r+0x26>
 8007e44:	230c      	movs	r3, #12
 8007e46:	6033      	str	r3, [r6, #0]
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f24 <_malloc_r+0xfc>
 8007e52:	f000 f869 	bl	8007f28 <__malloc_lock>
 8007e56:	f8d8 3000 	ldr.w	r3, [r8]
 8007e5a:	461c      	mov	r4, r3
 8007e5c:	bb44      	cbnz	r4, 8007eb0 <_malloc_r+0x88>
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4630      	mov	r0, r6
 8007e62:	f7ff ffbf 	bl	8007de4 <sbrk_aligned>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	4604      	mov	r4, r0
 8007e6a:	d158      	bne.n	8007f1e <_malloc_r+0xf6>
 8007e6c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e70:	4627      	mov	r7, r4
 8007e72:	2f00      	cmp	r7, #0
 8007e74:	d143      	bne.n	8007efe <_malloc_r+0xd6>
 8007e76:	2c00      	cmp	r4, #0
 8007e78:	d04b      	beq.n	8007f12 <_malloc_r+0xea>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4630      	mov	r0, r6
 8007e80:	eb04 0903 	add.w	r9, r4, r3
 8007e84:	f000 fb5a 	bl	800853c <_sbrk_r>
 8007e88:	4581      	cmp	r9, r0
 8007e8a:	d142      	bne.n	8007f12 <_malloc_r+0xea>
 8007e8c:	6821      	ldr	r1, [r4, #0]
 8007e8e:	1a6d      	subs	r5, r5, r1
 8007e90:	4629      	mov	r1, r5
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff ffa6 	bl	8007de4 <sbrk_aligned>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d03a      	beq.n	8007f12 <_malloc_r+0xea>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	442b      	add	r3, r5
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	bb62      	cbnz	r2, 8007f04 <_malloc_r+0xdc>
 8007eaa:	f8c8 7000 	str.w	r7, [r8]
 8007eae:	e00f      	b.n	8007ed0 <_malloc_r+0xa8>
 8007eb0:	6822      	ldr	r2, [r4, #0]
 8007eb2:	1b52      	subs	r2, r2, r5
 8007eb4:	d420      	bmi.n	8007ef8 <_malloc_r+0xd0>
 8007eb6:	2a0b      	cmp	r2, #11
 8007eb8:	d917      	bls.n	8007eea <_malloc_r+0xc2>
 8007eba:	1961      	adds	r1, r4, r5
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	6025      	str	r5, [r4, #0]
 8007ec0:	bf18      	it	ne
 8007ec2:	6059      	strne	r1, [r3, #4]
 8007ec4:	6863      	ldr	r3, [r4, #4]
 8007ec6:	bf08      	it	eq
 8007ec8:	f8c8 1000 	streq.w	r1, [r8]
 8007ecc:	5162      	str	r2, [r4, r5]
 8007ece:	604b      	str	r3, [r1, #4]
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 f82f 	bl	8007f34 <__malloc_unlock>
 8007ed6:	f104 000b 	add.w	r0, r4, #11
 8007eda:	1d23      	adds	r3, r4, #4
 8007edc:	f020 0007 	bic.w	r0, r0, #7
 8007ee0:	1ac2      	subs	r2, r0, r3
 8007ee2:	bf1c      	itt	ne
 8007ee4:	1a1b      	subne	r3, r3, r0
 8007ee6:	50a3      	strne	r3, [r4, r2]
 8007ee8:	e7af      	b.n	8007e4a <_malloc_r+0x22>
 8007eea:	6862      	ldr	r2, [r4, #4]
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	bf0c      	ite	eq
 8007ef0:	f8c8 2000 	streq.w	r2, [r8]
 8007ef4:	605a      	strne	r2, [r3, #4]
 8007ef6:	e7eb      	b.n	8007ed0 <_malloc_r+0xa8>
 8007ef8:	4623      	mov	r3, r4
 8007efa:	6864      	ldr	r4, [r4, #4]
 8007efc:	e7ae      	b.n	8007e5c <_malloc_r+0x34>
 8007efe:	463c      	mov	r4, r7
 8007f00:	687f      	ldr	r7, [r7, #4]
 8007f02:	e7b6      	b.n	8007e72 <_malloc_r+0x4a>
 8007f04:	461a      	mov	r2, r3
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d1fb      	bne.n	8007f04 <_malloc_r+0xdc>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	6053      	str	r3, [r2, #4]
 8007f10:	e7de      	b.n	8007ed0 <_malloc_r+0xa8>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 f80c 	bl	8007f34 <__malloc_unlock>
 8007f1c:	e794      	b.n	8007e48 <_malloc_r+0x20>
 8007f1e:	6005      	str	r5, [r0, #0]
 8007f20:	e7d6      	b.n	8007ed0 <_malloc_r+0xa8>
 8007f22:	bf00      	nop
 8007f24:	20003670 	.word	0x20003670

08007f28 <__malloc_lock>:
 8007f28:	4801      	ldr	r0, [pc, #4]	@ (8007f30 <__malloc_lock+0x8>)
 8007f2a:	f7ff bf01 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 8007f2e:	bf00      	nop
 8007f30:	20003668 	.word	0x20003668

08007f34 <__malloc_unlock>:
 8007f34:	4801      	ldr	r0, [pc, #4]	@ (8007f3c <__malloc_unlock+0x8>)
 8007f36:	f7ff befc 	b.w	8007d32 <__retarget_lock_release_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	20003668 	.word	0x20003668

08007f40 <__ssputs_r>:
 8007f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f44:	688e      	ldr	r6, [r1, #8]
 8007f46:	461f      	mov	r7, r3
 8007f48:	42be      	cmp	r6, r7
 8007f4a:	680b      	ldr	r3, [r1, #0]
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4690      	mov	r8, r2
 8007f52:	d82d      	bhi.n	8007fb0 <__ssputs_r+0x70>
 8007f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f5c:	d026      	beq.n	8007fac <__ssputs_r+0x6c>
 8007f5e:	6965      	ldr	r5, [r4, #20]
 8007f60:	6909      	ldr	r1, [r1, #16]
 8007f62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f66:	eba3 0901 	sub.w	r9, r3, r1
 8007f6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f6e:	1c7b      	adds	r3, r7, #1
 8007f70:	444b      	add	r3, r9
 8007f72:	106d      	asrs	r5, r5, #1
 8007f74:	429d      	cmp	r5, r3
 8007f76:	bf38      	it	cc
 8007f78:	461d      	movcc	r5, r3
 8007f7a:	0553      	lsls	r3, r2, #21
 8007f7c:	d527      	bpl.n	8007fce <__ssputs_r+0x8e>
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f7ff ff52 	bl	8007e28 <_malloc_r>
 8007f84:	4606      	mov	r6, r0
 8007f86:	b360      	cbz	r0, 8007fe2 <__ssputs_r+0xa2>
 8007f88:	6921      	ldr	r1, [r4, #16]
 8007f8a:	464a      	mov	r2, r9
 8007f8c:	f7ff fed2 	bl	8007d34 <memcpy>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	6126      	str	r6, [r4, #16]
 8007f9e:	6165      	str	r5, [r4, #20]
 8007fa0:	444e      	add	r6, r9
 8007fa2:	eba5 0509 	sub.w	r5, r5, r9
 8007fa6:	6026      	str	r6, [r4, #0]
 8007fa8:	60a5      	str	r5, [r4, #8]
 8007faa:	463e      	mov	r6, r7
 8007fac:	42be      	cmp	r6, r7
 8007fae:	d900      	bls.n	8007fb2 <__ssputs_r+0x72>
 8007fb0:	463e      	mov	r6, r7
 8007fb2:	6820      	ldr	r0, [r4, #0]
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	4641      	mov	r1, r8
 8007fb8:	f000 faa6 	bl	8008508 <memmove>
 8007fbc:	68a3      	ldr	r3, [r4, #8]
 8007fbe:	1b9b      	subs	r3, r3, r6
 8007fc0:	60a3      	str	r3, [r4, #8]
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	4433      	add	r3, r6
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	2000      	movs	r0, #0
 8007fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fce:	462a      	mov	r2, r5
 8007fd0:	f000 fac4 	bl	800855c <_realloc_r>
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d1e0      	bne.n	8007f9c <__ssputs_r+0x5c>
 8007fda:	6921      	ldr	r1, [r4, #16]
 8007fdc:	4650      	mov	r0, sl
 8007fde:	f7ff feb7 	bl	8007d50 <_free_r>
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	f8ca 3000 	str.w	r3, [sl]
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fee:	81a3      	strh	r3, [r4, #12]
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ff4:	e7e9      	b.n	8007fca <__ssputs_r+0x8a>
	...

08007ff8 <_svfiprintf_r>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	4698      	mov	r8, r3
 8007ffe:	898b      	ldrh	r3, [r1, #12]
 8008000:	061b      	lsls	r3, r3, #24
 8008002:	b09d      	sub	sp, #116	@ 0x74
 8008004:	4607      	mov	r7, r0
 8008006:	460d      	mov	r5, r1
 8008008:	4614      	mov	r4, r2
 800800a:	d510      	bpl.n	800802e <_svfiprintf_r+0x36>
 800800c:	690b      	ldr	r3, [r1, #16]
 800800e:	b973      	cbnz	r3, 800802e <_svfiprintf_r+0x36>
 8008010:	2140      	movs	r1, #64	@ 0x40
 8008012:	f7ff ff09 	bl	8007e28 <_malloc_r>
 8008016:	6028      	str	r0, [r5, #0]
 8008018:	6128      	str	r0, [r5, #16]
 800801a:	b930      	cbnz	r0, 800802a <_svfiprintf_r+0x32>
 800801c:	230c      	movs	r3, #12
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008024:	b01d      	add	sp, #116	@ 0x74
 8008026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802a:	2340      	movs	r3, #64	@ 0x40
 800802c:	616b      	str	r3, [r5, #20]
 800802e:	2300      	movs	r3, #0
 8008030:	9309      	str	r3, [sp, #36]	@ 0x24
 8008032:	2320      	movs	r3, #32
 8008034:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008038:	f8cd 800c 	str.w	r8, [sp, #12]
 800803c:	2330      	movs	r3, #48	@ 0x30
 800803e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081dc <_svfiprintf_r+0x1e4>
 8008042:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008046:	f04f 0901 	mov.w	r9, #1
 800804a:	4623      	mov	r3, r4
 800804c:	469a      	mov	sl, r3
 800804e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008052:	b10a      	cbz	r2, 8008058 <_svfiprintf_r+0x60>
 8008054:	2a25      	cmp	r2, #37	@ 0x25
 8008056:	d1f9      	bne.n	800804c <_svfiprintf_r+0x54>
 8008058:	ebba 0b04 	subs.w	fp, sl, r4
 800805c:	d00b      	beq.n	8008076 <_svfiprintf_r+0x7e>
 800805e:	465b      	mov	r3, fp
 8008060:	4622      	mov	r2, r4
 8008062:	4629      	mov	r1, r5
 8008064:	4638      	mov	r0, r7
 8008066:	f7ff ff6b 	bl	8007f40 <__ssputs_r>
 800806a:	3001      	adds	r0, #1
 800806c:	f000 80a7 	beq.w	80081be <_svfiprintf_r+0x1c6>
 8008070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008072:	445a      	add	r2, fp
 8008074:	9209      	str	r2, [sp, #36]	@ 0x24
 8008076:	f89a 3000 	ldrb.w	r3, [sl]
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 809f 	beq.w	80081be <_svfiprintf_r+0x1c6>
 8008080:	2300      	movs	r3, #0
 8008082:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800808a:	f10a 0a01 	add.w	sl, sl, #1
 800808e:	9304      	str	r3, [sp, #16]
 8008090:	9307      	str	r3, [sp, #28]
 8008092:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008096:	931a      	str	r3, [sp, #104]	@ 0x68
 8008098:	4654      	mov	r4, sl
 800809a:	2205      	movs	r2, #5
 800809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a0:	484e      	ldr	r0, [pc, #312]	@ (80081dc <_svfiprintf_r+0x1e4>)
 80080a2:	f7f8 f8a5 	bl	80001f0 <memchr>
 80080a6:	9a04      	ldr	r2, [sp, #16]
 80080a8:	b9d8      	cbnz	r0, 80080e2 <_svfiprintf_r+0xea>
 80080aa:	06d0      	lsls	r0, r2, #27
 80080ac:	bf44      	itt	mi
 80080ae:	2320      	movmi	r3, #32
 80080b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080b4:	0711      	lsls	r1, r2, #28
 80080b6:	bf44      	itt	mi
 80080b8:	232b      	movmi	r3, #43	@ 0x2b
 80080ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080be:	f89a 3000 	ldrb.w	r3, [sl]
 80080c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80080c4:	d015      	beq.n	80080f2 <_svfiprintf_r+0xfa>
 80080c6:	9a07      	ldr	r2, [sp, #28]
 80080c8:	4654      	mov	r4, sl
 80080ca:	2000      	movs	r0, #0
 80080cc:	f04f 0c0a 	mov.w	ip, #10
 80080d0:	4621      	mov	r1, r4
 80080d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080d6:	3b30      	subs	r3, #48	@ 0x30
 80080d8:	2b09      	cmp	r3, #9
 80080da:	d94b      	bls.n	8008174 <_svfiprintf_r+0x17c>
 80080dc:	b1b0      	cbz	r0, 800810c <_svfiprintf_r+0x114>
 80080de:	9207      	str	r2, [sp, #28]
 80080e0:	e014      	b.n	800810c <_svfiprintf_r+0x114>
 80080e2:	eba0 0308 	sub.w	r3, r0, r8
 80080e6:	fa09 f303 	lsl.w	r3, r9, r3
 80080ea:	4313      	orrs	r3, r2
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	46a2      	mov	sl, r4
 80080f0:	e7d2      	b.n	8008098 <_svfiprintf_r+0xa0>
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	1d19      	adds	r1, r3, #4
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	9103      	str	r1, [sp, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bfbb      	ittet	lt
 80080fe:	425b      	neglt	r3, r3
 8008100:	f042 0202 	orrlt.w	r2, r2, #2
 8008104:	9307      	strge	r3, [sp, #28]
 8008106:	9307      	strlt	r3, [sp, #28]
 8008108:	bfb8      	it	lt
 800810a:	9204      	strlt	r2, [sp, #16]
 800810c:	7823      	ldrb	r3, [r4, #0]
 800810e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008110:	d10a      	bne.n	8008128 <_svfiprintf_r+0x130>
 8008112:	7863      	ldrb	r3, [r4, #1]
 8008114:	2b2a      	cmp	r3, #42	@ 0x2a
 8008116:	d132      	bne.n	800817e <_svfiprintf_r+0x186>
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	1d1a      	adds	r2, r3, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	9203      	str	r2, [sp, #12]
 8008120:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008124:	3402      	adds	r4, #2
 8008126:	9305      	str	r3, [sp, #20]
 8008128:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081ec <_svfiprintf_r+0x1f4>
 800812c:	7821      	ldrb	r1, [r4, #0]
 800812e:	2203      	movs	r2, #3
 8008130:	4650      	mov	r0, sl
 8008132:	f7f8 f85d 	bl	80001f0 <memchr>
 8008136:	b138      	cbz	r0, 8008148 <_svfiprintf_r+0x150>
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	eba0 000a 	sub.w	r0, r0, sl
 800813e:	2240      	movs	r2, #64	@ 0x40
 8008140:	4082      	lsls	r2, r0
 8008142:	4313      	orrs	r3, r2
 8008144:	3401      	adds	r4, #1
 8008146:	9304      	str	r3, [sp, #16]
 8008148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814c:	4824      	ldr	r0, [pc, #144]	@ (80081e0 <_svfiprintf_r+0x1e8>)
 800814e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008152:	2206      	movs	r2, #6
 8008154:	f7f8 f84c 	bl	80001f0 <memchr>
 8008158:	2800      	cmp	r0, #0
 800815a:	d036      	beq.n	80081ca <_svfiprintf_r+0x1d2>
 800815c:	4b21      	ldr	r3, [pc, #132]	@ (80081e4 <_svfiprintf_r+0x1ec>)
 800815e:	bb1b      	cbnz	r3, 80081a8 <_svfiprintf_r+0x1b0>
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	3307      	adds	r3, #7
 8008164:	f023 0307 	bic.w	r3, r3, #7
 8008168:	3308      	adds	r3, #8
 800816a:	9303      	str	r3, [sp, #12]
 800816c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800816e:	4433      	add	r3, r6
 8008170:	9309      	str	r3, [sp, #36]	@ 0x24
 8008172:	e76a      	b.n	800804a <_svfiprintf_r+0x52>
 8008174:	fb0c 3202 	mla	r2, ip, r2, r3
 8008178:	460c      	mov	r4, r1
 800817a:	2001      	movs	r0, #1
 800817c:	e7a8      	b.n	80080d0 <_svfiprintf_r+0xd8>
 800817e:	2300      	movs	r3, #0
 8008180:	3401      	adds	r4, #1
 8008182:	9305      	str	r3, [sp, #20]
 8008184:	4619      	mov	r1, r3
 8008186:	f04f 0c0a 	mov.w	ip, #10
 800818a:	4620      	mov	r0, r4
 800818c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008190:	3a30      	subs	r2, #48	@ 0x30
 8008192:	2a09      	cmp	r2, #9
 8008194:	d903      	bls.n	800819e <_svfiprintf_r+0x1a6>
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0c6      	beq.n	8008128 <_svfiprintf_r+0x130>
 800819a:	9105      	str	r1, [sp, #20]
 800819c:	e7c4      	b.n	8008128 <_svfiprintf_r+0x130>
 800819e:	fb0c 2101 	mla	r1, ip, r1, r2
 80081a2:	4604      	mov	r4, r0
 80081a4:	2301      	movs	r3, #1
 80081a6:	e7f0      	b.n	800818a <_svfiprintf_r+0x192>
 80081a8:	ab03      	add	r3, sp, #12
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	462a      	mov	r2, r5
 80081ae:	4b0e      	ldr	r3, [pc, #56]	@ (80081e8 <_svfiprintf_r+0x1f0>)
 80081b0:	a904      	add	r1, sp, #16
 80081b2:	4638      	mov	r0, r7
 80081b4:	f3af 8000 	nop.w
 80081b8:	1c42      	adds	r2, r0, #1
 80081ba:	4606      	mov	r6, r0
 80081bc:	d1d6      	bne.n	800816c <_svfiprintf_r+0x174>
 80081be:	89ab      	ldrh	r3, [r5, #12]
 80081c0:	065b      	lsls	r3, r3, #25
 80081c2:	f53f af2d 	bmi.w	8008020 <_svfiprintf_r+0x28>
 80081c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c8:	e72c      	b.n	8008024 <_svfiprintf_r+0x2c>
 80081ca:	ab03      	add	r3, sp, #12
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	462a      	mov	r2, r5
 80081d0:	4b05      	ldr	r3, [pc, #20]	@ (80081e8 <_svfiprintf_r+0x1f0>)
 80081d2:	a904      	add	r1, sp, #16
 80081d4:	4638      	mov	r0, r7
 80081d6:	f000 f879 	bl	80082cc <_printf_i>
 80081da:	e7ed      	b.n	80081b8 <_svfiprintf_r+0x1c0>
 80081dc:	080086d8 	.word	0x080086d8
 80081e0:	080086e2 	.word	0x080086e2
 80081e4:	00000000 	.word	0x00000000
 80081e8:	08007f41 	.word	0x08007f41
 80081ec:	080086de 	.word	0x080086de

080081f0 <_printf_common>:
 80081f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f4:	4616      	mov	r6, r2
 80081f6:	4698      	mov	r8, r3
 80081f8:	688a      	ldr	r2, [r1, #8]
 80081fa:	690b      	ldr	r3, [r1, #16]
 80081fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008200:	4293      	cmp	r3, r2
 8008202:	bfb8      	it	lt
 8008204:	4613      	movlt	r3, r2
 8008206:	6033      	str	r3, [r6, #0]
 8008208:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800820c:	4607      	mov	r7, r0
 800820e:	460c      	mov	r4, r1
 8008210:	b10a      	cbz	r2, 8008216 <_printf_common+0x26>
 8008212:	3301      	adds	r3, #1
 8008214:	6033      	str	r3, [r6, #0]
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	0699      	lsls	r1, r3, #26
 800821a:	bf42      	ittt	mi
 800821c:	6833      	ldrmi	r3, [r6, #0]
 800821e:	3302      	addmi	r3, #2
 8008220:	6033      	strmi	r3, [r6, #0]
 8008222:	6825      	ldr	r5, [r4, #0]
 8008224:	f015 0506 	ands.w	r5, r5, #6
 8008228:	d106      	bne.n	8008238 <_printf_common+0x48>
 800822a:	f104 0a19 	add.w	sl, r4, #25
 800822e:	68e3      	ldr	r3, [r4, #12]
 8008230:	6832      	ldr	r2, [r6, #0]
 8008232:	1a9b      	subs	r3, r3, r2
 8008234:	42ab      	cmp	r3, r5
 8008236:	dc26      	bgt.n	8008286 <_printf_common+0x96>
 8008238:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	3b00      	subs	r3, #0
 8008240:	bf18      	it	ne
 8008242:	2301      	movne	r3, #1
 8008244:	0692      	lsls	r2, r2, #26
 8008246:	d42b      	bmi.n	80082a0 <_printf_common+0xb0>
 8008248:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800824c:	4641      	mov	r1, r8
 800824e:	4638      	mov	r0, r7
 8008250:	47c8      	blx	r9
 8008252:	3001      	adds	r0, #1
 8008254:	d01e      	beq.n	8008294 <_printf_common+0xa4>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	6922      	ldr	r2, [r4, #16]
 800825a:	f003 0306 	and.w	r3, r3, #6
 800825e:	2b04      	cmp	r3, #4
 8008260:	bf02      	ittt	eq
 8008262:	68e5      	ldreq	r5, [r4, #12]
 8008264:	6833      	ldreq	r3, [r6, #0]
 8008266:	1aed      	subeq	r5, r5, r3
 8008268:	68a3      	ldr	r3, [r4, #8]
 800826a:	bf0c      	ite	eq
 800826c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008270:	2500      	movne	r5, #0
 8008272:	4293      	cmp	r3, r2
 8008274:	bfc4      	itt	gt
 8008276:	1a9b      	subgt	r3, r3, r2
 8008278:	18ed      	addgt	r5, r5, r3
 800827a:	2600      	movs	r6, #0
 800827c:	341a      	adds	r4, #26
 800827e:	42b5      	cmp	r5, r6
 8008280:	d11a      	bne.n	80082b8 <_printf_common+0xc8>
 8008282:	2000      	movs	r0, #0
 8008284:	e008      	b.n	8008298 <_printf_common+0xa8>
 8008286:	2301      	movs	r3, #1
 8008288:	4652      	mov	r2, sl
 800828a:	4641      	mov	r1, r8
 800828c:	4638      	mov	r0, r7
 800828e:	47c8      	blx	r9
 8008290:	3001      	adds	r0, #1
 8008292:	d103      	bne.n	800829c <_printf_common+0xac>
 8008294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829c:	3501      	adds	r5, #1
 800829e:	e7c6      	b.n	800822e <_printf_common+0x3e>
 80082a0:	18e1      	adds	r1, r4, r3
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	2030      	movs	r0, #48	@ 0x30
 80082a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082aa:	4422      	add	r2, r4
 80082ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082b4:	3302      	adds	r3, #2
 80082b6:	e7c7      	b.n	8008248 <_printf_common+0x58>
 80082b8:	2301      	movs	r3, #1
 80082ba:	4622      	mov	r2, r4
 80082bc:	4641      	mov	r1, r8
 80082be:	4638      	mov	r0, r7
 80082c0:	47c8      	blx	r9
 80082c2:	3001      	adds	r0, #1
 80082c4:	d0e6      	beq.n	8008294 <_printf_common+0xa4>
 80082c6:	3601      	adds	r6, #1
 80082c8:	e7d9      	b.n	800827e <_printf_common+0x8e>
	...

080082cc <_printf_i>:
 80082cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	7e0f      	ldrb	r7, [r1, #24]
 80082d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082d4:	2f78      	cmp	r7, #120	@ 0x78
 80082d6:	4691      	mov	r9, r2
 80082d8:	4680      	mov	r8, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	469a      	mov	sl, r3
 80082de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082e2:	d807      	bhi.n	80082f4 <_printf_i+0x28>
 80082e4:	2f62      	cmp	r7, #98	@ 0x62
 80082e6:	d80a      	bhi.n	80082fe <_printf_i+0x32>
 80082e8:	2f00      	cmp	r7, #0
 80082ea:	f000 80d1 	beq.w	8008490 <_printf_i+0x1c4>
 80082ee:	2f58      	cmp	r7, #88	@ 0x58
 80082f0:	f000 80b8 	beq.w	8008464 <_printf_i+0x198>
 80082f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082fc:	e03a      	b.n	8008374 <_printf_i+0xa8>
 80082fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008302:	2b15      	cmp	r3, #21
 8008304:	d8f6      	bhi.n	80082f4 <_printf_i+0x28>
 8008306:	a101      	add	r1, pc, #4	@ (adr r1, 800830c <_printf_i+0x40>)
 8008308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800830c:	08008365 	.word	0x08008365
 8008310:	08008379 	.word	0x08008379
 8008314:	080082f5 	.word	0x080082f5
 8008318:	080082f5 	.word	0x080082f5
 800831c:	080082f5 	.word	0x080082f5
 8008320:	080082f5 	.word	0x080082f5
 8008324:	08008379 	.word	0x08008379
 8008328:	080082f5 	.word	0x080082f5
 800832c:	080082f5 	.word	0x080082f5
 8008330:	080082f5 	.word	0x080082f5
 8008334:	080082f5 	.word	0x080082f5
 8008338:	08008477 	.word	0x08008477
 800833c:	080083a3 	.word	0x080083a3
 8008340:	08008431 	.word	0x08008431
 8008344:	080082f5 	.word	0x080082f5
 8008348:	080082f5 	.word	0x080082f5
 800834c:	08008499 	.word	0x08008499
 8008350:	080082f5 	.word	0x080082f5
 8008354:	080083a3 	.word	0x080083a3
 8008358:	080082f5 	.word	0x080082f5
 800835c:	080082f5 	.word	0x080082f5
 8008360:	08008439 	.word	0x08008439
 8008364:	6833      	ldr	r3, [r6, #0]
 8008366:	1d1a      	adds	r2, r3, #4
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6032      	str	r2, [r6, #0]
 800836c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008370:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008374:	2301      	movs	r3, #1
 8008376:	e09c      	b.n	80084b2 <_printf_i+0x1e6>
 8008378:	6833      	ldr	r3, [r6, #0]
 800837a:	6820      	ldr	r0, [r4, #0]
 800837c:	1d19      	adds	r1, r3, #4
 800837e:	6031      	str	r1, [r6, #0]
 8008380:	0606      	lsls	r6, r0, #24
 8008382:	d501      	bpl.n	8008388 <_printf_i+0xbc>
 8008384:	681d      	ldr	r5, [r3, #0]
 8008386:	e003      	b.n	8008390 <_printf_i+0xc4>
 8008388:	0645      	lsls	r5, r0, #25
 800838a:	d5fb      	bpl.n	8008384 <_printf_i+0xb8>
 800838c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008390:	2d00      	cmp	r5, #0
 8008392:	da03      	bge.n	800839c <_printf_i+0xd0>
 8008394:	232d      	movs	r3, #45	@ 0x2d
 8008396:	426d      	negs	r5, r5
 8008398:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800839c:	4858      	ldr	r0, [pc, #352]	@ (8008500 <_printf_i+0x234>)
 800839e:	230a      	movs	r3, #10
 80083a0:	e011      	b.n	80083c6 <_printf_i+0xfa>
 80083a2:	6821      	ldr	r1, [r4, #0]
 80083a4:	6833      	ldr	r3, [r6, #0]
 80083a6:	0608      	lsls	r0, r1, #24
 80083a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80083ac:	d402      	bmi.n	80083b4 <_printf_i+0xe8>
 80083ae:	0649      	lsls	r1, r1, #25
 80083b0:	bf48      	it	mi
 80083b2:	b2ad      	uxthmi	r5, r5
 80083b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80083b6:	4852      	ldr	r0, [pc, #328]	@ (8008500 <_printf_i+0x234>)
 80083b8:	6033      	str	r3, [r6, #0]
 80083ba:	bf14      	ite	ne
 80083bc:	230a      	movne	r3, #10
 80083be:	2308      	moveq	r3, #8
 80083c0:	2100      	movs	r1, #0
 80083c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083c6:	6866      	ldr	r6, [r4, #4]
 80083c8:	60a6      	str	r6, [r4, #8]
 80083ca:	2e00      	cmp	r6, #0
 80083cc:	db05      	blt.n	80083da <_printf_i+0x10e>
 80083ce:	6821      	ldr	r1, [r4, #0]
 80083d0:	432e      	orrs	r6, r5
 80083d2:	f021 0104 	bic.w	r1, r1, #4
 80083d6:	6021      	str	r1, [r4, #0]
 80083d8:	d04b      	beq.n	8008472 <_printf_i+0x1a6>
 80083da:	4616      	mov	r6, r2
 80083dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80083e0:	fb03 5711 	mls	r7, r3, r1, r5
 80083e4:	5dc7      	ldrb	r7, [r0, r7]
 80083e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083ea:	462f      	mov	r7, r5
 80083ec:	42bb      	cmp	r3, r7
 80083ee:	460d      	mov	r5, r1
 80083f0:	d9f4      	bls.n	80083dc <_printf_i+0x110>
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d10b      	bne.n	800840e <_printf_i+0x142>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	07df      	lsls	r7, r3, #31
 80083fa:	d508      	bpl.n	800840e <_printf_i+0x142>
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	6861      	ldr	r1, [r4, #4]
 8008400:	4299      	cmp	r1, r3
 8008402:	bfde      	ittt	le
 8008404:	2330      	movle	r3, #48	@ 0x30
 8008406:	f806 3c01 	strble.w	r3, [r6, #-1]
 800840a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800840e:	1b92      	subs	r2, r2, r6
 8008410:	6122      	str	r2, [r4, #16]
 8008412:	f8cd a000 	str.w	sl, [sp]
 8008416:	464b      	mov	r3, r9
 8008418:	aa03      	add	r2, sp, #12
 800841a:	4621      	mov	r1, r4
 800841c:	4640      	mov	r0, r8
 800841e:	f7ff fee7 	bl	80081f0 <_printf_common>
 8008422:	3001      	adds	r0, #1
 8008424:	d14a      	bne.n	80084bc <_printf_i+0x1f0>
 8008426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800842a:	b004      	add	sp, #16
 800842c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	f043 0320 	orr.w	r3, r3, #32
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	4832      	ldr	r0, [pc, #200]	@ (8008504 <_printf_i+0x238>)
 800843a:	2778      	movs	r7, #120	@ 0x78
 800843c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	6831      	ldr	r1, [r6, #0]
 8008444:	061f      	lsls	r7, r3, #24
 8008446:	f851 5b04 	ldr.w	r5, [r1], #4
 800844a:	d402      	bmi.n	8008452 <_printf_i+0x186>
 800844c:	065f      	lsls	r7, r3, #25
 800844e:	bf48      	it	mi
 8008450:	b2ad      	uxthmi	r5, r5
 8008452:	6031      	str	r1, [r6, #0]
 8008454:	07d9      	lsls	r1, r3, #31
 8008456:	bf44      	itt	mi
 8008458:	f043 0320 	orrmi.w	r3, r3, #32
 800845c:	6023      	strmi	r3, [r4, #0]
 800845e:	b11d      	cbz	r5, 8008468 <_printf_i+0x19c>
 8008460:	2310      	movs	r3, #16
 8008462:	e7ad      	b.n	80083c0 <_printf_i+0xf4>
 8008464:	4826      	ldr	r0, [pc, #152]	@ (8008500 <_printf_i+0x234>)
 8008466:	e7e9      	b.n	800843c <_printf_i+0x170>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	f023 0320 	bic.w	r3, r3, #32
 800846e:	6023      	str	r3, [r4, #0]
 8008470:	e7f6      	b.n	8008460 <_printf_i+0x194>
 8008472:	4616      	mov	r6, r2
 8008474:	e7bd      	b.n	80083f2 <_printf_i+0x126>
 8008476:	6833      	ldr	r3, [r6, #0]
 8008478:	6825      	ldr	r5, [r4, #0]
 800847a:	6961      	ldr	r1, [r4, #20]
 800847c:	1d18      	adds	r0, r3, #4
 800847e:	6030      	str	r0, [r6, #0]
 8008480:	062e      	lsls	r6, r5, #24
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	d501      	bpl.n	800848a <_printf_i+0x1be>
 8008486:	6019      	str	r1, [r3, #0]
 8008488:	e002      	b.n	8008490 <_printf_i+0x1c4>
 800848a:	0668      	lsls	r0, r5, #25
 800848c:	d5fb      	bpl.n	8008486 <_printf_i+0x1ba>
 800848e:	8019      	strh	r1, [r3, #0]
 8008490:	2300      	movs	r3, #0
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	4616      	mov	r6, r2
 8008496:	e7bc      	b.n	8008412 <_printf_i+0x146>
 8008498:	6833      	ldr	r3, [r6, #0]
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	6032      	str	r2, [r6, #0]
 800849e:	681e      	ldr	r6, [r3, #0]
 80084a0:	6862      	ldr	r2, [r4, #4]
 80084a2:	2100      	movs	r1, #0
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7f7 fea3 	bl	80001f0 <memchr>
 80084aa:	b108      	cbz	r0, 80084b0 <_printf_i+0x1e4>
 80084ac:	1b80      	subs	r0, r0, r6
 80084ae:	6060      	str	r0, [r4, #4]
 80084b0:	6863      	ldr	r3, [r4, #4]
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	2300      	movs	r3, #0
 80084b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084ba:	e7aa      	b.n	8008412 <_printf_i+0x146>
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	4632      	mov	r2, r6
 80084c0:	4649      	mov	r1, r9
 80084c2:	4640      	mov	r0, r8
 80084c4:	47d0      	blx	sl
 80084c6:	3001      	adds	r0, #1
 80084c8:	d0ad      	beq.n	8008426 <_printf_i+0x15a>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	079b      	lsls	r3, r3, #30
 80084ce:	d413      	bmi.n	80084f8 <_printf_i+0x22c>
 80084d0:	68e0      	ldr	r0, [r4, #12]
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	4298      	cmp	r0, r3
 80084d6:	bfb8      	it	lt
 80084d8:	4618      	movlt	r0, r3
 80084da:	e7a6      	b.n	800842a <_printf_i+0x15e>
 80084dc:	2301      	movs	r3, #1
 80084de:	4632      	mov	r2, r6
 80084e0:	4649      	mov	r1, r9
 80084e2:	4640      	mov	r0, r8
 80084e4:	47d0      	blx	sl
 80084e6:	3001      	adds	r0, #1
 80084e8:	d09d      	beq.n	8008426 <_printf_i+0x15a>
 80084ea:	3501      	adds	r5, #1
 80084ec:	68e3      	ldr	r3, [r4, #12]
 80084ee:	9903      	ldr	r1, [sp, #12]
 80084f0:	1a5b      	subs	r3, r3, r1
 80084f2:	42ab      	cmp	r3, r5
 80084f4:	dcf2      	bgt.n	80084dc <_printf_i+0x210>
 80084f6:	e7eb      	b.n	80084d0 <_printf_i+0x204>
 80084f8:	2500      	movs	r5, #0
 80084fa:	f104 0619 	add.w	r6, r4, #25
 80084fe:	e7f5      	b.n	80084ec <_printf_i+0x220>
 8008500:	080086e9 	.word	0x080086e9
 8008504:	080086fa 	.word	0x080086fa

08008508 <memmove>:
 8008508:	4288      	cmp	r0, r1
 800850a:	b510      	push	{r4, lr}
 800850c:	eb01 0402 	add.w	r4, r1, r2
 8008510:	d902      	bls.n	8008518 <memmove+0x10>
 8008512:	4284      	cmp	r4, r0
 8008514:	4623      	mov	r3, r4
 8008516:	d807      	bhi.n	8008528 <memmove+0x20>
 8008518:	1e43      	subs	r3, r0, #1
 800851a:	42a1      	cmp	r1, r4
 800851c:	d008      	beq.n	8008530 <memmove+0x28>
 800851e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008526:	e7f8      	b.n	800851a <memmove+0x12>
 8008528:	4402      	add	r2, r0
 800852a:	4601      	mov	r1, r0
 800852c:	428a      	cmp	r2, r1
 800852e:	d100      	bne.n	8008532 <memmove+0x2a>
 8008530:	bd10      	pop	{r4, pc}
 8008532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800853a:	e7f7      	b.n	800852c <memmove+0x24>

0800853c <_sbrk_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4d06      	ldr	r5, [pc, #24]	@ (8008558 <_sbrk_r+0x1c>)
 8008540:	2300      	movs	r3, #0
 8008542:	4604      	mov	r4, r0
 8008544:	4608      	mov	r0, r1
 8008546:	602b      	str	r3, [r5, #0]
 8008548:	f7f8 fd0a 	bl	8000f60 <_sbrk>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d102      	bne.n	8008556 <_sbrk_r+0x1a>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	b103      	cbz	r3, 8008556 <_sbrk_r+0x1a>
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	20003664 	.word	0x20003664

0800855c <_realloc_r>:
 800855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008560:	4607      	mov	r7, r0
 8008562:	4614      	mov	r4, r2
 8008564:	460d      	mov	r5, r1
 8008566:	b921      	cbnz	r1, 8008572 <_realloc_r+0x16>
 8008568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800856c:	4611      	mov	r1, r2
 800856e:	f7ff bc5b 	b.w	8007e28 <_malloc_r>
 8008572:	b92a      	cbnz	r2, 8008580 <_realloc_r+0x24>
 8008574:	f7ff fbec 	bl	8007d50 <_free_r>
 8008578:	4625      	mov	r5, r4
 800857a:	4628      	mov	r0, r5
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	f000 f81a 	bl	80085b8 <_malloc_usable_size_r>
 8008584:	4284      	cmp	r4, r0
 8008586:	4606      	mov	r6, r0
 8008588:	d802      	bhi.n	8008590 <_realloc_r+0x34>
 800858a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800858e:	d8f4      	bhi.n	800857a <_realloc_r+0x1e>
 8008590:	4621      	mov	r1, r4
 8008592:	4638      	mov	r0, r7
 8008594:	f7ff fc48 	bl	8007e28 <_malloc_r>
 8008598:	4680      	mov	r8, r0
 800859a:	b908      	cbnz	r0, 80085a0 <_realloc_r+0x44>
 800859c:	4645      	mov	r5, r8
 800859e:	e7ec      	b.n	800857a <_realloc_r+0x1e>
 80085a0:	42b4      	cmp	r4, r6
 80085a2:	4622      	mov	r2, r4
 80085a4:	4629      	mov	r1, r5
 80085a6:	bf28      	it	cs
 80085a8:	4632      	movcs	r2, r6
 80085aa:	f7ff fbc3 	bl	8007d34 <memcpy>
 80085ae:	4629      	mov	r1, r5
 80085b0:	4638      	mov	r0, r7
 80085b2:	f7ff fbcd 	bl	8007d50 <_free_r>
 80085b6:	e7f1      	b.n	800859c <_realloc_r+0x40>

080085b8 <_malloc_usable_size_r>:
 80085b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085bc:	1f18      	subs	r0, r3, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bfbc      	itt	lt
 80085c2:	580b      	ldrlt	r3, [r1, r0]
 80085c4:	18c0      	addlt	r0, r0, r3
 80085c6:	4770      	bx	lr

080085c8 <_init>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	bf00      	nop
 80085cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ce:	bc08      	pop	{r3}
 80085d0:	469e      	mov	lr, r3
 80085d2:	4770      	bx	lr

080085d4 <_fini>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	bf00      	nop
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr
